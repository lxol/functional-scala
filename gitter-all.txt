
John A. De Goes/functional-scala

John A. De Goes
@jdegoes
Sep 10 08:50
Testing
Participants are welcome to use this chat room to report problems, share code, ask questions, and otherwise chat about functional programming for the duration.
John A. De Goes
@jdegoes
Sep 10 08:57
https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc
https://www.scala-lang.org/api/2.12.x/scala/collection/Set.html
https://github.com/scalaz/scalaz-zio
Leszek Gruchała
@leszekgruchala
Sep 10 08:59
John, we can’t hear you.
John A. De Goes
@jdegoes
Sep 10 09:00
https://github.com/scalaz/scalaz/tree/series/7.3.x/core/src/main/scala/scalaz
Leszek Gruchała
@leszekgruchala
Sep 10 09:00
See Zoom’s chat
Wiem Zine El Abidine
@wi101
Sep 10 09:06
waiting for the Zoom access
Jorge
@jaliss
Sep 10 09:06
Me too
Leszek Gruchała
@leszekgruchala
Sep 10 09:07
John got dropped (connection lost), we’re waitng
Jorge
@jaliss
Sep 10 09:07
oh ok
Wiem Zine El Abidine
@wi101
Sep 10 09:08
ok
Jens Hoffmann
@jchoffmann
Sep 10 09:08
lol
Jules Ivanic
@guizmaii
Sep 10 09:10
The internet is not great here for now :/
Menestret Martin
@mmenestret_twitter
Sep 10 09:13
Hi there
o/
Jules Ivanic
@guizmaii
Sep 10 09:13
Does everyone have access to Zoom ?
Merunas
@meras
Sep 10 09:13
use gutter in
Jorge
@jaliss
Sep 10 09:13
I'm in
ಠ_ರೃ
@mrt181_twitter
Sep 10 09:13
yes
Merunas
@meras
Sep 10 09:14
gitter instead*
kenBayama
@kenBayama
Sep 10 09:14
hi
Jules Ivanic
@guizmaii
Sep 10 09:14
If you have any difficulty, let me know
Adiela Abishua
@adiela
Sep 10 09:15
zoom working great
Bertjan Broeksema
@bbroeksema
Sep 10 09:15
works for me as well
Jorge
@jaliss
Sep 10 09:15
yeah, I had little faith for it in Linux but seems to work :)
Bertjan Broeksema
@bbroeksema
Sep 10 09:15
HEhe @jaliss same here
Jorge
@jaliss
Sep 10 09:16
ha
Jorge
@jaliss
Sep 10 09:27
I can only see John's screen
is there video image as well?
Leszek Gruchała
@leszekgruchala
Sep 10 09:27
yes
ಠ_ರೃ
@mrt181_twitter
Sep 10 09:27
me too
realfiretiger
@realfiretiger
Sep 10 09:27
i can only see the screen
Jens Hoffmann
@jchoffmann
Sep 10 09:27
yeah in the list of participants
Leszek Gruchała
@leszekgruchala
Sep 10 09:27
exactly
marianobringas
@marianobringas
Sep 10 09:27
I’m able to see both
Jens Hoffmann
@jchoffmann
Sep 10 09:27
there's john, double click his small window
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 09:28
Video is fine.
Jens Hoffmann
@jchoffmann
Sep 10 09:28
it'll go full screen
ಠ_ರೃ
@mrt181_twitter
Sep 10 09:29
infnite
non strings
marianobringas
@marianobringas
Sep 10 09:35
List(Left(Left(Unit)), Left(Right(Unit)), Right(Unit))
Jens Hoffmann
@jchoffmann
Sep 10 09:39
How do we raise questions from remote location - here?
Menestret Martin
@mmenestret_twitter
Sep 10 09:39
here yes
Jens Hoffmann
@jchoffmann
Sep 10 09:40
Will someone notify John if we Q here?
OK thanks
ಠ_ರೃ
@mrt181_twitter
Sep 10 09:45
A x UNIT <=> A?
Leszek Gruchała
@leszekgruchala
Sep 10 09:46
yes
Jens Hoffmann
@jchoffmann
Sep 10 09:52
def to1A): A = t._1
def from1A: (A, Unit) = (a, Unit)
Leszek Gruchała
@leszekgruchala
Sep 10 09:53
Unit is a type, you need to pass value
def from1[A](a: A): (A, Unit) = a -> ()
Jens Hoffmann
@jchoffmann
Sep 10 09:53
true
thx
Leszek Gruchała
@leszekgruchala
Sep 10 09:53
:)
Jules Ivanic
@guizmaii
Sep 10 09:53
(a, ())
in this form a -> () scalac complains for me
Jens Hoffmann
@jchoffmann
Sep 10 09:54
this is great :)
Leszek Gruchała
@leszekgruchala
Sep 10 09:54
-> is a implicit function
available by default… let me check
Jules Ivanic
@guizmaii
Sep 10 09:54

[error] /Users/jules/functional-scala/src/main/scala/net/degoes/01-essentials/exercises.scala:54:36: Adaptation of argument list by inserting () is deprecated: this is unlikely to be what you want.
[error]         signature: ArrowAssoc.->[B](y: B): (A, B)
[error]   given arguments: <none>
[error]  after adaptation: ArrowAssoc.->((): Unit)
[error]   def from[A](a: A): (A, Unit) = a -> ()
[error]                                    ^
[error] one error found
[error] (Compile / compileIncremental) Compilation failed

Jorge
@jaliss
Sep 10 09:54
can everyone see the full comments on the code? it seems some part on the right is not visible for me.
marianobringas
@marianobringas
Sep 10 09:55
same issue with regards to comments not being fully visible
Menestret Martin
@mmenestret_twitter
Sep 10 09:55
"" → (()) @guizmaii ?
ಠ_ರೃ
@mrt181_twitter
Sep 10 09:55
johns screenn ion zoom is 4:3
Jules Ivanic
@guizmaii
Sep 10 09:56
@mmenestret_twitter ugly but it works :smile:
Jorge
@jaliss
Sep 10 09:56
yeah
Menestret Martin
@mmenestret_twitter
Sep 10 09:56
:D
Ugly it is
Jens Hoffmann
@jchoffmann
Sep 10 09:56
John said Unit was a type with only 1 element but didn't mention the value, which I presume is ()
Leszek Gruchała
@leszekgruchala
Sep 10 09:56
ok, we need to help a bit the compiler here
def from1[A](a: A): (A, Unit) = a -> ((): Unit)
Jens Hoffmann
@jchoffmann
Sep 10 09:56
Might be worth pointing out
Leszek Gruchała
@leszekgruchala
Sep 10 09:57
1 element == 1 value of ()
Menestret Martin
@mmenestret_twitter
Sep 10 09:57
a -> () is calling -> with no params
as if you were calling f()
Leszek Gruchała
@leszekgruchala
Sep 10 09:57
yeah
Sitbon
@nsitbon
Sep 10 10:08
does John switch the name of the 2 functions?
Leszek Gruchała
@leszekgruchala
Sep 10 10:10
no
Sitbon
@nsitbon
Sep 10 10:12
to2 return 1 term
Wiem Zine El Abidine
@wi101
Sep 10 10:12
the same 2 functions but with Sum types A + 0
(the previous 2 function were for Product types: A * 1)
Sitbon
@nsitbon
Sep 10 10:12
and from2 get 2 and return 1 right?
Wiem Zine El Abidine
@wi101
Sep 10 10:14
to explain: A + 0 = A
A * 1 = A
and the neutral element for product type is Unit
and for sum type is Nothing
Menestret Martin
@mmenestret_twitter
Sep 10 10:14
@nsitbon it was just for not colliding with other functions he created earlier which were name from1 and to1
There is no relation with the type of params
Sitbon
@nsitbon
Sep 10 10:15
ok thx
ಠ_ರೃ
@mrt181_twitter
Sep 10 10:16

  sealed trait Being
  case class Roboto(number: Int) extends Being
  case class MeatBag(name: String) extends Being
  type Identifier = Being

like rust-lang i think
Leszek Gruchała
@leszekgruchala
Sep 10 10:18
type Identifier = Being doesn’t have much sense as it’s the same as Being.
With type Identifier = Either[Int, String] John wanted to show another wait of writing that.
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 10:20
How to define a type using case classes????
Jens Hoffmann
@jchoffmann
Sep 10 10:21
just use the case class
comment out the type assignment
ಠ_ರೃ
@mrt181_twitter
Sep 10 10:21
case class A(a: Any)
Jens Hoffmann
@jchoffmann
Sep 10 10:21
the case class is the type
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 10:22
Ok. Sealed trait OR type with Either
Menestret Martin
@mmenestret_twitter
Sep 10 10:22
type A = B
case class B()
Leszek Gruchała
@leszekgruchala
Sep 10 10:24
I’d say

type CreditCard = (String, OffsetDateTime, Int)
case class CreditCard2(number: String, expirationDate: OffsetDateTime, code: Int)

Jens Hoffmann
@jchoffmann
Sep 10 10:24
yep me too, type is redundant otherwise
Jorge
@jaliss
Sep 10 10:24
yeah
you could use just to create the alias but does not add much
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 10:24
Thanks.
ಠ_ರೃ
@mrt181_twitter
Sep 10 10:25
product
type of credit card (visa master) is determined by the number
Menestret Martin
@mmenestret_twitter
Sep 10 10:25
Yeah the alias doesn't add anything, just to make it compile without deleting the line :p
Jorge
@jaliss
Sep 10 10:25
haha
Jens Hoffmann
@jchoffmann
Sep 10 10:26
uh-oh
Jorge
@jaliss
Sep 10 10:29
I guess we need to turn the camera a bit
realfiretiger
@realfiretiger
Sep 10 10:29
we dont see the board
:p
Wiem Zine El Abidine
@wi101
Sep 10 10:30
:D
Jorge
@jaliss
Sep 10 10:30
thanks @jdegoes !
Jens Hoffmann
@jchoffmann
Sep 10 10:33
case class Dungeon() extends GameMap
why not case objects? is it just to have the option to add parameters?
Menestret Martin
@mmenestret_twitter
Sep 10 10:33
Yeah :)
Menestret Martin
@mmenestret_twitter
Sep 10 10:40
So @jdegoes with the way you modeled your Character, then you match on your inner charType ?
And why NonPlayerCharacter isn't a sealed trait which is extented by your Ogre / Troll / Wizard ?
ಠ_ರೃ
@mrt181_twitter
Sep 10 10:43
NonEmptyList?
too wide types?
not specific enough
Leszek Gruchała
@leszekgruchala
Sep 10 10:46
if NonPlayerCharacter would be a sealed trait, then it would also have to extend CharType which would be problematic overall.
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 10:47
Video has vanished.
Sitbon
@nsitbon
Sep 10 10:47
same for me
Jorge
@jaliss
Sep 10 10:47
Video/audio is choppy
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 10:47
Reapeared.
Jens Hoffmann
@jchoffmann
Sep 10 10:47
video gone
Jorge
@jaliss
Sep 10 10:47
:(
Alexander Babin
@mudriyjo
Sep 10 10:47
(
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 10:47
Yes, gone.
Leszek Gruchała
@leszekgruchala
Sep 10 10:47
eh
Jorge
@jaliss
Sep 10 10:48
gone
Alex Henning Johannessen
@ahjohannessen
Sep 10 10:48
gone
Wiem Zine El Abidine
@wi101
Sep 10 10:48
gone
realfiretiger
@realfiretiger
Sep 10 10:48
gone
Bertjan Broeksema
@bbroeksema
Sep 10 10:48
audio as well now
Alexander Babin
@mudriyjo
Sep 10 10:48
freeze =(
Jens Hoffmann
@jchoffmann
Sep 10 10:48
it's all gone
marianobringas
@marianobringas
Sep 10 10:48
yeap
ಠ_ರೃ
@mrt181_twitter
Sep 10 10:48
screen share is frozen
Jorge
@jaliss
Sep 10 10:48
I knew I should have flown there ;-)
ha
Eric Nelson
@enelson
Sep 10 10:48
back?
Jens Hoffmann
@jchoffmann
Sep 10 10:48
same here. location looks awesome, too :)
Jorge
@jaliss
Sep 10 10:48
It looks like the zoom session got disconnected
Jules Ivanic
@guizmaii
Sep 10 10:49
is it reconnected ?
Jens Hoffmann
@jchoffmann
Sep 10 10:49
audio back
kenBayama
@kenBayama
Sep 10 10:49
not the video
marianobringas
@marianobringas
Sep 10 10:49
Audio, not screenshare
Jorge
@jaliss
Sep 10 10:49
yeah, just audio
it's back, thx!
Jules Ivanic
@guizmaii
Sep 10 10:50
good ?
ಠ_ರೃ
@mrt181_twitter
Sep 10 10:50

sealed trait Screen
case object On extends Screen
case object Off extends Screen

Menestret Martin
@mmenestret_twitter
Sep 10 10:50
yep
Leszek Gruchała
@leszekgruchala
Sep 10 10:50
good
Jules Ivanic
@guizmaii
Sep 10 10:50
:smile:
Jorge
@jaliss
Sep 10 10:50
:-D
ಠ_ರೃ
@mrt181_twitter
Sep 10 10:52
how can an NPC be in the Highlands and Indoors?
Jorge
@jaliss
Sep 10 10:53
cool. I need coffee
:)
Menestret Martin
@mmenestret_twitter
Sep 10 10:53
If anyone has the whole ADT, can he/she copy paste it ?
Jens Hoffmann
@jchoffmann
Sep 10 10:54
i have this:

  case class GameMap(realms: List[Realm], paths: List[(RealmId, RealmId)])

  class RealmId private (value: Int)
  object RealmId {
    def apply(id: Int): Option[RealmId] = ???
  }

  case class Realm(id: RealmId, realmType: RealmType, description: String, inv: List[Item], chars: List[Character])

  sealed trait RealmType
  case object Plains extends RealmType
  case object Highlands extends RealmType
  case object Caves extends RealmType
  case object Indoors extends RealmType
  case object Underwater extends RealmType

  sealed trait Item

  case class Character(inv: List[Item], charType: CharType)

  sealed trait CharType
  case class Player(inv: List[Item]) extends CharType
  case class NonPlayerCharacter(npcType: NPCType, inv: List[Item]) extends CharType

  sealed trait NPCType
  case object Ogre extends NPCType
  case object Troll extends NPCType
  case object Wizard extends NPCType

Menestret Martin
@mmenestret_twitter
Sep 10 10:56
thx
Jens Hoffmann
@jchoffmann
Sep 10 10:56
Why can't I write paths: List[RealmId -> RealmId]?
Menestret Martin
@mmenestret_twitter
Sep 10 10:58
Not sure you can
since -> is a function
but the real type is (, )
(A, B)
Jens Hoffmann
@jchoffmann
Sep 10 10:58
though john had it in his code
Menestret Martin
@mmenestret_twitter
Sep 10 10:58
Yep, wonder if it compiles :p
Jens Hoffmann
@jchoffmann
Sep 10 10:58
:D
Menestret Martin
@mmenestret_twitter
Sep 10 10:59
But maybe, because it's John, it wil
will*
Jens Hoffmann
@jchoffmann
Sep 10 10:59
was thinking the same. he is like chuck norris
sbt will compile his uncompileable code
kenBayama
@kenBayama
Sep 10 10:59
i saw that too
Menestret Martin
@mmenestret_twitter
Sep 10 10:59
Ahah that should give birth to a Meme
kenBayama
@kenBayama
Sep 10 11:00
definitely
but i didn't see the full line for the case class GameMap
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:00

  sealed trait NPCType
  case object Ogre extends NPCType
  case object Troll extends NPCType
  case object Wizard extends NPCType
  case object John extends NPCType

Jens Hoffmann
@jchoffmann
Sep 10 11:00
yeah. maybe there was something like this missing:
Bertjan Broeksema
@bbroeksema
Sep 10 11:01
John doesn't need a compiler, his code comes out his fingers in compiled form right away :joy:
Jens Hoffmann
@jchoffmann
Sep 10 11:01
List[RealmId -> RealmId] @YouWillCompileThis
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:01
@YouShallPass
Jens Hoffmann
@jchoffmann
Sep 10 11:01
hehe
first coffee break for john and already a meme is born. not a bad start to this course i'd say
Bertjan Broeksema
@bbroeksema
Sep 10 11:02
But first he needs to reboot the internet
Leszek Gruchała
@leszekgruchala
Sep 10 11:03
paths: List[RealmId => RealmId]
-> allows to construct tuples, it was a typo
Bertjan Broeksema
@bbroeksema
Sep 10 11:04
I suppose we're continuing but no sound nor video yet.
Salla
@sallareznov
Sep 10 11:04
JohnDeComes and JohnDeGoes
Bertjan Broeksema
@bbroeksema
Sep 10 11:04
:joy:
Jens Hoffmann
@jchoffmann
Sep 10 11:04
wow, nice one
Leszek Gruchała
@leszekgruchala
Sep 10 11:05
@guizmaii have we started already?
Jorge
@jaliss
Sep 10 11:06
it looks like we have not
having fun so far, but this is too early for me :)
hopefully I'll survive the whole week
Bertjan Broeksema
@bbroeksema
Sep 10 11:07
local time?
Jorge
@jaliss
Sep 10 11:07
7am right now
it starts at 5am for mw
Bertjan Broeksema
@bbroeksema
Sep 10 11:07
oh crap :)
Jorge
@jaliss
Sep 10 11:07
for me :)
Leszek Gruchała
@leszekgruchala
Sep 10 11:07
I was affraid about the internet connection there…. And it is problematic.
Jorge
@jaliss
Sep 10 11:07
yeah
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:07
5am
wow
Bertjan Broeksema
@bbroeksema
Sep 10 11:07
for me starts at 10:00 AM
kenBayama
@kenBayama
Sep 10 11:07
thanks
Leszek Gruchała
@leszekgruchala
Sep 10 11:07
hopefully they will fix the internet…
For me starts at 10 am too
Maciej Kowalski
@fkowal
Sep 10 11:08
we’re just chating, brb
Bertjan Broeksema
@bbroeksema
Sep 10 11:08
Can sleep in, bring kids to school do coffee with my wife... don't want to make you guys jaleous or anything :P
marianobringas
@marianobringas
Sep 10 11:08
I’m Central time, it starts at 3am for me :)
Jorge
@jaliss
Sep 10 11:08
haha
Jens Hoffmann
@jchoffmann
Sep 10 11:08
3am lol
Jorge
@jaliss
Sep 10 11:08
@bbroeksema I'll be taking a nap after this
3am?!
realfiretiger
@realfiretiger
Sep 10 11:08
11 AM for me
Jens Hoffmann
@jchoffmann
Sep 10 11:08
mariano
Leszek Gruchała
@leszekgruchala
Sep 10 11:08
lol, but you know where will be courses in other parts of the world too?
marianobringas
@marianobringas
Sep 10 11:09
I heard that a bit late in the game
realfiretiger
@realfiretiger
Sep 10 11:09
who can be that patient :D
Jorge
@jaliss
Sep 10 11:09
yeah
Leszek Gruchała
@leszekgruchala
Sep 10 11:09
ah
Jorge
@jaliss
Sep 10 11:09
but they will be in PST time
marianobringas
@marianobringas
Sep 10 11:09
Yes, from SF I believe
Jorge
@jaliss
Sep 10 11:09
so either wake up early or end the course at 10pm
Menestret Martin
@mmenestret_twitter
Sep 10 11:09
Chuck De Goes
Jorge
@jaliss
Sep 10 11:10
haha
realfiretiger
@realfiretiger
Sep 10 11:10
ha
Jens Hoffmann
@jchoffmann
Sep 10 11:10
:thumbsup:
marianobringas
@marianobringas
Sep 10 11:11
John should be back by now, right?
Jorge
@jaliss
Sep 10 11:11
john.comeBack()
Menestret Martin
@mmenestret_twitter
Sep 10 11:11
Omfg, methods ? You are gonna get kicked out
Edit your message asap
realfiretiger
@realfiretiger
Sep 10 11:11
that looks like mutation to me o.O
Jorge
@jaliss
Sep 10 11:11
hahah
Menestret Martin
@mmenestret_twitter
Sep 10 11:12
You better create a CanComeBack type class
:D
Jorge
@jaliss
Sep 10 11:12
last day will post a FP version so I can show I learned things during the week
;-)
Bertjan Broeksema
@bbroeksema
Sep 10 11:12
comeBack(john)
realfiretiger
@realfiretiger
Sep 10 11:12
:D
Jorge
@jaliss
Sep 10 11:12
yeah!
Jens Hoffmann
@jchoffmann
Sep 10 11:12
yes
realfiretiger
@realfiretiger
Sep 10 11:12
yes
Jorge
@jaliss
Sep 10 11:12
no video yet
Simon Mittermueller
@simonmit
Sep 10 11:12
yes
kenBayama
@kenBayama
Sep 10 11:13
no video
Sitbon
@nsitbon
Sep 10 11:13
yes audio only
Salla
@sallareznov
Sep 10 11:13
JohnDeComes, yeah!
Jens Hoffmann
@jchoffmann
Sep 10 11:13
audio patchy
Leszek Gruchała
@leszekgruchala
Sep 10 11:16
do you see anything actually?
realfiretiger
@realfiretiger
Sep 10 11:16
i see
Jens Hoffmann
@jchoffmann
Sep 10 11:16
yea, bit blurry but there is video
Alexander Babin
@mudriyjo
Sep 10 11:16
video picture is bad
Leszek Gruchała
@leszekgruchala
Sep 10 11:16
yeah, the point it is very blurry
Menestret Martin
@mmenestret_twitter
Sep 10 11:16
And a bit laggy
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:17
can someone take a picture onces the slide is full
Jules Ivanic
@guizmaii
Sep 10 11:18
I will
Leszek Gruchała
@leszekgruchala
Sep 10 11:18
Screen Shot 2018-09-10 at 12.17.35.png
This is a bit ridiculous
the quality of video I mean
balanka
@balanka
Sep 10 11:19
has the course started again?
Jules Ivanic
@guizmaii
Sep 10 11:19
yes
Eric Nelson
@enelson
Sep 10 11:19
@balanka Yes
kenBayama
@kenBayama
Sep 10 11:19
yes
balanka
@balanka
Sep 10 11:19
i dont hear or see any thing
Leszek Gruchała
@leszekgruchala
Sep 10 11:19
I do
realfiretiger
@realfiretiger
Sep 10 11:20
i see and hear
video kinda bad though
Jules Ivanic
@guizmaii
Sep 10 11:20
he is trying to improve video quality
is it better ?
realfiretiger
@realfiretiger
Sep 10 11:20
better
Leszek Gruchała
@leszekgruchala
Sep 10 11:20
light way bettetr
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:20
a little beeter
kenBayama
@kenBayama
Sep 10 11:20
better
Leszek Gruchała
@leszekgruchala
Sep 10 11:20
but still poor quality
Jules Ivanic
@guizmaii
Sep 10 11:20
poor internet quality maybe
Sitbon
@nsitbon
Sep 10 11:20
bandwidth issue
Menestret Martin
@mmenestret_twitter
Sep 10 11:21
yes :/
Leszek Gruchała
@leszekgruchala
Sep 10 11:21
Screen Shot 2018-09-10 at 12.21.12.png
Jorge
@jaliss
Sep 10 11:21
it's a bandwidth problem. it's much clearer right now.
balanka
@balanka
Sep 10 11:22
i just receive the MESSAGE please wait the post will let you in soon
Wiem Zine El Abidine
@wi101
Sep 10 11:22
at least if we listen we can understand
Jorge
@jaliss
Sep 10 11:22
seeing the what he draws helps
Leszek Gruchała
@leszekgruchala
Sep 10 11:22
@balanka are you sure you connect to the right meeting id?
works for all of us
balanka
@balanka
Sep 10 11:22
let me check
https://zoom.us/j/495243332?pwd=&status=success
is what i am using
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:25
i am using the zoom client app
Leszek Gruchała
@leszekgruchala
Sep 10 11:25
seems right
Wiem Zine El Abidine
@wi101
Sep 10 11:25
use the id at the link
Jorge
@jaliss
Sep 10 11:26
@balanka where you in the first part the the training or connected just now?
balanka
@balanka
Sep 10 11:27
now i am in
thanks
Jorge
@jaliss
Sep 10 11:27
cool
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:27
return Unit
Jules Ivanic
@guizmaii
Sep 10 11:28
I have photos but my internet is bad too :/
Wiem Zine El Abidine
@wi101
Sep 10 11:29
Props of Functions:

    Total
    Deterministic
    No side effect

Jorge
@jaliss
Sep 10 11:29
oh thx ... was having a hard time reading that.
Wiem Zine El Abidine
@wi101
Sep 10 11:30

    not total: throw an exception or return null
    non deterministic: random, readline

with pleasure
Menestret Martin
@mmenestret_twitter
Sep 10 11:31

    and looping for ever

Jens Hoffmann
@jchoffmann
Sep 10 11:31
read line is rather an example of side effects (3)
Wiem Zine El Abidine
@wi101
Sep 10 11:31
yes
Jens Hoffmann
@jchoffmann
Sep 10 11:31
second was random, clock
Menestret Martin
@mmenestret_twitter
Sep 10 11:32
well it works for 2 as well :p
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:32
yes
Jens Hoffmann
@jchoffmann
Sep 10 11:32
true :)
Menestret Martin
@mmenestret_twitter
Sep 10 11:32
it's 3 and 2
Wiem Zine El Abidine
@wi101
Sep 10 11:32
and for non deterministic too (if we have def addOne: Int = readLine.toInt + 1) we will not have the same result every call
Jens Hoffmann
@jchoffmann
Sep 10 11:32
yeah
Jorge
@jaliss
Sep 10 11:33
deterministic = for a given input we always get the same output right?
Wiem Zine El Abidine
@wi101
Sep 10 11:33
addOne is not total and non deterministic
yes
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:34
it kills a kitten
Jorge
@jaliss
Sep 10 11:34
LOL
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 11:34
Screen off
Leszek Gruchała
@leszekgruchala
Sep 10 11:34
works for me
Jorge
@jaliss
Sep 10 11:34
works for me
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 11:34
just audio
Wiem Zine El Abidine
@wi101
Sep 10 11:34
works for me
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:34
you see the editor view?
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 11:35
No.
Leszek Gruchała
@leszekgruchala
Sep 10 11:35
yes, you have to switch back to it, from the camera screen
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:36
no edits yet anyway
mutation
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 11:38
Worked out. Thanks.
realfiretiger
@realfiretiger
Sep 10 11:39
use map
on arr
nvm
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:40
no, you want to map at the index
precursor to State
Jorge
@jaliss
Sep 10 11:43
yeah
Jens Hoffmann
@jchoffmann
Sep 10 11:44
why += 1?
why not def freshId2(oldId: Int): (Int, Int) = (oldId + 1, oldId)
Jorge
@jaliss
Sep 10 11:44
I think he just copy pasted
Jules Ivanic
@guizmaii
Sep 10 11:44
it’s an error
I asked your question :)
Menestret Martin
@mmenestret_twitter
Sep 10 11:45
We heard you thanks :D
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:45
sepcifiy our clock
Alexander Babin
@mudriyjo
Sep 10 11:46
if we pass max int it's overflow. this fn will be totally?
Bertjan Broeksema
@bbroeksema
Sep 10 11:47
def head2[A](as: List[A]): Either[String, A] = { if (as.length == 0) Left("Oh no, it's impossible!!!") else Right(as.head) }
Jorge
@jaliss
Sep 10 11:50
def head2[A](as: List[A]): Either[String, A] = { as.headOption.map(Right(_)).getOrElse(Left("Oh no, it's impossible")) }
Jens Hoffmann
@jchoffmann
Sep 10 11:50
i find the match more readable than chaining
but that's ultimately down to personal pref
Jorge
@jaliss
Sep 10 11:50
true
Menestret Martin
@mmenestret_twitter
Sep 10 11:50
:+1:
Jens Hoffmann
@jchoffmann
Sep 10 11:50
... or of the people doing code review :)
Bertjan Broeksema
@bbroeksema
Sep 10 11:50
No, no, @jchoffmann let'st start a flamewar on that! :P
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:51
couldnt fold be used here
Menestret Martin
@mmenestret_twitter
Sep 10 11:51
yes
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:51
i won
Kurt Logan
@kurtlogan
Sep 10 11:53

final case class Charge(account: Account, amount: Double)
  def buyCoffee2(account: Account): (Coffee, Charge) = {
    val coffee = Coffee()
    (coffee, Charge(account, coffee.price))
  }

Bertjan Broeksema
@bbroeksema
Sep 10 11:55
@kurtlogan that's mixing coffee and charge unnecesserily
Jens Hoffmann
@jchoffmann
Sep 10 11:56
video?
Jorge
@jaliss
Sep 10 11:56
no video
marianobringas
@marianobringas
Sep 10 11:56
no video
realfiretiger
@realfiretiger
Sep 10 11:56
no video
Wiem Zine El Abidine
@wi101
Sep 10 11:56
no video
ಠ_ರೃ
@mrt181_twitter
Sep 10 11:56
johns voice is gone
its bacl
Wiem Zine El Abidine
@wi101
Sep 10 11:57
:D
Leszek Gruchała
@leszekgruchala
Sep 10 11:57
damn, can’t read anything :/
Jorge
@jaliss
Sep 10 11:57
:(
Kurt Logan
@kurtlogan
Sep 10 11:57
@bbroeksema it's pushing the decision on how to handle the charge higher
Leszek Gruchała
@leszekgruchala
Sep 10 11:57
It can’t be like that
Maciej Kowalski
@fkowal
Sep 10 11:57

    Functions
    No poly methods
    No null
    No RTTI

Wiem Zine El Abidine
@wi101
Sep 10 11:57
thanks!
Leszek Gruchała
@leszekgruchala
Sep 10 11:57
thank you
kenBayama
@kenBayama
Sep 10 11:57
thanks
Jens Hoffmann
@jchoffmann
Sep 10 11:58
cheers
Jorge
@jaliss
Sep 10 11:58
RTTI?
Merunas
@meras
Sep 10 11:58
he'll get to it in a second
Leszek Gruchała
@leszekgruchala
Sep 10 11:58
Wait :)
Jorge
@jaliss
Sep 10 11:58
:)
Wiem Zine El Abidine
@wi101
Sep 10 11:58
:)
realfiretiger
@realfiretiger
Sep 10 11:58
what was 2?
Jorge
@jaliss
Sep 10 11:59
no polimorphic methods
Kurt Logan
@kurtlogan
Sep 10 11:59
No poly methods
realfiretiger
@realfiretiger
Sep 10 11:59
thx
Jorge
@jaliss
Sep 10 12:00
is it "scalazzi"?
Maciej Kowalski
@fkowal
Sep 10 12:00
RTTI = runtime type information
Wiem Zine El Abidine
@wi101
Sep 10 12:00
yes
Merunas
@meras
Sep 10 12:00
yes, scalazzi: https://github.com/scalaz/scalazzi
Jorge
@jaliss
Sep 10 12:00
thx
Wiem Zine El Abidine
@wi101
Sep 10 12:00
@fkowal thanks
Menestret Martin
@mmenestret_twitter
Sep 10 12:01
Can someone explain the "No poly methods" parts ?
Oh ok
got it
Jorge
@jaliss
Sep 10 12:01
lost audio for a bit ... not sure what he meant by it
Menestret Martin
@mmenestret_twitter
Sep 10 12:01
Couldn't it be extended to "don't use any method" ?
Leszek Gruchała
@leszekgruchala
Sep 10 12:02
e.g. do not use methods available on AnyRef
Jorge
@jaliss
Sep 10 12:02
oh I see. thx
cverdier
@cverdier
Sep 10 12:02

### Scalazzi
1. Functions        (only use functions, if it's not a function, don't use it)
2. No poly methods  (don't use methods from AnyRef / Java "Object" etc, don't use methods on polymorphic objects)
3. No null          (never use null)
4. No RTTI          (no Runtime Type information/identification, TypeTags etc...)

Leszek Gruchała
@leszekgruchala
Sep 10 12:02
or any polimorhic type
Jorge
@jaliss
Sep 10 12:02
thx
Menestret Martin
@mmenestret_twitter
Sep 10 12:02
Ok so my point was covered by point 1.
So I don't get 2. if you follow 1. :p
Jorge
@jaliss
Sep 10 12:03
no screen/video?
Menestret Martin
@mmenestret_twitter
Sep 10 12:03
I think video got shut off
Screen is still on
Jens Hoffmann
@jchoffmann
Sep 10 12:03
he went back from video to screen
Jorge
@jaliss
Sep 10 12:04
oh thx
zoom UI is a bit confusing
ಠ_ರೃ
@mrt181_twitter
Sep 10 12:05
more effective
Jens Hoffmann
@jchoffmann
Sep 10 12:05
also benefits of pure functions => immutability => concurrency
no state
Merunas
@meras
Sep 10 12:07
http://www.lihaoyi.com/post/StrategicScalaStylePracticalTypeSafety.html#scalazzi-scala
Jens Hoffmann
@jchoffmann
Sep 10 12:07
https://www.lihaoyi.com/
Menestret Martin
@mmenestret_twitter
Sep 10 12:07
it is shared
realfiretiger
@realfiretiger
Sep 10 12:07
i see the creen
it is shared
Jules Ivanic
@guizmaii
Sep 10 12:08
:+1: @cverdier
Jens Hoffmann
@jchoffmann
Sep 10 12:09
what was that last question? scalazzi warn you of that?
Leszek Gruchała
@leszekgruchala
Sep 10 12:12

def printer2[A](println: String => A, combine: (A, A) => A): A = {
    List("Welcome to the help page!",
    "To list commands, type `commands`.",
    "For help on a command, type `help <command>`",
    "To exit the help page, type `exit`.").map(println).reduce(combine)
  }

Jens Hoffmann
@jchoffmann
Sep 10 12:12
yeah map reduce :)
marianobringas
@marianobringas
Sep 10 12:12
combine(combine(println("Welcome to the help page!"), println("To list commands, type comands.")), combine(println("For help on a command, type help <command>"), println("To exit the help page, type exit.")))
ಠ_ರೃ
@mrt181_twitter
Sep 10 12:13

  def printer2[A](println: String => A, combine: (A, A) => A): A = {
   combine(combine(combine(println("Welcome to the help page!"), 
    println("To list commands, type `commands`.")),
    println("For help on a command, type `help <command>`")),
    println("To exit the help page, type `exit`."))
  }

Leszek Gruchała
@leszekgruchala
Sep 10 12:13
combine(combine(combine :)
ಠ_ರೃ
@mrt181_twitter
Sep 10 12:13
hello mr freeman
Jens Hoffmann
@jchoffmann
Sep 10 12:14
wake up...and smell the ashes
Jorge
@jaliss
Sep 10 12:24
that looks cool
Alexander Babin
@mudriyjo
Sep 10 12:32
if we use case object all implementation of GoLeft or GoRight will be in draw method (by match)?
ಠ_ರೃ
@mrt181_twitter
Sep 10 12:33
i think you need to pattern match on Operation and apply the operation on a match
Alexander Babin
@mudriyjo
Sep 10 12:34
thx
Bertjan Broeksema
@bbroeksema
Sep 10 12:39
Lunchbreak is over in ~45 minutes from now?
Leszek Gruchała
@leszekgruchala
Sep 10 12:39
yes
marianobringas
@marianobringas
Sep 10 13:36
anyone back?
Alexander Babin
@mudriyjo
Sep 10 13:36
yep
Leszek Gruchała
@leszekgruchala
Sep 10 13:36
ah, didn’t notice zoom got killed
or not
marianobringas
@marianobringas
Sep 10 13:37
Yeah, so far, no audio nor video
Leszek Gruchała
@leszekgruchala
Sep 10 13:37
and they just started :)
Alexander Babin
@mudriyjo
Sep 10 13:37
lesson start
marianobringas
@marianobringas
Sep 10 13:37
awesome
thx
Sitbon
@nsitbon
Sep 10 13:41
yes
yes
Leszek Gruchała
@leszekgruchala
Sep 10 13:54
losing audio very often
Jorge
@jaliss
Sep 10 13:54
same here ....
Bertjan Broeksema
@bbroeksema
Sep 10 13:54
yep, audio is flaky
Oleksandra Holubitska
@Vilkina
Sep 10 13:55
Parser(input => Right((input, a)))
Menestret Martin
@mmenestret_twitter
Sep 10 13:57
Yep... bandwidth is really bad :(
realfiretiger
@realfiretiger
Sep 10 13:57
yeah, many gaps
Oleksandra Holubitska
@Vilkina
Sep 10 13:58
cases and matchex
matches*
Leszek Gruchała
@leszekgruchala
Sep 10 13:58
@guizmaii @jdegoes you need to figure out some different internet connection, it was bad from the morning but after the break it is so worse we hear half of the presentation
Eric Nelson
@enelson
Sep 10 13:58
We're just bleeping out all the cursing from John ;)
ಠ_ರೃ
@mrt181_twitter
Sep 10 14:00
fail
realfiretiger
@realfiretiger
Sep 10 14:00
worse than before
Menestret Martin
@mmenestret_twitter
Sep 10 14:00
Really hard to follow
Jens Hoffmann
@jchoffmann
Sep 10 14:00
both video and audio patchy
Jorge
@jaliss
Sep 10 14:00
yeah, unfortunately this things can happen .... let's do our best to follow up .... hopefully they'll figure it out for tomorrow.
Leszek Gruchała
@leszekgruchala
Sep 10 14:02
not if you paid for the workshop and you barly can follow, I am very happy about the remote option but the host must be sure it is possible.
Jorge
@jaliss
Sep 10 14:03
I understand. I paid for it as well.
Leszek Gruchała
@leszekgruchala
Sep 10 14:05
thanks
Jorge
@jaliss
Sep 10 14:05
audio seems better right now
Jens Hoffmann
@jchoffmann
Sep 10 14:05
it has been better the last 2 minutes
realfiretiger
@realfiretiger
Sep 10 14:05
y
Jorge
@jaliss
Sep 10 14:05
yeah
Leszek Gruchała
@leszekgruchala
Sep 10 14:05
indeed
Jules Ivanic
@guizmaii
Sep 10 14:05
he’s going back to its phone connection
it should be better for you guys
Jorge
@jaliss
Sep 10 14:06
@jdegoes I think you don't need to change the connection right now.
yeah
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 14:06
yes.
Alexander Babin
@mudriyjo
Sep 10 14:06
yep
Jens Hoffmann
@jchoffmann
Sep 10 14:18
coudl somebody copy/paste who has it working?
marianobringas
@marianobringas
Sep 10 14:18
def altE1, E2, A, B:
Parser[E2, Either[A, B]] = Parser(input => l.run(input) match {
case Left(_) => r.run(input) match {
case Left(e2) => Left(e2)
case Right((s,b)) => Right((s, Right(b)))
}
case Right((s, a)) => Right((s, Left(a)))
})
Jens Hoffmann
@jchoffmann
Sep 10 14:18
cheers
marianobringas
@marianobringas
Sep 10 14:18
np
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 14:19
Thanks!
marianobringas
@marianobringas
Sep 10 14:20
def joinA, B, C: A => (B, C) = (a: A) => (f(a), g(a))
ಠ_ರೃ
@mrt181_twitter
Sep 10 14:20
a => (f(a), g(a))
Jorge
@jaliss
Sep 10 14:21
video seems frozen
Bertjan Broeksema
@bbroeksema
Sep 10 14:21
John is typing faster than the internet :)
realfiretiger
@realfiretiger
Sep 10 14:21
froxen
frozen*
works now
Jens Hoffmann
@jchoffmann
Sep 10 14:21
video freezes and then catches up really fast
realfiretiger
@realfiretiger
Sep 10 14:21
yeah
marianobringas
@marianobringas
Sep 10 14:22
def parallelA, B, C, D: (A, C) => (B, D) = (a: A, c: C) => (f(a), g(c))
Leszek Gruchała
@leszekgruchala
Sep 10 14:23
actually, the compilable alt was in form of

def alt[E1, E2, A, B](l: Parser[E1, A], r: Parser[E2, B]):
    Parser[E2, Either[A, B]] = {
    Parser { input =>
      l.run(input) match {
        case Left(e) => r.run(input) match {
          case Left(e2) => Left(e2)
          case Right(result) => Right((result._1, Right(result._2)))
        }
        case Right(result) => Right((result._1, Left(result._2)))
      }
    }
  }

Merunas
@meras
Sep 10 14:23
thanks

  def cross[A, B, C, D](f: A => B, g: C => D): (A, C) => (B, D) =
    (a: A, c: C) => (f(a), g(c))

Jules Ivanic
@guizmaii
Sep 10 14:24
with tuples deconstruction, alt could be prettier
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 14:24
Where is this??
Jules Ivanic
@guizmaii
Sep 10 14:24

  def alt[E1, E2, A, B](l: Parser[E1, A], r: Parser[E2, B]): Parser[E2, Either[A, B]] =
    Parser(
      input =>
        l.run(input) match {
          case Right((string, a)) => Right(string -> Left(a))
          case Left(_) =>
            r.run(input) match {
              case Left(e2)           => Left(e2)
              case Right((string, b)) => Right(string -> Right(b))
            }
        }
    )

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 14:25
not in exercises.scala 01-essentials
Leszek Gruchała
@leszekgruchala
Sep 10 14:25
indeed
Merunas
@meras
Sep 10 14:25
that was exercise 1 wasn't it
Leszek Gruchała
@leszekgruchala
Sep 10 14:25
@Eduardo-M-Cavalcanti it’s that file, John has sometimes different funtion name
ಠ_ರೃ
@mrt181_twitter
Sep 10 14:26
goog
Menestret Martin
@mmenestret_twitter
Sep 10 14:26
better
Jorge
@jaliss
Sep 10 14:26
cool
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 14:27
found it.
operaotr malfunction :)
Menestret Martin
@mmenestret_twitter
Sep 10 14:31
Am I the only one with a ~10 seconds lag on the screen sharing ?
Jorge
@jaliss
Sep 10 14:32
same here ...
Leszek Gruchała
@leszekgruchala
Sep 10 14:32
me too
Alexander Babin
@mudriyjo
Sep 10 14:32
too
Menestret Martin
@mmenestret_twitter
Sep 10 14:32
:smirk: :gun:
Leszek Gruchała
@leszekgruchala
Sep 10 14:32
maybe we should stop saying it’s better with connection, because right after that it’s getting worse ;]
Jorge
@jaliss
Sep 10 14:32
lol
true
Menestret Martin
@mmenestret_twitter
Sep 10 14:32
Yeah, connection gets confident then and makes no effort
Jens Hoffmann
@jchoffmann
Sep 10 14:35
@guizmaii @jdegoes could you try to restart video at some convenient point? it's lagging quite behind
Menestret Martin
@mmenestret_twitter
Sep 10 14:35
Can someone ask John to restart its screen sharing ?
Jorge
@jaliss
Sep 10 14:35
I don't think that will help .... the connection is causing the problem.
but yeah, I can't follow lost context.
Eric Nelson
@enelson
Sep 10 14:42

object snd2 {
    def apply[A, B](a: A, b: B): B = b
  }

Bertjan Broeksema
@bbroeksema
Sep 10 14:44
Video completly frozen now :/
Jorge
@jaliss
Sep 10 14:44
re-sharing did not help
yeah
Sitbon
@nsitbon
Sep 10 14:44
same for me
it's really hard to follow
balanka
@balanka
Sep 10 14:45
my sceen seems frozen
realfiretiger
@realfiretiger
Sep 10 14:45
i think the hotel network is the better of the existing options
Jorge
@jaliss
Sep 10 14:45
we're supposed to have a break in 15 minutes ... maybe we should do it sooner and try to troubleshoot these issues.
Jens Hoffmann
@jchoffmann
Sep 10 14:45
there is a cursor visible everything now and then - maybe not sharing the right thing?
Alex Henning Johannessen
@ahjohannessen
Sep 10 14:45
Yes, this is frusterating :/
Simon Mittermueller
@simonmit
Sep 10 14:45
Hotel Wifi was better
Jorge
@jaliss
Sep 10 14:46
+1 to hotel wifi
realfiretiger
@realfiretiger
Sep 10 14:46
+1
Simon Mittermueller
@simonmit
Sep 10 14:48
Its better now with hotel wifi
ಠ_ರೃ
@mrt181_twitter
Sep 10 14:49

  object repeat {
    def apply[A](times: Int)(start: A)(f: A => A): A = {
      @tailrec
      def loop(current: A, step: Int): A = {
        if (step == 0) current else {
          val next = f(current)
          loop(next, step - 1)
        }
      }
      loop(start, times)
    }
  }

Alexander Babin
@mudriyjo
Sep 10 14:49
object repeat { def apply[A](num: Int)(x: A, f: A => A): A = (0 to num).foldLeft(x)((acc, _) => f(acc)) }
Leszek Gruchała
@leszekgruchala
Sep 10 14:53
nice
Merunas
@meras
Sep 10 14:54
indeed
Jorge
@jaliss
Sep 10 15:03
it seems better john
Simon Mittermueller
@simonmit
Sep 10 15:03
better than mobile
Leszek Gruchała
@leszekgruchala
Sep 10 15:04

def groupBy1(
    l: List[String],
    by: String => String)(
      reducer: (String, List[String]) => String):
      Map[String, String] = {
    l.map { str =>
      val b = by(str)
      b -> reducer(b, l)
    }.toMap
  }

compiles so I think it’s fine ;)
Jules Ivanic
@guizmaii
Sep 10 15:04

def groupBy1(l: List[String], by: String => String)(reducer: (String, List[String]) => String): Map[String, String] =
    l.groupBy(by).map { case (date, events) => date -> reducer(date, events) }

Don’t throw rocks :smile:
cverdier
@cverdier
Sep 10 15:04

def groupBy1(
    l: List[String],
    by: String => String)(
      reducer: (String, List[String]) => String):
      Map[String, String] = {

    l.groupBy(by).foldLeft(Map[String, String]()){
      case (summary, (date, events)) => summary.updated(date, reducer(date, events))
    }
  }

ah much better @guizmaii

    <

Alex Henning Johannessen
@ahjohannessen
Sep 10 15:12

  object groupBy2 {
    def apply[A, B, C](l: List[A], by: A => B)
                      (reducer: (B, List[A]) => C): Map[B, C] = {
      l.groupBy(by).map(kv ⇒ (kv._1, reducer.tupled(kv)))
    }
  }

Leszek Gruchała
@leszekgruchala
Sep 10 15:12

object groupBy2 {
    def apply[A, B, C](
      l: Iterable[A],
      by: A => B)(
      reducer: (B, Iterable[A]) => C): Map[B, C] = {
      l.groupBy(by).map { case (b, la) => b -> reducer(b, la)}
    }
  }

Jens Hoffmann
@jchoffmann
Sep 10 15:14
@leszekgruchala just copy/paste use your above solution :)
Leszek Gruchała
@leszekgruchala
Sep 10 15:15
yeah, sure :)
Jens Hoffmann
@jchoffmann
Sep 10 15:15
@guizmaii @jdegoes would you mind elaborating on abstracting away List[A] too?
Leszek Gruchała
@leszekgruchala
Sep 10 15:16
you have to ask
Jules Ivanic
@guizmaii
Sep 10 15:16

next challenge:

def apply[F[_]: ???, A, B, C](l: F[A], by: A => B)(reducer: (B, F[A]) => C): F[(B, C)] = ...
;)
homework
Artsiom Miklushou
@mikla
Sep 10 15:17
👍🏽
Alexander Babin
@mudriyjo
Sep 10 15:19
switch on camera
oh, work)
Sitbon
@nsitbon
Sep 10 15:20
can't see board
Leszek Gruchała
@leszekgruchala
Sep 10 15:21
@guizmaii we actually see nothing, it’s so blurry
can you send a picture?
Alexander Babin
@mudriyjo
Sep 10 15:21
+1
ಠ_ರೃ
@mrt181_twitter
Sep 10 15:24
Can I restrict the possible types?
Sitbon
@nsitbon
Sep 10 15:26
sound is horrible
marianobringas
@marianobringas
Sep 10 15:26
started having sound glitches
Leszek Gruchała
@leszekgruchala
Sep 10 15:27
you can restrict types with lower/upper bound I think
ಠ_ರೃ
@mrt181_twitter
Sep 10 15:27
but can you restrict kinds>
?
Leszek Gruchała
@leszekgruchala
Sep 10 15:28
maybe you mean something like def something[A, F[_] : Foldable](f: F[A]) ?
Menestret Martin
@mmenestret_twitter
Sep 10 15:28
It's a "trick" to restrict types
just by having the compiler saying that it doesnt find a "Foldable" for that type F
So it wont compile
Or saying nothing if there is one in your scope
So yeah, you can state it that way I guess, as a way to retrict your possible types
Jens Hoffmann
@jchoffmann
Sep 10 15:30
def foo[A[_]](???)
the kind of A is -> ?
Menestret Martin
@mmenestret_twitter
Sep 10 15:30

    -> *

Jens Hoffmann
@jchoffmann
Sep 10 15:30
OK - and A[_, _] ?
marianobringas
@marianobringas
Sep 10 15:30
(, ) -> *
Jens Hoffmann
@jchoffmann
Sep 10 15:30
is that (star, star) => star?
Menestret Martin
@mmenestret_twitter
Sep 10 15:30
star, star -> star
Jens Hoffmann
@jchoffmann
Sep 10 15:30
ok thanks
Menestret Martin
@mmenestret_twitter
Sep 10 15:30
np
Jules Ivanic
@guizmaii
Sep 10 15:31
I’m sorry everyone. It’s very hard for me to share you my photos
I can’t share via Gitter
from my phone
Leszek Gruchała
@leszekgruchala
Sep 10 15:32
pitty
Jules Ivanic
@guizmaii
Sep 10 15:32
my mails doesn’t leave my phone
I’ll try to share them on the Slack I created
I have to connect my phone to this slack channel
Bertjan Broeksema
@bbroeksema
Sep 10 15:32
Haha, this escalates quickly: in a couple of hours from simple functions to star to star to star to infinity :joy:
cverdier
@cverdier
Sep 10 15:33
https://drive.google.com/file/d/0BwYAisQ_fa_mcHJVT1QwZlRyWGhYeHJaeklQVWdqOG1BR0xn/view?usp=sharing
Sitbon
@nsitbon
Sep 10 15:33
@cverdier thx
Alexander Babin
@mudriyjo
Sep 10 15:37
thx
Jens Hoffmann
@jchoffmann
Sep 10 15:40
thanks @cverdier , very kind (start to star)
Menestret Martin
@mmenestret_twitter
Sep 10 15:43
Thats a joke of a higher kind
Jens Hoffmann
@jchoffmann
Sep 10 15:45
"joke" at most
marianobringas
@marianobringas
Sep 10 15:47
lost sound and video
Menestret Martin
@mmenestret_twitter
Sep 10 15:47
me too
Bertjan Broeksema
@bbroeksema
Sep 10 15:48
+1
Sitbon
@nsitbon
Sep 10 15:50
+1
balanka
@balanka
Sep 10 15:50
i . also
Jules Ivanic
@guizmaii
Sep 10 15:51
Ok I have an agreement with @cverdier. He’s in charge of photos. You’ll have to blame him if you don’t have photos :smile:
marianobringas
@marianobringas
Sep 10 15:51
:)
do you know if John is back?
Jules Ivanic
@guizmaii
Sep 10 15:51
connection is down. he’s trying to get back :/
Leszek Gruchała
@leszekgruchala
Sep 10 15:52
and who to blame for bad internet connection at the hotel? :trollface:
Menestret Martin
@mmenestret_twitter
Sep 10 15:52
He's probably fixing the hotel router
marianobringas
@marianobringas
Sep 10 15:52
gotcha
Menestret Martin
@mmenestret_twitter
Sep 10 15:52
flashing a new firmware
Leszek Gruchała
@leszekgruchala
Sep 10 15:52
or where to sign the petition for the better one
Menestret Martin
@mmenestret_twitter
Sep 10 15:52
(a new firmware he just wrote of course, purely functionaly)
Leszek Gruchała
@leszekgruchala
Sep 10 15:53
haha
ಠ_ರೃ
@mrt181_twitter
Sep 10 15:53
in scala native
Jorge
@jaliss
Sep 10 15:53
Has it resumed?
Menestret Martin
@mmenestret_twitter
Sep 10 15:53
:D
Jorge
@jaliss
Sep 10 15:53
I am waiting on zoom to get access
Eric Nelson
@enelson
Sep 10 15:54
Network connection issues again
Bertjan Broeksema
@bbroeksema
Sep 10 15:54
Clearly having side-effect issues, that network
Jorge
@jaliss
Sep 10 15:54
😞
Bertjan Broeksema
@bbroeksema
Sep 10 15:55
It just had one job, like all pure funtions...
Alexander Babin
@mudriyjo
Sep 10 15:56
this is pure screen share without side effect =)
Jorge
@jaliss
Sep 10 15:56
I am purely out.
Not even sceeen
works now :)
marianobringas
@marianobringas
Sep 10 16:07
trait Answer6[F[], G[[_]]]
Leszek Gruchała
@leszekgruchala
Sep 10 16:07
trait Answer6[A[_], F[_, _]] ?
realfiretiger
@realfiretiger
Sep 10 16:08
trait Answer6[F[], G[H[]]]
Jules Ivanic
@guizmaii
Sep 10 16:08
trait Answer6[F[_], G[_[_]]] ?
Jens Hoffmann
@jchoffmann
Sep 10 16:08
trait Answer6[A[_], B[C[_]]] /*[]*/
oh
Leszek Gruchała
@leszekgruchala
Sep 10 16:09
@guizmaii won :)
realfiretiger
@realfiretiger
Sep 10 16:09
:D
Jens Hoffmann
@jchoffmann
Sep 10 16:10
so using C would work but doesn't make sense
ಠ_ರೃ
@mrt181_twitter
Sep 10 16:11
option
Jules Ivanic
@guizmaii
Sep 10 16:12
:tada:
:smile:
ಠ_ರೃ
@mrt181_twitter
Sep 10 16:15

  val ListSized: Sized[List] = new Sized[List] {
    override def size[A](fa: List[A]): Int = fa.length
  }

  val optionSized: Sized[Option] = new Sized[Option] {
    override def size[A](fa: Option[A]): Int = fa.size
  }

https://github.com/non/kind-projector
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 16:18
This compile: trait * => *[F[_]]
But this does not: type Answer1 = * => *[F[_]]
Whats the catch?
marianobringas
@marianobringas
Sep 10 16:19
you need to parametize Answer1 to use F
Leszek Gruchała
@leszekgruchala
Sep 10 16:20
trait is abstract, you would have to provide type when you want to instantiate the trait too
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 16:20
Thank you.
Jens Hoffmann
@jchoffmann
Sep 10 16:22

  val MapSized1: Sized[Map[String, ?]] = new Sized[Map[String, ?]] {
    def size[A](fa: Map[String, A]): Int = fa.size
  }

Jules Ivanic
@guizmaii
Sep 10 16:22
spoil ! :smile:
Jens Hoffmann
@jchoffmann
Sep 10 16:22
heh
Merunas
@meras
Sep 10 16:23
does MapSized1 compile ?
Leszek Gruchała
@leszekgruchala
Sep 10 16:23
yes
Jules Ivanic
@guizmaii
Sep 10 16:24
if it’s well written, yes :smile:
what error do you have ?
Bertjan Broeksema
@bbroeksema
Sep 10 16:24

def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
    def size[A](fa: Map[K, A]): Int = fa.size
  }

Merunas
@meras
Sep 10 16:24
1: type Λ$ takes type parameters
[error] def sizeA: Int = fa.size
marianobringas
@marianobringas
Sep 10 16:24
def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
override def sizeA: Int = fa.size
}
Jens Hoffmann
@jchoffmann
Sep 10 16:24

  def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
    def size[A](fa: Map[K, A]): Int = fa.size
  }

Jules Ivanic
@guizmaii
Sep 10 16:24
can you show us your code plz @meras ?
Merunas
@meras
Sep 10 16:25

  val MapSized1: Sized[Map[String, ?]] = new Sized[Map[String, ?]] {
    def size[A](fa: Map[String, ?]): Int = fa.size
  }

marianobringas
@marianobringas
Sep 10 16:25
you need to replace the ? in the implementation of size
Jorge
@jaliss
Sep 10 16:25
you need to replace ? with an A there @meras
marianobringas
@marianobringas
Sep 10 16:25
put an A instead
Merunas
@meras
Sep 10 16:26
oh ...
thanks!
marianobringas
@marianobringas
Sep 10 16:29
def Tuple3Sized[A, B]: Sized[(A, B, ?)] = new Sized[(A, B, ?)] {
override def sizeC): Int = 3
}
Alexander Babin
@mudriyjo
Sep 10 16:30
def Tuple3Sized[B, C]: Sized[(?, B, C)] = new Sized[(?, B, C)] { def size[A](fa: (A, B, C)): Int = 3 }
ಠ_ರೃ
@mrt181_twitter
Sep 10 16:31
3
Jens Hoffmann
@jchoffmann
Sep 10 16:32
shame
Leszek Gruchała
@leszekgruchala
Sep 10 16:32
:scream:
ಠ_ರೃ
@mrt181_twitter
Sep 10 16:33
He knows nothing
Jens Hoffmann
@jchoffmann
Sep 10 16:34
my brain is slowly folding, too
ಠ_ರೃ
@mrt181_twitter
Sep 10 16:35
https://media.tenor.co/images/9edb3d1be26f97abdbff5110b8695aba/raw
cverdier
@cverdier
Sep 10 16:48
Typeclasses

A set of 3 things :

    Types
    Operations on values of those types
    Laws governing the operations

In scala : encoded using traits

    Types are the Type parameters of the trait
    Operations are the methods of the trait
    Laws are... comments in the Scaladoc... (at best some Scalacheck testing...)

Alexander Babin
@mudriyjo
Sep 10 16:49
@cverdier thx
kenBayama
@kenBayama
Sep 10 16:49
thanks
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 16:52
any or this?
any.getClass or this.getClass?
Leszek Gruchała
@leszekgruchala
Sep 10 16:53
a.getClass I think
but still that’s duplication of what pattern match does there it seems
Jens Hoffmann
@jchoffmann
Sep 10 17:00

  // Remove duplicates from a list
  def nub[A](list: List[A])(eq: Eq[A]): List[A] = {
    def contains(a1: A, l: List[A]): Boolean =
      l.foldLeft(false)((b, a2) => b || eq.equals(a1, a2))

    list.foldRight[List[A]](Nil) {
      case (a, acc) =>
        if (contains(a, acc)) acc
        else a :: acc
    }
  }

Sitbon
@nsitbon
Sep 10 17:27
choose a different name for the implicit
ಠ_ರೃ
@mrt181_twitter
Sep 10 17:31
does anyone have the object Ordering writen down
Leszek Gruchała
@leszekgruchala
Sep 10 17:42
pull the code
ಠ_ರೃ
@mrt181_twitter
Sep 10 17:45
kk
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 17:45
John, did you knew Haskell before starting to use Scala, or have you learned both simultaneously?
Jorge
@jaliss
Sep 10 17:46
Maybe Hangouts is a better option :)
Jens Hoffmann
@jchoffmann
Sep 10 17:50
so a new link will be sent around tmr?
Simon Mittermueller
@simonmit
Sep 10 17:50
Have you already checked out eta-lang?
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 17:50
Thanks.
ಠ_ರೃ
@mrt181_twitter
Sep 10 17:50
are we going to talk the Scalaz 8 encodning tomorrow
about
Alexander Babin
@mudriyjo
Sep 10 18:01
thx
realfiretiger
@realfiretiger
Sep 10 18:01
thx
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 18:01
@jchoffmann Tomorrow link is already defined in the same email that brought today's link.
realfiretiger
@realfiretiger
Sep 10 18:02
This message was deleted
Leszek Gruchała
@leszekgruchala
Sep 10 18:02

Thank you all for today.
@jdegoes please talk to the hotel, we still have lot of strange audio changes like slowing your voice a lot, and you sound like barly to understand robot ;) That happens very often.

Hear you tomorrow!
Wiem Zine El Abidine
@wi101
Sep 10 18:03
@jdegoes Thanks! I've learned a lot and am looking forward for tomorrow :)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 18:03
Yes. Hope that the audio improves.
Wiem Zine El Abidine
@wi101
Sep 10 18:03
And hope that the internet improves :)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 10 18:04
Yes.
Eric Nelson
@enelson
Sep 10 18:29
Whoever is local and up for some dinner, any good suggestions?
Jens Hoffmann
@jchoffmann
Sep 10 18:32
@Eduardo-M-Cavalcanti john mentioned to maybe use a different tool other than zoom, so we'd new details. guess will see tomorrow
need*
thanks @jdegoes anyway, despite the connection problems, for great content and structure, and impressive live coding skils
Eric Nelson
@enelson
Sep 10 18:42
There’s an Italian place called Caffe Scosia as one suggestion. Any other authentic Scottish places? I like just about anything....
Jules Ivanic
@guizmaii
Sep 10 18:44
what time do you want to eat?
John A. De Goes
@jdegoes
Sep 10 18:47
There's a nice pub too next to the fish & chip's place
McCormick's or something
Indian food too
Any preferences?
Eric Nelson
@enelson
Sep 10 18:49
I had Indian last night, but I’m game for the pub
is it McKays?
cverdier
@cverdier
Sep 10 18:51
+1 for the Pub too
(sorry my phone is messing things up...)
Menestret Martin
@mmenestret_twitter
Sep 10 18:51
Gonna take my personnal jet and meet you guys there in a few
Eric Nelson
@enelson
Sep 10 18:52
😬
Jules Ivanic
@guizmaii
Sep 10 18:52
McKays
Eric Nelson
@enelson
Sep 10 18:52
138 Atholl Road
Pitlochry
PH16 5AG
United Kingdom
Jules Ivanic
@guizmaii
Sep 10 18:53
McKays, is not bad ! I ate there yesterday. I’m ok to go again today :smile:
Menestret Martin
@mmenestret_twitter
Sep 10 18:53
Seems like you guys are gonna have a healthy week
Jules Ivanic
@guizmaii
Sep 10 18:53
(and it’s next to my hotel :p)
Menestret Martin
@mmenestret_twitter
Sep 10 18:53
Vegetables all the way
Eric Nelson
@enelson
Sep 10 18:53
What time?
Jules Ivanic
@guizmaii
Sep 10 18:54
I have to test the “haggis”
:)
20h ?
Eric Nelson
@enelson
Sep 10 18:54
I’ll watch you test it! :)
20h or 20 min?
cverdier
@cverdier
Sep 10 18:55
20h to eat, 19h30 for those who want to have a beer first ? :)
Merunas
@meras
Sep 10 18:57
as a side note, it'd be worth dropping by Moulin Inn sometime this week, they brew their own beer.
Jules Ivanic
@guizmaii
Sep 10 18:57
oh. I love beer :)
John A. De Goes
@jdegoes
Sep 10 18:57
McKaay's?
Would also love to visit Moulin Inn & try their beer too
Jules Ivanic
@guizmaii
Sep 10 18:59

    as a side note, it'd be worth dropping by Moulin Inn sometime this week, they brew their own beer.

Tommorow ? 😁
Merunas
@meras
Sep 10 18:59
why not :D
Eric Nelson
@enelson
Sep 10 18:59
I may head over to McKays at 19:30 to eat. I’m already starving. 😂
Merunas
@meras
Sep 10 19:01
hold those growls!
is it 8 PM then ?
Jules Ivanic
@guizmaii
Sep 10 19:03

    20h to eat, 19h30 for those who want to have a beer first ? :)

Someone interested by this schedule ?
John A. De Goes
@jdegoes
Sep 10 19:04
I'll be there (McKaay's) around 7:30
Jules Ivanic
@guizmaii
Sep 10 19:05
19h30 = 7:30PM for our american friend 😇
ok see you there
Eric Nelson
@enelson
Sep 10 19:05
Ha ha, smart ass
Jules Ivanic
@guizmaii
Sep 10 19:06
the hardest in this exercice: implicit val SemigroupInstant: Semigroup[java.time.Instant] is to find how Java combine two Instants :D
Merunas
@meras
Sep 10 19:06
perfect
ha
Jules Ivanic
@guizmaii
Sep 10 19:15
does it make sense to add two Instant ?
John A. De Goes
@jdegoes
Sep 10 19:16
@guizmaii I should change that to Duration :)
Maciej Kowalski
@fkowal
Sep 10 19:16
Good question
Merunas
@meras
Sep 10 19:35
Anyone there yet?
Jules Ivanic
@guizmaii
Sep 10 19:36
We are inside
On the left
Artsiom Miklushou
@mikla
Sep 10 19:37
Where?
Jules Ivanic
@guizmaii
Sep 10 19:37
In the other room
Artsiom Miklushou
@mikla
Sep 10 19:43
Ahah
_


John A. De Goes/functional-scala

Menestret Martin
@mmenestret_twitter
Sep 11 07:30
HI there :)
ghazi ben ahmed
@bghazy
Sep 11 07:30
hey :)
Menestret Martin
@mmenestret_twitter
Sep 11 07:31
@bghazy :wave:
realfiretiger
@realfiretiger
Sep 11 07:31
hey
Menestret Martin
@mmenestret_twitter
Sep 11 07:33
Boun where are you ?
Jens Hoffmann
@jchoffmann
Sep 11 07:42
Morning
Amine SAGAAMA
@AmineSagaama
Sep 11 07:43
Hello
we have to use zoom or gotowebinar ?
strobe
@strobe
Sep 11 07:43
Hi )
Menestret Martin
@mmenestret_twitter
Sep 11 07:44
@AmineSagaama :wave: . I guess goto at first and if it fails, fallback to zoom
Jens Hoffmann
@jchoffmann
Sep 11 07:44
I'd try goto first, there was an email yesterday evening about it
Amine SAGAAMA
@AmineSagaama
Sep 11 07:45
@mmenestret_twitter Hello, ok :)
lmeyer
@LeonardMeyer
Sep 11 07:45
Hi
Menestret Martin
@mmenestret_twitter
Sep 11 07:46
Hi o/
Are any of you having trouble with slack right now or is it just me ?
Amine SAGAAMA
@AmineSagaama
Sep 11 07:47
yes me too
John A. De Goes
@jdegoes
Sep 11 07:47
Today we will be trying GoToMeeting.
Check your email for the notification link.
Amine SAGAAMA
@AmineSagaama
Sep 11 07:50
sounds good for me
Alexander Babin
@mudriyjo
Sep 11 07:52
much better
kenBayama
@kenBayama
Sep 11 07:53
i didn't get the notification link for gotomeeting
Alexander Babin
@mudriyjo
Sep 11 07:56

    https://global.gotowebinar.com/join/4858854426701276429/596772649

Jens Hoffmann
@jchoffmann
Sep 11 07:56
test
kenBayama
@kenBayama
Sep 11 07:56
thanks
ಠ_ರೃ
@mrt181_twitter
Sep 11 07:57
no is speaking?
no one
strobe
@strobe
Sep 11 07:57
yes
Amine SAGAAMA
@AmineSagaama
Sep 11 07:57
yes
Jens Hoffmann
@jchoffmann
Sep 11 07:57
yep
marianobringas
@marianobringas
Sep 11 07:57
yes
ghazi ben ahmed
@bghazy
Sep 11 07:58
yes
ಠ_ರೃ
@mrt181_twitter
Sep 11 07:58
screen is 16:9
yey
Jens Hoffmann
@jchoffmann
Sep 11 07:58
haha
ಠ_ರೃ
@mrt181_twitter
Sep 11 07:58
sad
muted can't unmute
Amine SAGAAMA
@AmineSagaama
Sep 11 07:59
yes
lmeyer
@LeonardMeyer
Sep 11 07:59
Can't unmute myself
Jens Hoffmann
@jchoffmann
Sep 11 07:59
can't
marianobringas
@marianobringas
Sep 11 07:59
nope
strobe
@strobe
Sep 11 07:59
can't
ghazi ben ahmed
@bghazy
Sep 11 07:59
can't
ಠ_ರೃ
@mrt181_twitter
Sep 11 07:59
silence of the lambs
realfiretiger
@realfiretiger
Sep 11 07:59
i can mute/unmute myself
strobe
@strobe
Sep 11 07:59
works for me
Jens Hoffmann
@jchoffmann
Sep 11 07:59
works now cheers
marianobringas
@marianobringas
Sep 11 07:59
works now
cmdegoes
@cmdegoes
Sep 11 08:00
Good morning everyone :-) I'm trying to work out our connection issues... :-)
Leszek Gruchała
@leszekgruchala
Sep 11 08:00
hello, me too
aureliesalmon
@aureliesalmon
Sep 11 08:02
that’s not so bad, but sometime we miss a word or two
Leszek Gruchała
@leszekgruchala
Sep 11 08:02
ok, I am in
lmeyer
@LeonardMeyer
Sep 11 08:03
So far so good
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:03
no diff
Bounkong Khamphousone
@tiboun
Sep 11 08:03
seems better
cmdegoes
@cmdegoes
Sep 11 08:04
What network is it on?
Leszek Gruchała
@leszekgruchala
Sep 11 08:04
no diff, all good for me at least
realfiretiger
@realfiretiger
Sep 11 08:04
today was good all day today
cmdegoes
@cmdegoes
Sep 11 08:04
Thanks :-)
Leszek Gruchała
@leszekgruchala
Sep 11 08:05
I can unmute myself.
and it’s getting worse with audio now for me.
realfiretiger
@realfiretiger
Sep 11 08:07
same
lmeyer
@LeonardMeyer
Sep 11 08:07
Yeah sound is a bit distorted
kenBayama
@kenBayama
Sep 11 08:07
same
Sitbon
@nsitbon
Sep 11 08:07
same
Bounkong Khamphousone
@tiboun
Sep 11 08:07
same for me
realfiretiger
@realfiretiger
Sep 11 08:07
last 3-4 mins its distorted
Jens Hoffmann
@jchoffmann
Sep 11 08:07
someone still seems unmuted - please chekc
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:08
dexcrease font size?
Amine SAGAAMA
@AmineSagaama
Sep 11 08:08
yes but not the entire screen
Jorge
@jaliss
Sep 11 08:08
a bit
yes
realfiretiger
@realfiretiger
Sep 11 08:08
now seems ok
Leszek Gruchała
@leszekgruchala
Sep 11 08:08
Yes(sound) and yes(we see the screen)
Jorge
@jaliss
Sep 11 08:08
I can see the screen
realfiretiger
@realfiretiger
Sep 11 08:09
now we hear ok
earlier it was distorted
lmeyer
@LeonardMeyer
Sep 11 08:09
There's still some distortion on my side
Jorge
@jaliss
Sep 11 08:09
the screen looks small
mhdkassir
@mhdkassir
Sep 11 08:09
there is a little sound distortion , every now and then
aureliesalmon
@aureliesalmon
Sep 11 08:09
distorsion
Bounkong Khamphousone
@tiboun
Sep 11 08:09
now it's distorted
Jorge
@jaliss
Sep 11 08:09
it was like full screen before
realfiretiger
@realfiretiger
Sep 11 08:09
againn distorted
Amine SAGAAMA
@AmineSagaama
Sep 11 08:09
yes looks small
marianobringas
@marianobringas
Sep 11 08:09
Yeah, now sound is terrible
Sitbon
@nsitbon
Sep 11 08:09
same
Leszek Gruchała
@leszekgruchala
Sep 11 08:09
now can’t understand a thing :/
Jorge
@jaliss
Sep 11 08:09
:(
Bounkong Khamphousone
@tiboun
Sep 11 08:09
didn't catch a word of what you said
realfiretiger
@realfiretiger
Sep 11 08:09
distorted
Jorge
@jaliss
Sep 11 08:10
could we give Google Hangouts a try?
Sitbon
@nsitbon
Sep 11 08:10
completely distorted
Jens Hoffmann
@jchoffmann
Sep 11 08:10
no sound at all atm
except fragemnts
Bertjan Broeksema
@bbroeksema
Sep 11 08:10
Haha, just as you say it's working, it's getting distorted :)
kenBayama
@kenBayama
Sep 11 08:10
distorted
Amine SAGAAMA
@AmineSagaama
Sep 11 08:10
we can't hear you right now John
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:10
john's a robot-confirmed
Leszek Gruchała
@leszekgruchala
Sep 11 08:10
maybe switch back to wifi
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:10
cant hear John
MA Jian
@sdmj45
Sep 11 08:10
cant hear any more
realfiretiger
@realfiretiger
Sep 11 08:10
cant hear you
Alexander Babin
@mudriyjo
Sep 11 08:10
cant hear
Jorge
@jaliss
Sep 11 08:10
also, are you on wifi @jdegoes ? maybe try a wired connection?
strobe
@strobe
Sep 11 08:11
can't hear anymore too
mhdkassir
@mhdkassir
Sep 11 08:11
much better now
Jorge
@jaliss
Sep 11 08:11
yes
kenBayama
@kenBayama
Sep 11 08:11
better
MA Jian
@sdmj45
Sep 11 08:11
better
aureliesalmon
@aureliesalmon
Sep 11 08:11
better
Bounkong Khamphousone
@tiboun
Sep 11 08:11
better
realfiretiger
@realfiretiger
Sep 11 08:11
good now
Rob Vermazeren
@RobVermazeren
Sep 11 08:11
better
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:11
can hear now
strobe
@strobe
Sep 11 08:11
better
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:11
better
Jorge
@jaliss
Sep 11 08:11
oh ok
the screen started quite bigger and is now small
Leszek Gruchała
@leszekgruchala
Sep 11 08:12
by purpose I think
Jorge
@jaliss
Sep 11 08:12
yeah probably
you're right
Bounkong Khamphousone
@tiboun
Sep 11 08:12
sounds is still distorded on wifi
lmeyer
@LeonardMeyer
Sep 11 08:12
Audio is kinda crap :(
kenBayama
@kenBayama
Sep 11 08:12
can't hear clearly
Sitbon
@nsitbon
Sep 11 08:12
no sound
Jorge
@jaliss
Sep 11 08:12
oh no :(
Amine SAGAAMA
@AmineSagaama
Sep 11 08:12
me too
MA Jian
@sdmj45
Sep 11 08:12
no sound
Bounkong Khamphousone
@tiboun
Sep 11 08:12
can't catch a word
realfiretiger
@realfiretiger
Sep 11 08:12
no sound again
kenBayama
@kenBayama
Sep 11 08:13
better
realfiretiger
@realfiretiger
Sep 11 08:13
now i hear
Amine SAGAAMA
@AmineSagaama
Sep 11 08:13
better
Leszek Gruchała
@leszekgruchala
Sep 11 08:13
it seems it’s gonna be even worse than yesterday.
Sometimes is ok, but mostly it’s bad
kenBayama
@kenBayama
Sep 11 08:14
the screen doesn't change
Sitbon
@nsitbon
Sep 11 08:14
@leszekgruchala I agree
Rob Vermazeren
@RobVermazeren
Sep 11 08:14
Sr
Jorge
@jaliss
Sep 11 08:14
there's only screen sharing. no video right?
Leszek Gruchała
@leszekgruchala
Sep 11 08:14
it seems
Wiem Zine El Abidine
@wi101
Sep 11 08:14
yes
Oleksandra Holubitska
@Vilkina
Sep 11 08:15
I'm in a listen only mode
HaryM
@mangogBasile
Sep 11 08:15
i can't see the other board
Jorge
@jaliss
Sep 11 08:15
thanks for clarifying john
Leszek Gruchała
@leszekgruchala
Sep 11 08:15
do not overuse the bandwidth :)
Alex Henning Johannessen
@ahjohannessen
Sep 11 08:15
Please don't, it takes audio bandwidth
Jorge
@jaliss
Sep 11 08:15
I asked because I thought you were drawing something
Oleksandra Holubitska
@Vilkina
Sep 11 08:15
Screen Shot 2018-09-11 at 11.15.23 AM.png
kenBayama
@kenBayama
Sep 11 08:15
alright
Jorge
@jaliss
Sep 11 08:15
don't use if not needed
Bounkong Khamphousone
@tiboun
Sep 11 08:17
Are you moving your mouse?
Oleksandra Holubitska
@Vilkina
Sep 11 08:17
I see
tnx
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:17
mute your mics on your hardware
Bounkong Khamphousone
@tiboun
Sep 11 08:17
the screen seems freezed but I would like to know if it's normal
HaryM
@mangogBasile
Sep 11 08:17
yeah
ok for me
John A. De Goes
@jdegoes
Sep 11 08:18
@Vilkina Please rejoin, I can see you are not connected to audio but I cannot fix it on my side.
Leszek Gruchała
@leszekgruchala
Sep 11 08:18
@jdegoes can you use your mouse? We’re not sure if the screen is frozen
ok
no
Alexander Babin
@mudriyjo
Sep 11 08:18
no
Jens Hoffmann
@jchoffmann
Sep 11 08:18
no scrolling
marianobringas
@marianobringas
Sep 11 08:18
no
Menestret Martin
@mmenestret_twitter
Sep 11 08:18
no scrolling there
lol
lmeyer
@LeonardMeyer
Sep 11 08:18
Nope, no scrolling
Sitbon
@nsitbon
Sep 11 08:18
no scrolling
Amine SAGAAMA
@AmineSagaama
Sep 11 08:18
no scrolling
strobe
@strobe
Sep 11 08:18
no scrolling
MA Jian
@sdmj45
Sep 11 08:19
no scrolling
Amine SAGAAMA
@AmineSagaama
Sep 11 08:19
it's frozen
Leszek Gruchała
@leszekgruchala
Sep 11 08:19
so the zoom was not that bad apparenlty ;)
Oleksandra Holubitska
@Vilkina
Sep 11 08:19
It is a functions that can return a function and takes funct as args)
Leszek Gruchała
@leszekgruchala
Sep 11 08:19
no
Amine SAGAAMA
@AmineSagaama
Sep 11 08:19
no
Jorge
@jaliss
Sep 11 08:19
no
marianobringas
@marianobringas
Sep 11 08:19
nope
strobe
@strobe
Sep 11 08:19
no
kenBayama
@kenBayama
Sep 11 08:19
no
aureliesalmon
@aureliesalmon
Sep 11 08:19
nope
MA Jian
@sdmj45
Sep 11 08:19
no
Alexander Babin
@mudriyjo
Sep 11 08:19
no
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:19
no
lmeyer
@LeonardMeyer
Sep 11 08:19
Nope
Rob Vermazeren
@RobVermazeren
Sep 11 08:19
No
realfiretiger
@realfiretiger
Sep 11 08:19
no
Bounkong Khamphousone
@tiboun
Sep 11 08:19
no
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:20
frozen screen
ghazi ben ahmed
@bghazy
Sep 11 08:20
no
Sitbon
@nsitbon
Sep 11 08:20
let's switch back to zoom
Jorge
@jaliss
Sep 11 08:21
ha
Leszek Gruchała
@leszekgruchala
Sep 11 08:21
guys, please make sure you are muted
rather KB :)
Jorge
@jaliss
Sep 11 08:22
haha
Oleksandra Holubitska
@Vilkina
Sep 11 08:22
ok, i'll eat some candy
Leszek Gruchała
@leszekgruchala
Sep 11 08:22
:coffee:
Jorge
@jaliss
Sep 11 08:22
at 5am coffee is my best friend
Leszek Gruchała
@leszekgruchala
Sep 11 08:22
everyone solved all the exercises from yesterday? :)
cmdegoes
@cmdegoes
Sep 11 08:22
it's 2:22 AM here :-/
Jorge
@jaliss
Sep 11 08:23
:)
Jens Hoffmann
@jchoffmann
Sep 11 08:23
someone's still typing - please check whether you're muted
realfiretiger
@realfiretiger
Sep 11 08:23
ha
Jens Hoffmann
@jchoffmann
Sep 11 08:23
me?
ah sorry :)
Bertjan Broeksema
@bbroeksema
Sep 11 08:23
2018 and technology still didn't solve remote meetings :)
Oleksandra Holubitska
@Vilkina
Sep 11 08:23
I've worked all night on these exersises)
exercises )
Jorge
@jaliss
Sep 11 08:24
I didn't get to them
cmdegoes
@cmdegoes
Sep 11 08:24
How are they going?
Leszek Gruchała
@leszekgruchala
Sep 11 08:24
I am working fully remotely for the past 4 years with companies aruond the world and it’s doable :)
Jorge
@jaliss
Sep 11 08:24
me too
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:24
I herded the kids all evening :)
Jorge
@jaliss
Sep 11 08:24
I mostly use Hangouts
works quite well
Bertjan Broeksema
@bbroeksema
Sep 11 08:24
@mrt181_twitter yep, here as well :)
Leszek Gruchała
@leszekgruchala
Sep 11 08:24
I did the tasks after 10pm, was quite easy and repetitive :)
yes!
Jens Hoffmann
@jchoffmann
Sep 11 08:24
@mrt181_twitter same :)
Jorge
@jaliss
Sep 11 08:25
nice!
kenBayama
@kenBayama
Sep 11 08:25
i see
Jorge
@jaliss
Sep 11 08:25
screen looks better
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:25
This zoom level is better.
Leszek Gruchała
@leszekgruchala
Sep 11 08:25
screen goes on, sound got worse :/
Jorge
@jaliss
Sep 11 08:25
yeah
MA Jian
@sdmj45
Sep 11 08:26
screen goes on, sound got worse :/
kenBayama
@kenBayama
Sep 11 08:26
agree
Jorge
@jaliss
Sep 11 08:26
Hangouts?
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:26
no
Bounkong Khamphousone
@tiboun
Sep 11 08:26
no sounds at all
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:26
Cannot hear.
Alexander Babin
@mudriyjo
Sep 11 08:26
no
Menestret Martin
@mmenestret_twitter
Sep 11 08:26
no :/
Sitbon
@nsitbon
Sep 11 08:26
no sound
Leszek Gruchała
@leszekgruchala
Sep 11 08:26
Please go to zoom again or hangout (but hangouts have limitation to 15 people).
realfiretiger
@realfiretiger
Sep 11 08:26
no sound
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:26
you are in full robot mode again
Jorge
@jaliss
Sep 11 08:26
mmm unless you have a business g suite
yeah
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:26
Sound ok.
marianobringas
@marianobringas
Sep 11 08:26
k
Wiem Zine El Abidine
@wi101
Sep 11 08:26
ok
Leszek Gruchała
@leszekgruchala
Sep 11 08:26
Ok, zoom guys and gals
Amine SAGAAMA
@AmineSagaama
Sep 11 08:27
ok
zoom
cmdegoes
@cmdegoes
Sep 11 08:27
Hangouts will only allow 10 people, but Google Meet may be a possibility
John A. De Goes
@jdegoes
Sep 11 08:27
Back to Zoom. We can try Google Meet if that doesn't work
Jorge
@jaliss
Sep 11 08:27
Hangouts Meet has a 25 people limit
Leszek Gruchała
@leszekgruchala
Sep 11 08:28
ok, good to know
tomorrow let’s start 30 min earlier to test the connection :)
Jorge
@jaliss
Sep 11 08:29
haha
too bad the connection is now written in Scala
otherwise it would make what John wants
Bounkong Khamphousone
@tiboun
Sep 11 08:29
I need to install zoom
Oleksandra Holubitska
@Vilkina
Sep 11 08:30
https://zoom.us/j/711516186 ?
Jorge
@jaliss
Sep 11 08:30
it's quite fast to install @tiboun
ghazi ben ahmed
@bghazy
Sep 11 08:30
yes
Leszek Gruchała
@leszekgruchala
Sep 11 08:30
Yes @Vilkina
aureliesalmon
@aureliesalmon
Sep 11 08:30
did it start? zoom says « Please wait »
Jorge
@jaliss
Sep 11 08:30
started right now
Leszek Gruchała
@leszekgruchala
Sep 11 08:30
started right now
kenBayama
@kenBayama
Sep 11 08:31
can't hear anything
aureliesalmon
@aureliesalmon
Sep 11 08:31
(hi there @bghazy ^^)
thanks!
Amine SAGAAMA
@AmineSagaama
Sep 11 08:31
much better
Leszek Gruchała
@leszekgruchala
Sep 11 08:31
works for me
all good
Jorge
@jaliss
Sep 11 08:31
me too
realfiretiger
@realfiretiger
Sep 11 08:31
all good
ghazi ben ahmed
@bghazy
Sep 11 08:32
hey @aureliesalmon
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:32
sound failling
Leszek Gruchała
@leszekgruchala
Sep 11 08:32
sometimes
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:32
kindred
*
kenBayama
@kenBayama
Sep 11 08:33
all good
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:34
sound ok.
Jorge
@jaliss
Sep 11 08:34
haha
elarib
@elarib
Sep 11 08:35
We see only gitter ...
Leszek Gruchała
@leszekgruchala
Sep 11 08:35
yes
MA Jian
@sdmj45
Sep 11 08:35
there is no sound?
Salla
@sallareznov
Sep 11 08:35
It’s cool to see our own messages
Leszek Gruchała
@leszekgruchala
Sep 11 08:35
sound is working
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:35
sound is fine.
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:35
do not commit to early to some implementation
realfiretiger
@realfiretiger
Sep 11 08:35
i hear you
Leszek Gruchała
@leszekgruchala
Sep 11 08:35
and screen sharing is fine
Jorge
@jaliss
Sep 11 08:35
yes, working good
marianobringas
@marianobringas
Sep 11 08:36
Yes, it’s working
aureliesalmon
@aureliesalmon
Sep 11 08:36
@sdmj45 try going in zoom préférences i had to fix my audio settings
marianobringas
@marianobringas
Sep 11 08:36
follow the types
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:36
filling all the tpe holes
type
Jorge
@jaliss
Sep 11 08:37
I had lost the cards analogy yesterday. It's great to have this fast review.
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:37
types
MA Jian
@sdmj45
Sep 11 08:37
@aureliesalmon ok
Jens Hoffmann
@jchoffmann
Sep 11 08:38
too many options?
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:39
add structure
Jens Hoffmann
@jchoffmann
Sep 11 08:39
Type classes
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:43
reduce
Jens Hoffmann
@jchoffmann
Sep 11 08:43
reduce
ಠ_ರೃ
@mrt181_twitter
Sep 11 08:49
yes
no
Leszek Gruchała
@leszekgruchala
Sep 11 08:50
“asd” + “qwe” != “qwe” + “asd” right? So the String should be not assotiative….?
Aaa, ok, got it
thanks :)
Jens Hoffmann
@jchoffmann
Sep 11 08:50
this isn't associativity
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:50
you changed the order of the factors
Jens Hoffmann
@jchoffmann
Sep 11 08:51
that's commutativity
Leszek Gruchała
@leszekgruchala
Sep 11 08:51
yeah, I misunderstood :)
:muscle: thanks!
Jens Hoffmann
@jchoffmann
Sep 11 08:51
haha
what's the word? new typing? nude typing? :)
Jules Ivanic
@guizmaii
Sep 11 08:53
newtyping
newtypes
Jens Hoffmann
@jchoffmann
Sep 11 08:53
thanks
Jules Ivanic
@guizmaii
Sep 11 08:54
generally implemented with value classes in Scala
https://docs.scala-lang.org/overviews/core/value-classes.html
Rob Vermazeren
@RobVermazeren
Sep 11 08:56
max
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 08:59
Why not empty has to be associative?
Whats the gain?
Alex Henning Johannessen
@ahjohannessen
Sep 11 08:59

NotEmpty(f1.head, f1.tail.fold(Some(f2))(t ⇒ Some(append(t, f2))))

or

      f1.tail match {
        case Some(t) ⇒ NotEmpty(f1.head, Some(append(t, f2)))
        case None    ⇒ NotEmpty(f1.head, Some(f2))
      }

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 09:04
Ive got it.
Jens Hoffmann
@jchoffmann
Sep 11 09:05
will solutions be available as well as a reference for us to recap the course at a later point?
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 09:05
good point
Jens Hoffmann
@jchoffmann
Sep 11 09:06
should Monoid extend Semigroup?
Leszek Gruchała
@leszekgruchala
Sep 11 09:07
yes trait Monoid[F] extends Semigroup[F] { self =>
marianobringas
@marianobringas
Sep 11 09:07
MinInt
Sitbon
@nsitbon
Sep 11 09:08
MinValue
Salla
@sallareznov
Sep 11 09:13
final case class Permission(actions: List[Action], resource: Resource) ?
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:13
accountIds: F[_]
could be Id[A], Option[A], List[A]
?
Menestret Martin
@mmenestret_twitter
Sep 11 09:16
case class Permission(ressources: Map[Email, (Ressource, Rights)]) ?
type Ressource = String type Email = String type Rights = NotEmpty[String]
:p
Kurt Logan
@kurtlogan
Sep 11 09:17

case class Resource(resources: String, accessLevel: AccessLevel)
 case class Permission(resources: Set[Resource])

case class Resource(resources: String, accessLevel: AccessLevel)
 case class Permission[F[_]](resources: F[Resource])

Menestret Martin
@mmenestret_twitter
Sep 11 09:19
Oh yes you're right, my encoding should have contained of a List[ (Ressource, Rights)]
Or set
Bertjan Broeksema
@bbroeksema
Sep 11 09:27

implicit def SemigroupTuple2[A: Semigroup, B: Semigroup]: Semigroup[(A, B)] =
    (l: (A, B), r: (A, B)) => (l._1 |+| r._1, l._2 |+| r._2)

Jorge
@jaliss
Sep 11 09:29
I don't think that compiles @bbroeksema
Leszek Gruchała
@leszekgruchala
Sep 11 09:29
does it compile? Sometimes IDEA suggest something which fails
;]
Alex Henning Johannessen
@ahjohannessen
Sep 11 09:32
trick question :)
Jens Hoffmann
@jchoffmann
Sep 11 09:32
lol
aureliesalmon
@aureliesalmon
Sep 11 09:32
no zero
Jorge
@jaliss
Sep 11 09:32
ask Churck Norris
Jens Hoffmann
@jchoffmann
Sep 11 09:33
"John has a Monoid for NotEmpty" (Chuck Norris spirit)
Jorge
@jaliss
Sep 11 09:33
lol
Menestret Martin
@mmenestret_twitter
Sep 11 09:33
Ahah new meme !
Merunas
@meras
Sep 11 09:34
can someone share their implementation of MonoidPermission
marianobringas
@marianobringas
Sep 11 09:34

type Email = String
type Resource = String

sealed trait Capability
case object Read extends Capability
case object Write extends Capability

case class Permission(value: Map[Email, Map[Resource, Set[Capability]]])
object Permission {
def apply() = {
new Permission(Map.empty)
}
}
implicit val MonoidPermission: Monoid[Permission] = new Monoid[Permission] {
override def append(f1: Permission, f2: => Permission): Permission = {
Permission(f1.value.mappend(f2.value))
}

override def zero: Permission = Permission(Map.empty)

}
val example2 = mzero[Permission] |+| Permission()
balanka
@balanka
Sep 11 09:40
Is there a reason why the second parameter for the append is defined as follows f2: => Permission
insteadof f2:Permission like the first parameter f1:Permission?
John A. De Goes
@jdegoes
Sep 11 09:40
@balanka Ideally both parameters would be defined by name, to reduce the amount of work done.
Jens Hoffmann
@jchoffmann
Sep 11 09:41
@marianobringas you append function can also be:

override def append(l: Permission, r: => Permission): Permission = Permission(l.value |+| r.value)

Alex Henning Johannessen
@ahjohannessen
Sep 11 09:42

  implicit val MonoidPermission: Monoid[Permission] = new Monoid[Permission]{
    def zero: Permission = Permission(Map())
    def append(l: Permission, r: ⇒ Permission): Permission =
      Permission(l.values |+| r.values)
  }

marianobringas
@marianobringas
Sep 11 09:42
yes
I was trying that right now
Thanks!
Jens Hoffmann
@jchoffmann
Sep 11 09:42
is that because we use scalaz as dependency?
Bertjan Broeksema
@bbroeksema
Sep 11 09:42
@jaliss, @leszekgruchala indeed, doesn't compile. Sorry for not verifying that. It's clear that there are no FP'ers in the Intellij IDEA workforce ;)
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:44

package scalaz
package syntax

/** Wraps a value `self` and provides methods related to `Semigroup` */
final class SemigroupOps[F] private[syntax](val self: F)(implicit val F: Semigroup[F]) extends Ops[F] {
  ////
  final def |+|(other: => F): F = F.append(self, other)
  final def mappend(other: => F): F = F.append(self, other)
  final def ⊹(other: => F): F = F.append(self, other)
  ////
}

Jens Hoffmann
@jchoffmann
Sep 11 09:45
yea but the semigroup instances for map etc are then provided as well
Bertjan Broeksema
@bbroeksema
Sep 11 09:46
@mrt181_twitter that's sort of uggly, three custom operators for the same operation
Jorge
@jaliss
Sep 11 09:46
I wonder why they did it like that
Bertjan Broeksema
@bbroeksema
Sep 11 09:47
Maybe @jdegoes knows?
Jens Hoffmann
@jchoffmann
Sep 11 09:47
lol @ unicode
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:48
you coulkd a banana there
Amine SAGAAMA
@AmineSagaama
Sep 11 09:48
pretty but hard to write lol
Jens Hoffmann
@jchoffmann
Sep 11 09:48
you could define a unicode operator that is not printed
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:48
put a banana
Oleksandra Holubitska
@Vilkina
Sep 11 09:48
implicit def SemigroupTuple2[A: Semigroup, B: Semigroup]:
Semigroup[(A, B)] = new Semigroup[(A, B)] {
def combine(l: (A, B), r: (A, B)): (A, B) = {
val (la, lb) = l
val (ra, rb) = r
(Semigroup[A].append(la, ra), Semigroup[B].append(lb, rb))
}
Jorge
@jaliss
Sep 11 09:48
LOL
Alex Henning Johannessen
@ahjohannessen
Sep 11 09:48
In simulacrum you can do this:

import simulacrum._

@typeclass trait Semigroup[A] {
  @op("|+|") def append(x: A, y: A): A
}

Jorge
@jaliss
Sep 11 09:48
first time I hear that touchbar is good for something
I agree it looks great
Jens Hoffmann
@jchoffmann
Sep 11 09:49
Option 3: Banana
Alex Henning Johannessen
@ahjohannessen
Sep 11 09:49
Option 3
Jens Hoffmann
@jchoffmann
Sep 11 09:49
gets my vote
Jules Ivanic
@guizmaii
Sep 11 09:49
3 :D
Bounkong Khamphousone
@tiboun
Sep 11 09:49
3
Menestret Martin
@mmenestret_twitter
Sep 11 09:49
3 :D
marianobringas
@marianobringas
Sep 11 09:49
3
Sitbon
@nsitbon
Sep 11 09:49
option 2
aureliesalmon
@aureliesalmon
Sep 11 09:49
3
Alexander Babin
@mudriyjo
Sep 11 09:49
3
lmeyer
@LeonardMeyer
Sep 11 09:49
3
Jorge
@jaliss
Sep 11 09:49
2
Amine SAGAAMA
@AmineSagaama
Sep 11 09:49
2
realfiretiger
@realfiretiger
Sep 11 09:49
2
ghazi ben ahmed
@bghazy
Sep 11 09:49
2
simondumas
@simondumas
Sep 11 09:49
3
Rob Vermazeren
@RobVermazeren
Sep 11 09:50
2
MA Jian
@sdmj45
Sep 11 09:50
3
Menestret Martin
@mmenestret_twitter
Sep 11 09:50
2 can confuse you with the actual + operator !
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:50
1 🍌 2 🍌 2
Wiem Zine El Abidine
@wi101
Sep 11 09:50
:D
Alex Henning Johannessen
@ahjohannessen
Sep 11 09:50
:D
aureliesalmon
@aureliesalmon
Sep 11 09:50
at least with unicode, it should be the mathematical operator^^
Menestret Martin
@mmenestret_twitter
Sep 11 09:50
:+1:
Amine SAGAAMA
@AmineSagaama
Sep 11 09:51
It's tiring to use the third one I think
the second is more practical
Jorge
@jaliss
Sep 11 09:51
how do you type that? :)
Leszek Gruchała
@leszekgruchala
Sep 11 09:51

@bbroeksema This is not so easy to support that. IDEA (and all the rest of their products) support many languages and they in fact have their own meta language (some sort of dsl too) to compile stuff compiler to provide code complition for given types and show errors immediately.
Also, the type definition is on the right side which makes harder for them to infer code complition. And sometime you have no types.
6 people working full time on the scala plugin fot the past few years…

It all may change with full support of language server protocol within sbt.
strobe
@strobe
Sep 11 09:51

why I may get error like this:

 could not find implicit value for parameter F: scalaz.Monoid[net.degoes.abstractions.algebra.Permission]

if I have

  implicit val MonoidPermission: Monoid[Permission] = new Monoid[Permission] {
    override def append(f1: =>Permission, f2: => Permission): Permission = {
      Permission(f1.value.mappend(f2.value))
    }
    override def mzero: Permission = Permission(Map.empty)
  }

Bounkong Khamphousone
@tiboun
Sep 11 09:51
you have to know its code XD or copy paste
realfiretiger
@realfiretiger
Sep 11 09:51
r
Amine SAGAAMA
@AmineSagaama
Sep 11 09:52
you have to type 3 times in the keyboard to use the third one
aureliesalmon
@aureliesalmon
Sep 11 09:52
that’s a good point
marianobringas
@marianobringas
Sep 11 09:53
F1 also has the by name
strobe
@strobe
Sep 11 09:54
yeah I have it
Jules Ivanic
@guizmaii
Sep 11 09:54

  implicit val MonoidPermission: Monoid[Permission] =
    new Monoid[Permission] {
      override def zero: Permission                                      = Permission(Map.empty)
      override def append(f1: Permission, f2: => Permission): Permission = Permission(f1.value |+| f2.value) // TODO: Where is the Semigroup of Map in Scalaz ??
    }

(doesn’t compile)
Wiem Zine El Abidine
@wi101
Sep 11 09:55
@strobe because f1 in append should be called by value (f1: Permission, ...)
strobe
@strobe
Sep 11 09:56
thanks
Wiem Zine El Abidine
@wi101
Sep 11 09:57
@guizmaii Map[Email, Map[ResourceId, Set[Capability]] haven't an implicit Monoid to be able to use the |+|
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:57
yes
Jules Ivanic
@guizmaii
Sep 11 09:57
what about Map[K, V] ?
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:57
yes
Jules Ivanic
@guizmaii
Sep 11 09:57
with some constraints
Jens Hoffmann
@jchoffmann
Sep 11 09:57
only if you partially apply?
Jules Ivanic
@guizmaii
Sep 11 09:57
on K and/or V
lmeyer
@LeonardMeyer
Sep 11 09:58
Yes with type lambda :)
Jens Hoffmann
@jchoffmann
Sep 11 09:58
OK that's the name, type lambda
Wiem Zine El Abidine
@wi101
Sep 11 09:58
Map[K, ?] is * => *
ಠ_ರೃ
@mrt181_twitter
Sep 11 09:58
(*, *) => *
Wiem Zine El Abidine
@wi101
Sep 11 10:01
Map: (*, *) => *
Map[K, ?]: * => *
List: * => *
List[A]: *
Menestret Martin
@mmenestret_twitter
Sep 11 10:03
Well A type has to be concrete right ?
Cause if you have type MyType[A] = List[A]
MyType is * => *
isn't it ?
Wiem Zine El Abidine
@wi101
Sep 11 10:06
yes and when you have a type that requires [F[_]]
for example for Functor[F[_]] we can do: Functor[MyType]
Menestret Martin
@mmenestret_twitter
Sep 11 10:06
yep
Wiem Zine El Abidine
@wi101
Sep 11 10:08
and if we call Functor[MyType[Int]] it doesn't work because MyType[Int] is kind of *
Menestret Martin
@mmenestret_twitter
Sep 11 10:08
of course :)
Jens Hoffmann
@jchoffmann
Sep 11 10:09
nice re. identifiers in backticks
Jules Ivanic
@guizmaii
Sep 11 10:10
don’t do that at home :D
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:10
friends dont let friends use backticked identifiers
Jens Hoffmann
@jchoffmann
Sep 11 10:10
but in the day job :D
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:17
no
no
all or nothing
can't shoot my own foot anymore
Bertjan Broeksema
@bbroeksema
Sep 11 10:25
you arleady did too often, so no feet left? :P
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:26
(╯°Д°）╯︵ ┻━┻
lol
Bounkong Khamphousone
@tiboun
Sep 11 10:28
identity will be broken as well
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 10:30
sound is failling
Sitbon
@nsitbon
Sep 11 10:31
sound is horrible
marianobringas
@marianobringas
Sep 11 10:31
sound started breaking up
Jorge
@jaliss
Sep 11 10:31
audio is really bad
Menestret Martin
@mmenestret_twitter
Sep 11 10:31
getting better again
Sitbon
@nsitbon
Sep 11 10:31
seems good now
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:31
johns speech processor needs a reboot
Sitbon
@nsitbon
Sep 11 10:31
can you just repeat last minute
thx John
Jorge
@jaliss
Sep 11 10:31
thx!
Wiem Zine El Abidine
@wi101
Sep 11 10:31
:) thnx
Menestret Martin
@mmenestret_twitter
Sep 11 10:32
What was the summary of point 1 ?
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:33
can we guarantee the structure too?
Menestret Martin
@mmenestret_twitter
Sep 11 10:33
Ok got it
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:33
would we need dependent types for that?
Jules Ivanic
@guizmaii
Sep 11 10:33

    can we guarantee the structure too?

By respecting laws ?
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:34
in the compiler
Wiem Zine El Abidine
@wi101
Sep 11 10:36
we will have no compile error if we don't respect the laws, but we should respect the laws by ourselves (and test them with different ways to prove that we respect the laws)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 10:36
thanks.
lmeyer
@LeonardMeyer
Sep 11 10:40
@jdegoes this isn't full screen
realfiretiger
@realfiretiger
Sep 11 10:40
it is 4 me
Leszek Gruchała
@leszekgruchala
Sep 11 10:41
double click on that small window
Sitbon
@nsitbon
Sep 11 10:41
@cverdier we're waiting for you ;-)
lmeyer
@LeonardMeyer
Sep 11 10:41
Got it, my zoom client sucks
cverdier
@cverdier
Sep 11 10:41
I'll send a picture when it's finished don't worry
Jens Hoffmann
@jchoffmann
Sep 11 10:42
thanks @cverdier
Wiem Zine El Abidine
@wi101
Sep 11 10:42
thanks
Sitbon
@nsitbon
Sep 11 10:42
@cverdier you're the man
cverdier
@cverdier
Sep 11 10:44
https://drive.google.com/file/d/1ds_deOHYWWtfVikHX0bsOJRt9HqBh9Xq/view?usp=sharing
Wiem Zine El Abidine
@wi101
Sep 11 10:44
it looks nicer ^^
Sitbon
@nsitbon
Sep 11 10:44
thx
ಠ_ರೃ
@mrt181_twitter
Sep 11 10:52
success or failure
map success to fail
success map success'
Jens Hoffmann
@jchoffmann
Sep 11 10:56
i don't get the producing zero or more A's analogy unfortunately...why produce?
mhdkassir
@mhdkassir
Sep 11 10:57
are you guys still seeing the screen ?
realfiretiger
@realfiretiger
Sep 11 10:57
yes
marianobringas
@marianobringas
Sep 11 10:57
Yes
Bounkong Khamphousone
@tiboun
Sep 11 10:57
yes
mhdkassir
@mhdkassir
Sep 11 10:58
ok thx
Jules Ivanic
@guizmaii
Sep 11 10:58

    i don't get the producing zero or more A's analogy unfortunately...why produce?

Future[A] for example
Menestret Martin
@mmenestret_twitter
Sep 11 10:58
@jchoffmann When you have a type E[_] which has a functor instance, then, mapping over it, would produce (or not) a new value (thanks to your function f passed to map)
As Some(10).map(_ + 1) whould produce a new value
whereas None.map(_ + 1) would not
dont know if i'm clear
So Functor is a sum type (the sum of all the types that has an instance of that type class), of types that may or may not produce new values through the application of map on them
marianobringas
@marianobringas
Sep 11 11:00
wrong kind
Menestret Martin
@mmenestret_twitter
Sep 11 11:01
Am I the only one having Judas Priest's Breaking the law playing inside my head ?
Jorge
@jaliss
Sep 11 11:03
lost audio for a sec ... what problem did john said might happen mapping a Map?
oh, I see. Thanks John!
marianobringas
@marianobringas
Sep 11 11:04

  def map[A, B](fa: BTree[A])(f: A => B): BTree[B] =
    fa match {
      case Leaf(a) => Leaf(f(a))
      case Fork(l, r) => Fork(map(l)(f), map(r)(f))
    }
}

Jens Hoffmann
@jchoffmann
Sep 11 11:04

      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] =
        fa match {
          case Leaf(a) => Leaf(f(a))
          case Fork(l, r) => Fork(map(l)(f), map(r)(f))
        }

Jules Ivanic
@guizmaii
Sep 11 11:05

    Am I the only one having Judas Priest's Breaking the law playing inside my head ?

Yes, you are 😅
Jens Hoffmann
@jchoffmann
Sep 11 11:06
thanks @mmenestret_twitter Thanks, will need to think about it during the break
Oleksandra Holubitska
@Vilkina
Sep 11 11:09
case Node(l, r) => Node(f(l), f(r))
Leszek Gruchała
@leszekgruchala
Sep 11 11:09
trampolining
Alex Henning Johannessen
@ahjohannessen
Sep 11 11:09
:metal:
Jorge
@jaliss
Sep 11 11:09
haha
Leszek Gruchała
@leszekgruchala
Sep 11 11:09
http://blog.higher-order.com/assets/trampolines.pdf
Alex Henning Johannessen
@ahjohannessen
Sep 11 11:11

  implicit val NothingFunctor: Functor[Nothing] = new Functor[Nothing] {
    def map[A, B](fa: Nothing)(f: A ⇒ B): Nothing = fa
  }

ಠ_ರೃ
@mrt181_twitter
Sep 11 11:12

  implicit val NothingFunctor: Functor[Nothing] =  new Functor[Nothing] {
    override def map[A, B](fa: Nothing[A])(f: A => B): Nothing[B] = fa
  }

Jorge
@jaliss
Sep 11 11:13
I think you don't need to add the types to Nothing @mrt181_twitter
Leszek Gruchała
@leszekgruchala
Sep 11 11:13
you even can’t I think
ಠ_ರೃ
@mrt181_twitter
Sep 11 11:14
idea auto complete
Leszek Gruchała
@leszekgruchala
Sep 11 11:15
I am huge fan of idea, using it for 10 years, but more and more I think using text editor where you have to write everything by yourself would make you smarter :)
Menestret Martin
@mmenestret_twitter
Sep 11 11:15

case class Parser[+E, +A](run: String => Either[E, (String, A)])
  implicit def ParserFunctor[E]: Functor[Parser[E, ?]] =
    new Functor[Parser[E, ?]] {
      override def map[A, B](fa: Parser[E, A])(f: A ⇒ B): Parser[E, B] =
        Parser(string ⇒ fa.run(string).map { case (s, a) => (s, f(a)) })
    }

Leszek Gruchała
@leszekgruchala
Sep 11 11:15
Maybe that’s the reason why all great devs use Emacs or some other text editor :)
Menestret Martin
@mmenestret_twitter
Sep 11 11:15
I have no idea what I did
Just know that it compiles
:D
Alex Henning Johannessen
@ahjohannessen
Sep 11 11:16
Parser(fa.run(_).map(v ⇒ (v._1, f(v._2))))
cverdier
@cverdier
Sep 11 11:17

implicit def ParserFunctor[E]: Functor[Parser[E, ?]] = new Functor[Parser[E, ?]] {
    override def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] =
      Parser(fa.run.andThen {
        case Left(e) => Left(e)
        case Right((s, a)) => Right((s, f(a)))
      })
  }

marianobringas
@marianobringas
Sep 11 11:18
lost sound
Jules Ivanic
@guizmaii
Sep 11 11:20
funny implementation @cverdier !
Menestret Martin
@mmenestret_twitter
Sep 11 11:21
This message was deleted
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 11:22
Return time?
Oleksandra Holubitska
@Vilkina
Sep 11 11:23
Bon appetit
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 11:23
thanks.
Menestret Martin
@mmenestret_twitter
Sep 11 11:23
Enjoy your lunch :)
Sitbon
@nsitbon
Sep 11 11:23
@Vilkina merci ;-) à toi aussi
Oleksandra Holubitska
@Vilkina
Sep 11 11:23
Don't eat mcdonalds)
Bertjan Broeksema
@bbroeksema
Sep 11 11:25

Shouldn't this:

case class FunctorProduct[F[_], G[_], A](l: F[A], r: F[A])

be

case class FunctorProduct[F[_], G[_], A](l: F[A], r: G[A])

???
What's the G[_] type parameter for otherwise?
Jens Hoffmann
@jchoffmann
Sep 11 11:27
i think you're right
Bertjan Broeksema
@bbroeksema
Sep 11 11:31
Lol, if your FunctorProductFunctor implementation doesn't work: make sure to comment out your "manual" definition of the functor trait
It's pretty mind boggling, I can see what it works (e.g. the Functor Product Functor) but I only have very vague intuition of what I'm practically achieving.
Wiem Zine El Abidine
@wi101
Sep 11 11:36
@bbroeksema yes
realfiretiger
@realfiretiger
Sep 11 11:59
When should I think about creating functors? If I work at a bank and I have to make an api that has Client, Account and deposit operation. Do I make any functors?
i mean
what question do I ask myself that has the answer this should be a functor?
Simon Mittermueller
@simonmit
Sep 11 12:01
Hi, I missed some of part of this mornings session. If I followed the conversation correct then we are on Zoom?
Which chapter/ exercise did we stop?
When do we start again after lunch?
strobe
@strobe
Sep 11 12:01
Yeah we at zoom
currently at Functor part - exercises 5 -7
it will continue in about ~30 mins
Simon Mittermueller
@simonmit
Sep 11 12:03
thx.
strobe
@strobe
Sep 11 12:12
@realfiretiger not sure about all cases but you need Functor if you would like have ability to compose different things and map inside resulted nested structure.
see https://typelevel.org/cats/typeclasses/functor.html#functors-for-effect-management - it might be helpfull
realfiretiger
@realfiretiger
Sep 11 12:13
hmm, thx, ill have a look
yeah, i think the last days might clear this up
strobe
@strobe
Sep 11 12:17
https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc#functor-composition
realfiretiger
@realfiretiger
Sep 11 12:20
based on the theory alone, for my example no functors would be needed, if I just have an account, a client and the deposit operation
but i think that might not be the case
Bounkong Khamphousone
@tiboun
Sep 11 12:20
Does case class FunctorProduct[F[_], G[_], A](l: F[A], r: F[A]) should be case class FunctorProduct[F[_], G[_], A](l: F[A], r: G[A]) instead ?
strobe
@strobe
Sep 11 12:22
hm, seems like Extercise 5 == Product, Extercise 6 == Coproduct, Extercise 7 == Natural Composition
marianobringas
@marianobringas
Sep 11 12:22
@realfiretiger this might help: https://www.sderosiaux.com/articles/2018/08/15/types-never-commit-too-early-part1/
think of the implementation of debit or other effectful things you might like to model
strobe
@strobe
Sep 11 12:23
@tiboun yeah
marianobringas
@marianobringas
Sep 11 12:23
like finding clients or accounts, etc
realfiretiger
@realfiretiger
Sep 11 12:26
@marianobringas thanks, its clearer now
Leszek Gruchała
@leszekgruchala
Sep 11 12:30
have you manage to find room closer to the router? :)
Jens Hoffmann
@jchoffmann
Sep 11 12:38
Re. typeclasses - I understand what they are and why we might need them (both thanks to this course), but always struggled with the name as I couldn't connect it to my understanding
Is it because say Eq[A] defines a class of types that respect the equality operation? By adding an instance, I basically add a type to this class of types (type class)?
Leszek Gruchała
@leszekgruchala
Sep 11 12:45
Yes.
marianobringas
@marianobringas
Sep 11 12:46
sound got bad again
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 12:51
Has somebody wrtten down the Account and Operations code?
ioualaalou
@ioualaalou
Sep 11 12:51
kinda hard to see what's written on the board
Alexander Babin
@mudriyjo
Sep 11 12:52

case class USD(amount: BigDecimal)

  case class Amount[A](value: A)
//  Amount[USD](12.22).map()
  case class Account[Id](id: Id)
  case class Client[F[_], A](accounts: F[Account[A]])
  sealed trait Operation[A] {
    def map[B](f: A => B): Operation[B] = map(this, f)
    def zip[B](that: Operation[B]): Operation[(A, B)] = Both(this, that)
  }
  case class Deposit[Id, A](to: Account[Id], amount: Amount[A]) extends Operation[Amount[A]]
  case class Withdraw[Id, A](from: Account[Id], amount: Amount[A]) extends Operation[Amount[A]]
  case class Both[A,B](l: Operation[A], r: Operation[B]) extends Operation[(A,B)]
  case class Map[A,B](op:Operation[A], f: A => B) extends Operation[B]

  val acc = Account(1)
  (Deposit(acc, Amount(12.22)) zip (Withdraw(acc, Amount(12.22)))).map {
    case (deposit, withdraw) => deposit.value - withdraw.value
  }
  def commit[A](op: Operation[A]):A = ???

cverdier
@cverdier
Sep 11 12:52
I'll make a pic this time
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 12:52
Thanks a lot!
cverdier
@cverdier
Sep 11 12:52
thanks Alexander
better than a pic :
zip[A, B](l: F[A], r: F[B]): F[(A, B)]
https://drive.google.com/file/d/1-K2QIkIDdv_lFVZFP2pn2Ehth5sMT7W3/view?usp=sharing
ioualaalou
@ioualaalou
Sep 11 12:59
Thank you @cverdier
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 13:00
Please John, cannot see whats written to the right of zipWith.
Jules Ivanic
@guizmaii
Sep 11 13:01
This message was deleted
cverdier
@cverdier
Sep 11 13:01

def zipOption[A, B](l: Option[A], r: Option[B]): Option[(A, B)] =
    (l, r) match {
      case (Some(a), Some(b)) => Some((a, b))
      case _ => None
    }

  def zipWith[A, B, C](l: Option[A], r: Option[B])(f: ((A, B)) => C): Option[C] =
    zipOption(l, r).map(f)

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 13:01
Beyond ((A,B) =>
Thanks.
Jules Ivanic
@guizmaii
Sep 11 13:01
sorry
Wiem Zine El Abidine
@wi101
Sep 11 13:07
:o
Hey
I can't access
to the session
Jules Ivanic
@guizmaii
Sep 11 13:08
oh
why ?
Alex Henning Johannessen
@ahjohannessen
Sep 11 13:08
(fa: => F[A])(f: => F[A => B]): F[B]
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 13:09
@wi101. Session is fine. Try to reconect.
Jorge
@jaliss
Sep 11 13:09
@ahjohannessen you're going fast :)
Sitbon
@nsitbon
Sep 11 13:10
ab(a)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 13:14
What´s the practical use of Aply?
Alex Henning Johannessen
@ahjohannessen
Sep 11 13:17
@Eduardo-M-Cavalcanti for instance val result = (Option(3) |@| Option(5))(_ + _) // Some(8)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 13:17
Thanks.
Menestret Martin
@mmenestret_twitter
Sep 11 13:17
Being able to "combine" two F[_]'s
Jorge
@jaliss
Sep 11 13:25
yeah, that'd nice
Alexander Babin
@mudriyjo
Sep 11 13:31
_
Bertjan Broeksema
@bbroeksema
Sep 11 13:40

implicit val OptionApplicative: Applicative[Option] =
    new Applicative[Option] {
      def point[A](a: => A): Option[A] = Some(a)

      def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] =
        (fa, f) match {
          case (Some(a), Some(f)) => Some(f(a))
          case _                  => None
        }
    }

Simon Mittermueller
@simonmit
Sep 11 13:44
You may use point(f(a)) instead of Some(f(a))
Merunas
@meras
Sep 11 13:45
good point
Bertjan Broeksema
@bbroeksema
Sep 11 13:51
That's more generic indeed
Jules Ivanic
@guizmaii
Sep 11 13:52

  implicit def ApplicativeParser[E]: Applicative[Parser[E, ?]] =
    new Applicative[Parser[E, ?]] {
      def point[A](a: => A): Parser[E, A] = Parser(input => Right((input, a)))

      def ap[A, B](fa: => Parser[E, A])(f: => Parser[E, A => B]): Parser[E, B] =
        Parser(
          input =>
            f.run(input) match {
              case Left(e) => Left(e)
              case Right((string0, fab)) =>
                fa.run(string0) match {
                  case Left(e)             => Left(e)
                  case Right((string1, a)) => point(fab(a)).run(string1)
                }
            }
        )
    }

you can use point here too :)
Jens Hoffmann
@jchoffmann
Sep 11 13:54
ah a break
Oleksandra Holubitska
@Vilkina
Sep 11 13:55
some tea with cottage cheese :)
and honey
Jens Hoffmann
@jchoffmann
Sep 11 14:05
nice @guizmaii
re. point
Jules Ivanic
@guizmaii
Sep 11 14:05
Meh. not as readable than just with Right
marianobringas
@marianobringas
Sep 11 14:06
anyone has an implementation for ap2 in exercise 9?
Jens Hoffmann
@jchoffmann
Sep 11 14:06
but more generic
Bertjan Broeksema
@bbroeksema
Sep 11 14:06

def ap2[F[_]: Applicative, A, B](fa: F[A], fab: F[A => B]): F[B] =
    zip(fa, fab).map { case (a, f) => f(a) }

Kurt Logan
@kurtlogan
Sep 11 14:06
zip(fa, fab).map { case (a, f) => f(a) }
Bertjan Broeksema
@bbroeksema
Sep 11 14:07
:)
Kurt Logan
@kurtlogan
Sep 11 14:07
snap
Bertjan Broeksema
@bbroeksema
Sep 11 14:07
Mwuhahahaha
marianobringas
@marianobringas
Sep 11 14:07
thx guys
Leszek Gruchała
@leszekgruchala
Sep 11 14:08
@jdegoes can you point us to some application’s source code which uses all those fp rules and type classes in a reasonable way?
So we can see how regular applications can be built pure FP way, not just small snippets of code.
marianobringas
@marianobringas
Sep 11 14:08
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwjKwKKTkLPdAhWK5oMKHZSsC8wQtwIwAHoECAUQAQ&url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DsxudIMiOo68&usg=AOvVaw25qtFMeZbRxtVbFJbeHvQE
Leszek Gruchała
@leszekgruchala
Sep 11 14:09
yes, I watched that. I meant some “regular" application like web application for example :)
maybe there are some open source projects out there to take a look around
lmeyer
@LeonardMeyer
Sep 11 14:13
There's always scala petstore
https://github.com/pauljamescleary/scala-pet-store
Jules Ivanic
@guizmaii
Sep 11 14:13
:+1:
https://leanpub.com/fpmortals
Leszek Gruchała
@leszekgruchala
Sep 11 14:14
thanks
realfiretiger
@realfiretiger
Sep 11 14:14
yay
ಠ_ರೃ
@mrt181_twitter
Sep 11 14:16
popcorn
Amine SAGAAMA
@AmineSagaama
Sep 11 14:16
lightbend engineer hhhhhh :D
ಠ_ರೃ
@mrt181_twitter
Sep 11 14:16
:smiel:
:smile:
Jules Ivanic
@guizmaii
Sep 11 14:16

    popcorn

:smile:
Merunas
@meras
Sep 11 14:26

  implicit val OptionMonad = new Monad[Option] {
    def point[A](a: => A): Option[A] = Some(a)
    def bind[A, B](fa: Option[A])(f: A => Option[B]): Option[B] =
      fa match  {
        case None    => None
        case Some(a) => f(a)
      }
  }

Wiem Zine El Abidine
@wi101
Sep 11 14:41

  override def bind[A, B](fa: Parser[E, A])(f: A => Parser[E, B]): Parser[E, B] = Parser(input =>
    fa.run(input) match {
      case Left(e) => Left(e)
      case Right((input, a)) => f(a).run(input) match {
        case Left(e) => Left(e)
        case Right((input, b)) => Right((input, b))
      }
    }
    )

Menestret Martin
@mmenestret_twitter
Sep 11 14:43
@wi101 I think that should suffice:

override def bind[A, B](fa: Parser[E, A])(
        f: A ⇒ Parser[E, B]): Parser[E, B] =
      Parser {
        fa.run(_) match {
          case Left(value) ⇒ Left(value)
          case Right((str, a)) ⇒ f(a).run(str)
        }
      }

Bertjan Broeksema
@bbroeksema
Sep 11 14:43
@wi101 the additional match is not required as you just return whatever you matches
Menestret Martin
@mmenestret_twitter
Sep 11 14:44
yep
Wiem Zine El Abidine
@wi101
Sep 11 14:46
you're right
cverdier
@cverdier
Sep 11 14:53
Functor - Gives us the power to map values produced by programs without changing their structure
Apply - Adds the power to combine two programs into one by combining their values
Applicative - Adds the power to produce a 'pure' program that produces the given result
Monad - Adds the power to feed the result of one program into a function, which can look at the runtime value and return a new program, which is used to produce the result of the bind
Leszek Gruchała
@leszekgruchala
Sep 11 14:54
wonderful
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 14:54
point for BTree, somenone has done it?
Alex Henning Johannessen
@ahjohannessen
Sep 11 14:54
def point[A](a: ⇒ A): BTree[A] = Leaf(a)
Jens Hoffmann
@jchoffmann
Sep 11 14:54
it's just leaf
Simon Mittermueller
@simonmit
Sep 11 14:54
lift
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 14:54
Sure!
Thanks.
Merunas
@meras
Sep 11 14:59
was it ```

case Fork(l, r) => Fork(bind(l)(f), bind(r)(f))

on the fork ?
Jules Ivanic
@guizmaii
Sep 11 15:00
yes
ಠ_ರೃ
@mrt181_twitter
Sep 11 15:00
:+1:
Merunas
@meras
Sep 11 15:00
awesome
https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Foldable.scala#L9
Sitbon
@nsitbon
Sep 11 15:06
f(a,z)
Merunas
@meras
Sep 11 15:08

  implicit val FoldableBTree: Foldable[BTree] =
    new Foldable[BTree] {
      def foldMap[A, B](fa: BTree[A])(f: A => B)(implicit F: scalaz.Monoid[B]): B =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => foldMap(l)(f) |+| foldMap(r)(f)
        }

      def foldRight[A, B](fa: BTree[A],z: => B)(f: (A, => B) => B): B =
        fa match {
          case Leaf(a) => f(a, z)
          case Fork(l, r) =>
            foldRight(l, foldRight(r,z)(f))(f)

        }
    }

ಠ_ರೃ
@mrt181_twitter
Sep 11 15:10
are all of them stack safe?
Jules Ivanic
@guizmaii
Sep 11 15:10
not our implementations
ಠ_ರೃ
@mrt181_twitter
Sep 11 15:10
the scalaz ones
Merunas
@meras
Sep 11 15:10
not a chance :)
Alex Henning Johannessen
@ahjohannessen
Sep 11 15:13
zero
ಠ_ರೃ
@mrt181_twitter
Sep 11 15:13
f(fa(F.zero))?
Jorge
@jaliss
Sep 11 15:18
I'm doing great then :)
Leszek Gruchała
@leszekgruchala
Sep 11 15:18
hahaha
realfiretiger
@realfiretiger
Sep 11 15:18
:))
Maciej Kowalski
@fkowal
Sep 11 15:18
:P
Jules Ivanic
@guizmaii
Sep 11 15:19
f(a).map(Leaf.apply)
Jorge
@jaliss
Sep 11 15:20
f(a).map(Leaf(_))
works too
simondumas
@simondumas
Sep 11 15:25
/** Alias for|@|*/ final def ⊛[B](fb: F[B]): ApplicativeBuilder[F, A, B] = |@|(fb)
Another fun alias
Menestret Martin
@mmenestret_twitter
Sep 11 15:27
Ascii ftw
This message was deleted
Jules Ivanic
@guizmaii
Sep 11 15:28

    new Traverse[BTree] {
      override def traverseImpl[F[_], A, B](fa: BTree[A])(f: A => F[B])(implicit F: Applicative[F]): F[BTree[B]] =
        fa match {
          case Leaf(a) => f(a).map(Leaf.apply)
          case Fork(left, right) =>
            val lg = traverseImpl(left)(f)
            val rg = traverseImpl(right)(f)
            (lg ⊛ rg)(Fork(_, _))
        }
    }

(with the alias. Super ugly)
Menestret Martin
@mmenestret_twitter
Sep 11 15:28
Game of FP
Jules Ivanic
@guizmaii
Sep 11 15:29
https://www.youtube.com/watch?v=VCov3HI4jNk
TRAVERSE ALL THE THINGSSS ! :smile:
ಠ_ರೃ
@mrt181_twitter
Sep 11 15:29
:smile:
Menestret Martin
@mmenestret_twitter
Sep 11 15:29
That talk is great :)
Jules Ivanic
@guizmaii
Sep 11 15:29
traverse is awesome, folks !
Artsiom Miklushou
@mikla
Sep 11 15:31
traverse’em all!
aureliesalmon
@aureliesalmon
Sep 11 15:33

    /** Alias for|@|*/ final def ⊛[B](fb: F[B]): ApplicativeBuilder[F, A, B] = |@|(fb) but why?

ಠ_ರೃ
@mrt181_twitter
Sep 11 15:33
https://i.imgflip.com/2hp4dc.jpg
Menestret Martin
@mmenestret_twitter
Sep 11 15:34
Ahah
nice photoshoping job there
ಠ_ರೃ
@mrt181_twitter
Sep 11 15:34
throne
Jules Ivanic
@guizmaii
Sep 11 15:34
:D
is it John ?
:D
ಠ_ರೃ
@mrt181_twitter
Sep 11 15:35
yes
Amine SAGAAMA
@AmineSagaama
Sep 11 15:35

 type Future[A] = List[A]
  type Response = String
  def collectAllAPIs(results: BTree[Future[Response]]): Future[BTree[Response]] =
    results.sequence

Menestret Martin
@mmenestret_twitter
Sep 11 15:36
:expressionless: :gun:
strobe
@strobe
Sep 11 15:37
does Traverse has any special laws?
Alex Henning Johannessen
@ahjohannessen
Sep 11 15:40

  trait TraverseLaw extends FunctorLaw {
    /** Traversal through the [[scalaz.Id]] effect is equivalent to `Functor#map` */
    def identityTraverse[A, B](fa: F[A], f: A => B)(implicit FB: Equal[F[B]]): Boolean = {
      FB.equal(traverse[Id, A, B](fa)(f), map(fa)(f))
    }

    /** Two sequentially dependent effects can be fused into one, their composition */
    def sequentialFusion[N[_], M[_], A, B, C](fa: F[A], amb: A => M[B], bnc: B => N[C])
                                               (implicit N: Applicative[N], M: Applicative[M], MN: Equal[M[N[F[C]]]]): Boolean = {
      type MN[A] = M[N[A]]
      val t1: MN[F[C]] = M.map(traverse[M, A, B](fa)(amb))(fb => traverse[N, B, C](fb)(bnc))
      val t2: MN[F[C]] = traverse[MN, A, C](fa)(a => M.map(amb(a))(bnc))(M compose N)
      MN.equal(t1, t2)
    }

    /** Traversal with the `point` function is the same as applying the `point` function directly */
    def purity[G[_], A](fa: F[A])(implicit G: Applicative[G], GFA: Equal[G[F[A]]]): Boolean =
      GFA.equal(traverse[G, A, A](fa)(G.point[A](_)), G.point(fa))

    /**
     * @param nat A natural transformation from `M` to `N` for which these properties hold:
     *            `(a: A) => nat(Applicative[M].point[A](a)) === Applicative[N].point[A](a)`
     *            `(f: M[A => B], ma: M[A]) => nat(Applicative[M].ap(ma)(f)) === Applicative[N].ap(nat(ma))(nat(f))`
     */
    def naturality[N[_], M[_], A](nat: (M ~> N))
                                 (fma: F[M[A]])
                                 (implicit N: Applicative[N], M: Applicative[M], NFA: Equal[N[F[A]]]): Boolean = {
      val n1: N[F[A]] = nat[F[A]](sequence[M, A](fma))
      val n2: N[F[A]] = sequence[N, A](map(fma)(ma => nat(ma)))
      NFA.equal(n1, n2)
    }

    /** Two independent effects can be fused into a single effect, their product. */
    def parallelFusion[N[_], M[_], A, B](fa: F[A], amb: A => M[B], anb: A => N[B])
                                        (implicit N: Applicative[N], M: Applicative[M], MN: Equal[(M[F[B]], N[F[B]])]): Boolean = {
      type MN[A] = (M[A], N[A])
      val t1: MN[F[B]] = (traverse[M, A, B](fa)(amb), traverse[N, A, B](fa)(anb))
      val t2: MN[F[B]] = traverse[MN, A, B](fa)(a => (amb(a), anb(a)))(M product N)
      MN.equal(t1, t2)
    }
  }

:trollface:
marianobringas
@marianobringas
Sep 11 15:41
Sound started breaking again
Jules Ivanic
@guizmaii
Sep 11 15:41
yep. It’s getting back
strobe
@strobe
Sep 11 15:41
oh))
Alex Henning Johannessen
@ahjohannessen
Sep 11 15:41
That's from scalaz :)
strobe
@strobe
Sep 11 15:41
thanks
Alexander Babin
@mudriyjo
Sep 11 15:47
copy copy copy
Jorge
@jaliss
Sep 11 15:48
sbt is surprised too
ಠ_ರೃ
@mrt181_twitter
Sep 11 15:49
Narrator: John knew from the beginning it would work
Jorge
@jaliss
Sep 11 15:49
haha
Menestret Martin
@mmenestret_twitter
Sep 11 15:49
:D
aureliesalmon
@aureliesalmon
Sep 11 15:49
^^
Alex Henning Johannessen
@ahjohannessen
Sep 11 15:49
:grin:
Menestret Martin
@mmenestret_twitter
Sep 11 15:50
because scalac is afraid of him and would fix it for him even if it was wrong (which is never the case)
Oleksandra Holubitska
@Vilkina
Sep 11 15:51
why cookie? I'm getting hungry after 'cookie' and 'syntax sugar' words. Especially with a 'cookie'.
Jorge
@jaliss
Sep 11 15:51
lol
Menestret Martin
@mmenestret_twitter
Sep 11 16:03
I have to trust the types there... the code is not obvious :D
Jules Ivanic
@guizmaii
Sep 11 16:04
the types never lie :D
Jorge
@jaliss
Sep 11 16:04
intellij got confused :)
Menestret Martin
@mmenestret_twitter
Sep 11 16:04
b => s => s was working @guizmaii
:D
strobe
@strobe
Sep 11 16:06
could someone share >>> implementation code?
Maciej Kowalski
@fkowal
Sep 11 16:07

def >>> [B](that: Lens[A, B]): Lens[S, B] =
      Lens(
        self.get.andThen(that.get),
        set = (b: B) => (s: S) =>
          self.set(that.set(b)(self.get(s)))(s)
      )

strobe
@strobe
Sep 11 16:07
thanks
Jules Ivanic
@guizmaii
Sep 11 16:07

  final case class Lens[S, A](get: S => A, set: A => S => S) { self =>
    final def >>>[B](that: Lens[A, B]): Lens[S, B] =
      Lens(
        get = (s: S) => that.get(self.get(s)),
        set = (b: B) => (s: S) => self.set(that.set(b)(self.get(s)))(s)
      )

    final def update(f: A => A): S => S = (s: S) => set(f(self.get(s)))(s)
  }

Alexander Babin
@mudriyjo
Sep 11 16:07

case class Lens[S, A](get: S => A, set: A => (S => S)) { self =>
    def >>> [B](that: Lens[A, B]): Lens[S,B] = Lens[S, B](
      get = (s: S) => that.get(self.get(s)),
      set = (b: B) => (s: S) => self.set(that.set(b)(self.get(s)))(s)
    )

    final def update(f: A => A): S => S = (s: S) => self.set(f(self.get(s)))(s)
  }

John A. De Goes
@jdegoes
Sep 11 16:07

  sealed trait Country
  case object USA extends Country
  case object UK extends Country
  case object Poland extends Country

  case class Org(name: String, address: Address, site: List[Site])
  case class Address(
    number: String,
    street: String,
    postalCode: String,
    country: Country)
  case class Site(
    manager: Employee,
    address: Address,
    employees: Set[Employee])
  case class Employee(
    name: String,
    dob: java.time.Instant,
    salary: BigDecimal,
    address: Address)

Jules Ivanic
@guizmaii
Sep 11 16:07
self.get.andThen(that.get) nice one @fkowal
ioualaalou
@ioualaalou
Sep 11 16:10
wasn't the point of this to not use copy anymore ?
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 16:12
nested copys
to remove copy nesting
Menestret Martin
@mmenestret_twitter
Sep 11 16:13
@ioualaalou you use copy on 1 level, and then you can just compose lenses together to avoid nesting copies
ioualaalou
@ioualaalou
Sep 11 16:14
alright, so no prob using it individually
Amine SAGAAMA
@AmineSagaama
Sep 11 16:14
I hope there will be an easier way than optics in order to avoid copy
Jorge
@jaliss
Sep 11 16:14
audio is failing ....
Merunas
@meras
Sep 11 16:15
can you paste object Org
Menestret Martin
@mmenestret_twitter
Sep 11 16:15
Site.manager >>> Employee.salary so you avoid copies and get an clear syntax
Jorge
@jaliss
Sep 11 16:15
I think it would be better to just have copy +pasted the final version
Menestret Martin
@mmenestret_twitter
Sep 11 16:15
To get a site's manager's salary
without having to _.copy(_.copy(...)
Or even Org.site >>> Site.manager >>> Employee.salary now that site is not a List anymore :p
Alex Henning Johannessen
@ahjohannessen
Sep 11 16:18
this John:

    org.copy(
      site = org.site.copy(
        manager = org.site.manager.copy(
          salary = org.site.manager.salary * 0.95
      )))

Jens Hoffmann
@jchoffmann
Sep 11 16:20
connection broken?
mhdkassir
@mhdkassir
Sep 11 16:20
sound failing ?
Jorge
@jaliss
Sep 11 16:20
yeah
ioualaalou
@ioualaalou
Sep 11 16:20
rip the audio
Jules Ivanic
@guizmaii
Sep 11 16:20
broken
Jorge
@jaliss
Sep 11 16:20
no audio or video on my end
Leszek Gruchała
@leszekgruchala
Sep 11 16:20
yes
marianobringas
@marianobringas
Sep 11 16:20
screen froze too
Leszek Gruchała
@leszekgruchala
Sep 11 16:20
and boom
Jules Ivanic
@guizmaii
Sep 11 16:20
it’s reconnecting
Bounkong Khamphousone
@tiboun
Sep 11 16:20
seems that we lost connection
Jorge
@jaliss
Sep 11 16:20
:(
Jens Hoffmann
@jchoffmann
Sep 11 16:20
too many lenses error
Bertjan Broeksema
@bbroeksema
Sep 11 16:20
At the moment of truth! Why you hate us technology!
jchoffmann @jchoffmann shakes fist at the sky
Artsiom Miklushou
@mikla
Sep 11 16:21
John is trying to reconnect...
ioualaalou
@ioualaalou
Sep 11 16:21
Thank you @mmenestret_twitter I was just wondering if there wasn't an easier way to use Lens without having to call one with a copy in each object.
Jorge
@jaliss
Sep 11 16:22
that looks cool.
Alex Henning Johannessen
@ahjohannessen
Sep 11 16:22
@jaliss Yep, very useful :)
Jens Hoffmann
@jchoffmann
Sep 11 16:23
it <??> the concept of a field - what was it?
Menestret Martin
@mmenestret_twitter
Sep 11 16:23
reify
Jens Hoffmann
@jchoffmann
Sep 11 16:23
thanks
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 16:24
I hope John paste code here :)
Jorge
@jaliss
Sep 11 16:24
+1
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 16:24
At the end.
What is the difference between Lens and Prism?
Jens Hoffmann
@jchoffmann
Sep 11 16:29
can someone c/p prism
Merunas
@meras
Sep 11 16:29
lenses you use for product types
prism for sum types
Alex Henning Johannessen
@ahjohannessen
Sep 11 16:29

  final case class Prism[S, A](
    get: S ⇒ Option[A],
    set: A ⇒ S
  ) { self ⇒

    def >>>[B](that: Prism[A, B]): Prism[S, B] =
      Prism(
        get = (s: S) ⇒ self.get(s).flatMap(that.get),
        set = self.set.compose(that.set)
      )
  }

Jules Ivanic
@guizmaii
Sep 11 16:29

  final case class Prism[S, A](get: S => Option[A], set: A => S) { self =>
    def >>>[B](that: Prism[A, B]): Prism[S, B] =
      Prism[S, B](
        get = (s: S) => self.get(s).flatMap(that.get),
        set = that.set.andThen(self.set)
      )
  }

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 16:29
Thanks.
Jens Hoffmann
@jchoffmann
Sep 11 16:29
thanks
Amine SAGAAMA
@AmineSagaama
Sep 11 16:33

//
  //EXERCISE 1
  //
  final case class Lens[S, A](get: S => A, set: A => S => S) {
    self =>
    final def >>>[B](that: Lens[A, B]): Lens[S, B] =
      Lens(
        get = (s: S) => that.get(self.get(s)),
        set = (b: B) => (s: S) => self.set(that.set(b)(self.get(s)))(s)
      )

    final def update(f: A => A): S => S = (s: S) => set(f(self.get(s)))(s)
  }

  //
  // EXERCISE 2
  //
  val org2_lens: Org =
  (Org.site >>> Site.manager >>> Employee.salary).
    update(_ * 0.95)(org)

  final case class Prism[S, A](
                                get: S => Option[A],
                                set: A => S
                              ) {
    self =>
    def >>>[B](that: Prism[A, B]): Prism[S, B] =
      Prism[S, B](
        get = (s: S) => self.get(s).flatMap(that.get),
        set = self.set.compose(that.set)
      )
  }

  //
  // EXERCISE 4
  //
  def _Left[A, B]: Prism[Either[A, B], A] =
    Prism[Either[A, B], A]({
      case Left(a) => Some(a)
      case _ => None
    }, Left(_))

  def _Right[A, B]: Prism[Either[A, B], B] =
    Prism[Either[A, B], B]({
      case Right(b) => Some(b)
      case _ => None
    }, Right(_))

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 11 16:33
Great!
Merunas
@meras
Sep 11 16:34
👍
Rob Vermazeren
@RobVermazeren
Sep 11 16:34
Typing stress...
Menestret Martin
@mmenestret_twitter
Sep 11 16:38

object Country {
    def value(c: Country): Prism[Country, Unit] =
      Prism({
        case `c` ⇒ Some(())
        case _ ⇒ None
      }, _ ⇒ c)
  }

Jens Hoffmann
@jchoffmann
Sep 11 16:40
many thanks
ಠ_ರೃ
@mrt181_twitter
Sep 11 16:40
cu
aureliesalmon
@aureliesalmon
Sep 11 16:41
Have a nice evening! Thanks
kenBayama
@kenBayama
Sep 11 16:41
thanks a lot
realfiretiger
@realfiretiger
Sep 11 16:41

  great talk, thanks

Rob Vermazeren
@RobVermazeren
Sep 11 16:41
Thanks
Jorge
@jaliss
Sep 11 16:41
bye everybody
Alex Henning Johannessen
@ahjohannessen
Sep 11 16:42
see you tomorrow :)
Jorge
@jaliss
Sep 11 16:42
time for a nap ;-)
ioualaalou
@ioualaalou
Sep 11 16:45
Bye
Leszek Gruchała
@leszekgruchala
Sep 11 16:45
bye all
Wiem Zine El Abidine
@wi101
Sep 11 16:46
A lot of information, it was interesting and looking forward for tomorrow :) Thanks @jdegoes !
bye all
strobe
@strobe
Sep 11 16:47
Thanks, it was great session.
bye
Amine SAGAAMA
@AmineSagaama
Sep 11 16:48
thanks !
Oleksandra Holubitska
@Vilkina
Sep 11 16:50
Thanks :) It was a good day and I'm not afraid of monads and monoids anymore)
Jens Hoffmann
@jchoffmann
Sep 11 16:53
When we get back to it tomorrow, could we quickly go through an example with Prisms?
John A. De Goes
@jdegoes
Sep 11 16:57
@wi101 You're welcome, glad you enjoyed it!
@strobe Thanks! A lot to pack in, but we got through it.
@Vilkina It's great to hear that!
@jchoffmann Sure, just remind me tomorrow and we'll do an example with prisms.
Jens Hoffmann
@jchoffmann
Sep 11 17:09
sure, also thanks for great two days
Merunas
@meras
Sep 11 17:23
anyone up for dinner at the Moulin Inn tonight ? (https://www.moulinhotel.co.uk)
cverdier
@cverdier
Sep 11 17:24
yes
Merunas
@meras
Sep 11 17:24
short walk out from the main street
Oleksandra Holubitska
@Vilkina
Sep 11 17:25
Don't drink too much :)
Merunas
@meras
Sep 11 17:27
well last night went well, so we've a proven track record now
does 8PM work for everyone ?
Jules Ivanic
@guizmaii
Sep 11 17:36
✋ for the Moulin
cverdier
@cverdier
Sep 11 17:37
go for 8pm
drinks are on me, it's my birthday !
Merunas
@meras
Sep 11 17:40
all 10 rounds? 😁
Kurt Logan
@kurtlogan
Sep 11 17:40
I'm up for the moulin
Only 10 rounds?
cverdier
@cverdier
Sep 11 17:42
i'm counting on your will to learn IO tomorrow ;)
Artsiom Miklushou
@mikla
Sep 11 17:44
I'm in
Eric Nelson
@enelson
Sep 11 17:44
@meras I'm in
Merunas
@meras
Sep 11 17:45
👍
Eric Nelson
@enelson
Sep 11 17:45
@cverdier Does IRN BRU count? :)
cverdier
@cverdier
Sep 11 17:49
of course, or whatever they give you for that order ;)
Merunas
@meras
Sep 11 17:49
ha
Eric Nelson
@enelson
Sep 11 17:52
ha ha
Eric Nelson
@enelson
Sep 11 18:10
For those heading up there, what time are you leaving? And you want to meet here and walk up as a group?
cverdier
@cverdier
Sep 11 18:14
19h40 / 7:40PM in front of Davidson Chemists on the main road ?
Merunas
@meras
Sep 11 18:14
19:45
Jules Ivanic
@guizmaii
Sep 11 18:15
Ok for 19h45
Merunas
@meras
Sep 11 18:16
the Chemist place works @cverdier
Eric Nelson
@enelson
Sep 11 18:16
19h45 it is
(And yes, this American knows that means 7:45) LOL
Merunas
@meras
Sep 11 18:18
12:45 MDT it is
@jdegoes you plan on joining us?
Eric Nelson
@enelson
Sep 11 18:37
@jdegoes Buhler.....Buhler......
:)
Merunas
@meras
Sep 11 18:48
The 5 of us are heading there now, feel free to join if anyone else wants to
Artsiom Miklushou
@mikla
Sep 11 18:50
FP army )
Merunas
@meras
Sep 11 18:55
Purebois
John A. De Goes
@jdegoes
Sep 11 19:43
Damn, sorry to miss Moulin Inn.
I had to get a workout in...
_

John A. De Goes/functional-scala

Alexander Babin
@mudriyjo
Sep 12 07:37
Question is not on topic, who uses which laptop (for comfort work with IDE, screen size)
Bertjan Broeksema
@bbroeksema
Sep 12 07:41
Morning @jdegoes , could you on start briefly go over apply. You discussed zip in this context, but it's not clear to me what it's relation to ap is.
Rob Vermazeren
@RobVermazeren
Sep 12 07:43
Good morning
Merunas
@meras
Sep 12 07:45
o/
Menestret Martin
@mmenestret_twitter
Sep 12 07:46
Hi there :)
@bbroeksema I would like too ! I have doubts about the fish operator :s
About ap / zip I think ap is the traditionnal operation for apply, except it is harder to grasp than zip but one can be written thanks to the other, I guess thats why we saw zip
Alex Henning Johannessen
@ahjohannessen
Sep 12 07:49
Good morning :)
aureliesalmon
@aureliesalmon
Sep 12 07:49
Good morning!
Bounkong Khamphousone
@tiboun
Sep 12 07:51
Good morning!
Menestret Martin
@mmenestret_twitter
Sep 12 07:51
Hi :wave:
elarib
@elarib
Sep 12 07:52
Good morning everyone :)
ಠ_ರೃ
@mrt181_twitter
Sep 12 07:53
are we going to recap Prism from yesterday?
Jens Hoffmann
@jchoffmann
Sep 12 07:54
yeah I asked for this yesterday. i just couldn't see its usefulness / application
for Lens it is clear
Leszek Gruchała
@leszekgruchala
Sep 12 07:54
Hello :)
Jens Hoffmann
@jchoffmann
Sep 12 07:54
With Lenses there is clarity :)
Alex Henning Johannessen
@ahjohannessen
Sep 12 07:55
@jdegoes Are you going to talk about tagless final (algebra, modules and interpreters) during the course? :)
Menestret Martin
@mmenestret_twitter
Sep 12 07:56
I asked him a few days ago and... yes :smiling_imp:
Alex Henning Johannessen
@ahjohannessen
Sep 12 07:56
:metal:
realfiretiger
@realfiretiger
Sep 12 07:56
distortions again
Menestret Martin
@mmenestret_twitter
Sep 12 07:57
Lost audio :(
Alexander Babin
@mudriyjo
Sep 12 07:57
no sound no video
Bounkong Khamphousone
@tiboun
Sep 12 07:57
I don't hear anything
aureliesalmon
@aureliesalmon
Sep 12 07:57
lost sound and audio too
Bounkong Khamphousone
@tiboun
Sep 12 07:57
same
aureliesalmon
@aureliesalmon
Sep 12 07:58
(audio back)
This message was deleted
Bounkong Khamphousone
@tiboun
Sep 12 07:58
everything's back
lmeyer
@LeonardMeyer
Sep 12 07:59
I cannot join the meeting. My zoom client is telling me it has not started. Am I the only one ?
Jens Hoffmann
@jchoffmann
Sep 12 07:59
sure you use day 3's link?
aureliesalmon
@aureliesalmon
Sep 12 07:59
boun, martin and i could
yep
id:
861 509 680
lmeyer
@LeonardMeyer
Sep 12 07:59
Right thanks
Oleksandra Holubitska
@Vilkina
Sep 12 08:00
Hi
Can somebody give me a link?
Alexander Babin
@mudriyjo
Sep 12 08:01
https://zoom.us/j/861509680
simondumas
@simondumas
Sep 12 08:02
Sound is bad here too
Leszek Gruchała
@leszekgruchala
Sep 12 08:02
@jdegoes are you on hotel’s wifi? We’re losing audio very often.
Amine SAGAAMA
@AmineSagaama
Sep 12 08:04
yes we're losing the audio
Jules Ivanic
@guizmaii
Sep 12 08:04
how is the sound now ?
Jorge
@jaliss
Sep 12 08:05
waiting to get access ....
Leszek Gruchała
@leszekgruchala
Sep 12 08:06
last 1 min sound is fine
@jaliss make sure you picked the valid link, we’re here
Jorge
@jaliss
Sep 12 08:07
using https://zoom.us/j/861509680 @leszekgruchala
I'm getting the "host will let you in soon" message
will try closing and clicking it again.
Leszek Gruchała
@leszekgruchala
Sep 12 08:08
looks correct
Jorge
@jaliss
Sep 12 08:08
ok, it worked now
Leszek Gruchała
@leszekgruchala
Sep 12 08:08
@guizmaii still losing audio from time to time :/
this is so frustrating
Jules Ivanic
@guizmaii
Sep 12 08:11
are you the only one to have these sound problems ?
how is the audio for others ?
Leszek Gruchała
@leszekgruchala
Sep 12 08:11
no idea, of course once I wrote it the sound was fine
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:11
fine so far
Leszek Gruchała
@leszekgruchala
Sep 12 08:11
so fine after that
Jorge
@jaliss
Sep 12 08:11
good so far
Alexander Babin
@mudriyjo
Sep 12 08:12
fine
Menestret Martin
@mmenestret_twitter
Sep 12 08:14
Small connection losses from time to time
but for now, it's ok
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:15
any resources on that to study further?
Alex Henning Johannessen
@ahjohannessen
Sep 12 08:15
sound is distorting
realfiretiger
@realfiretiger
Sep 12 08:16
@jdegoes so in a zip (future1, future2) we first evaluate them both then compose them so even if the first fails i still evaluate the second. whereas in a flatMap i dont evaluate the second if the first fails
?
Leszek Gruchała
@leszekgruchala
Sep 12 08:17
Monocle documentation looks good http://julien-truffaut.github.io/Monocle/optics/prism.html
Jens Hoffmann
@jchoffmann
Sep 12 08:17
thx
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:17
:+1:
Menestret Martin
@mmenestret_twitter
Sep 12 08:17
@realfiretiger since Future is monadish, I think zip is then implemented with flatMap
Jens Hoffmann
@jchoffmann
Sep 12 08:19
@mmenestret_twitter I guess that's true then in general right? If you have a monad (flatMap) then you have a canonical zip?
mhdkassir
@mhdkassir
Sep 12 08:20
why does the set of Prism is A => S whereas the set of Lens is rather A => (S => S )
Menestret Martin
@mmenestret_twitter
Sep 12 08:20
Yes thats what I understood :)
Leszek Gruchała
@leszekgruchala
Sep 12 08:20
Lenses are used for product types, Prisms are used for sum types - prism composes with Lenses
Sitbon
@nsitbon
Sep 12 08:22
good news
Jens Hoffmann
@jchoffmann
Sep 12 08:22
wow that's nice
Bounkong Khamphousone
@tiboun
Sep 12 08:22
Thanks @jdegoes
Jens Hoffmann
@jchoffmann
Sep 12 08:22
thanks @jdegoes
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:22
@jdegoes cool, thank you
Menestret Martin
@mmenestret_twitter
Sep 12 08:22
:o thanks
realfiretiger
@realfiretiger
Sep 12 08:22
great thanks :)
Jorge
@jaliss
Sep 12 08:22
that's great, thx @jdegoes
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:22
can you point us at further resources which explain zip and ap?
Alexander Babin
@mudriyjo
Sep 12 08:23
thx
Leszek Gruchała
@leszekgruchala
Sep 12 08:23
Great! now I need to find more vacation :)
marianobringas
@marianobringas
Sep 12 08:23
thx @jdegoes !
Menestret Martin
@mmenestret_twitter
Sep 12 08:24
@jdegoes just a quick question about day 1 (sorry for the brain lag), could you please tell me again how to model an ADT with a sum type of product types where the composing product types shares common fields (typically modeled with inheritance in OOP)
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:25
@mmenestret_twitter http://degoes.net/articles/fp-vs-oop-part1
Menestret Martin
@mmenestret_twitter
Sep 12 08:27
thx :) I forgot about that one
Alex Henning Johannessen
@ahjohannessen
Sep 12 08:28
John, could you mention usage of: def doX[S](lens: Lens[S, Cfg]) = ???
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:32
@jdegoes in fpmortals sam says we shouldn;t use sealed trait but sealed abstract class instead to mode yype classe
because better binary compatibiliy and discouraging trait mixing
Jorge
@jaliss
Sep 12 08:34
a sealed trait can only be extended in the same file it was defined ... so you can control trait mixing.
Menestret Martin
@mmenestret_twitter
Sep 12 08:36
@mrt181_twitter what do you think about fp for mortal ?
(didn't read it yet, waiting patiently on my read list :smiley:)
ಠ_ರೃ
@mrt181_twitter
Sep 12 08:37
@mmenestret_twitter like it so far but only read until chapter 4
Jorge
@jaliss
Sep 12 08:42
cool!
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 08:43
John please paste thiscode or save it!
Jens Hoffmann
@jchoffmann
Sep 12 08:43
can someone c/p please?
Alex Henning Johannessen
@ahjohannessen
Sep 12 08:43
Thanks a lot for that example @jdegoes
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 08:43
Thanks!
John A. De Goes
@jdegoes
Sep 12 08:43



  case class Component1[S](lens: Lens[S, Component1.State]) {
    def run[S](state: S): (S, Boolean) = ???
  }
  object Component1 {
    case class Config(server: String, port: Int)
    case class State(config: Config)
  }
  case class Component2[S](lens: Lens[S, Component2.State]) {
    def run[S](state: S): (S, Int) = ???
  }
  object Component2 {
    case class Config(loggingDirectory: String)
    case class State(config: Config)
  }
  case class MyAppState(
    c1: Component1.State, 
    c2: Component2.State
  )
  object MyAppState {
    val c1: Lens[MyAppState, Component1.State] = ???
    val c2: Lens[MyAppState, Component2.State] = ???
  }
  val c1 : Component1[MyAppState] = Component1(MyAppState.c1)
  val c2 : Component2[MyAppState] = Component2(MyAppState.c2)

Jorge
@jaliss
Sep 12 08:52
So Applicative extends Apply by adding point. Did I get that right?
Sitbon
@nsitbon
Sep 12 08:52
@jaliss correct
Jorge
@jaliss
Sep 12 08:52
thx
Oleksandra Holubitska
@Vilkina
Sep 12 08:57
Can we use ZipOpt instead of flatMap?
in Reader
ಠ_ರೃ
@mrt181_twitter
Sep 12 09:07
exceptions
gotos
Jens Hoffmann
@jchoffmann
Sep 12 09:28
it worked without param

def readLine: Program[String] = ReadLine(point)

Merunas
@meras
Sep 12 09:30
is this ok

     case Program.Return(value) =>
        Program.Return(() => f(value()))

Alexander Babin
@mudriyjo
Sep 12 09:33
smb c/p new signature
of Return
Jens Hoffmann
@jchoffmann
Sep 12 09:34

final case class Return[A](value: () => A) extends Program[A]

Alexander Babin
@mudriyjo
Sep 12 09:34
thx
Merunas
@meras
Sep 12 09:35
can you copy paste the new Program ?
Alexander Babin
@mudriyjo
Sep 12 09:36

  sealed trait Program[A] { self =>
    final def map[B](f: A => B): Program[B] =
      self match {
        case Program.ReadLine(next) => Program.ReadLine(input => next(input).map(f))
        case Program.WriteLine(line, next) => Program.WriteLine(line, next.map(f))
        case Program.Return(value) => Program.Return(() => f(value()))
      }

    final def flatMap[B](f: A => Program[B]): Program[B] =
      self match {
        case Program.ReadLine(next) => Program.ReadLine(input => next(input).flatMap(f))
        case Program.WriteLine(line, next) => Program.WriteLine(line, next.flatMap(f))
        case Program.Return(value) => f(value())
      }
  }

  object Program {
    final case class ReadLine[A](next: String => Program[A]) extends Program[A]
    final case class WriteLine[A](line: String, next: Program[A]) extends Program[A]
    final case class Return[A](value: () => A) extends Program[A]

    def readLine: Program[String] = ReadLine(point)
    def writeLine(line: String): Program[Unit] = WriteLine(line, Return(() => ()))
    def point[A](a: A): Program[A] = Return(() => a)
  }

Merunas
@meras
Sep 12 09:37
thanks
aureliesalmon
@aureliesalmon
Sep 12 09:41
Oh so i understand better what you said in FP to the Max video about for-comprehension and tail recursion. Thanks!
Jorge
@jaliss
Sep 12 09:42
Is this the plugin you referred to @jdegoes ? https://github.com/oleg-py/better-monadic-for
Menestret Martin
@mmenestret_twitter
Sep 12 09:45
Did John just say .cast ? :smiling_imp:
Jules Ivanic
@guizmaii
Sep 12 09:45
@jaliss yes, it is
Jorge
@jaliss
Sep 12 09:46
👍
Leszek Gruchała
@leszekgruchala
Sep 12 09:49
so called end of the world
mhdkassir
@mhdkassir
Sep 12 09:54
any body have the code on interpret please
Leszek Gruchała
@leszekgruchala
Sep 12 09:54

def interpret[A](program: Program[A]): A = program match {
    case Program.WriteLine(line, next) =>
      println(line)
      interpret(next)
    case Program.ReadLine(next) =>
      interpret(next(scala.io.StdIn.readLine()))
    case Program.Return(value) =>
    value()
  }

mhdkassir
@mhdkassir
Sep 12 09:55
thanks
Jorge
@jaliss
Sep 12 09:57
interpret is not compiling form e
aureliesalmon
@aureliesalmon
Sep 12 09:58
did you remove the Chain part?
Jorge
@jaliss
Sep 12 09:58
ah fixed
aureliesalmon
@aureliesalmon
Sep 12 09:58
that was commited in the project
Jorge
@jaliss
Sep 12 09:58
thx
aureliesalmon
@aureliesalmon
Sep 12 09:58
^^ (i’m having trouble with it too, i guess i will remove it for now)
Jorge
@jaliss
Sep 12 09:59
copy paste the code @leszekgruchala posted above
I had wrongly typed interpret(next())
Leszek Gruchała
@leszekgruchala
Sep 12 09:59
it compiles for this definition

sealed trait Program[A] { self =>
    final def map[B](f: A => B): Program[B] = self match {
      case Program.ReadLine(next) =>
        Program.ReadLine(input => next(input).map(f))
      case Program.WriteLine(line, next) =>
        Program.WriteLine(line, next.map(f))
      case Program.Return(value) =>
        Program.Return(() => f(value()))
    }

    final def flatMap[B](f: A => Program[B]): Program[B] =
      self match {
        case Program.ReadLine(next) =>
          Program.ReadLine(input => next(input).flatMap(f))
        case Program.WriteLine(line, next) =>
          Program.WriteLine(line, next.flatMap(f))
        case Program.Return(value) =>
          f(value())
      }
  }
  object Program {
    final case class ReadLine[A](next: String => Program[A]) extends Program[A]
    final case class WriteLine[A](line: String, next: Program[A]) extends Program[A]
    final case class Return[A](value: () => A) extends Program[A]

    val readLine: Program[String] = ReadLine(line => Return(() => line)) // or ReadLine(point)
    def writeLine(line: String): Program[Unit] = WriteLine(line, Return(() => ()))
    def point[A](a: => A): Program[A] = Return(() => a)
  }

marianobringas
@marianobringas
Sep 12 10:12

writeLine("That's not an age, try again") *> ageExplainer2

this compiles for me

  def ageExplainer2: Program[Unit] = for {
    _     <- writeLine("What is your age?")
    input <- readLine
    _     <- scala.util.Try(input.toInt).toOption match {
      case Some(age) =>
        if (age < 12) writeLine("You are a kid")
        else if (age < 20) writeLine("You are a teenager")
        else if (age < 30) writeLine("You are a grownup")
        else if (age < 50) writeLine("You are an adult")
        else if (age < 80) writeLine("You are a mature adult")
        else if (age < 100) writeLine("You are elderly")
        else writeLine("You are probably lying.")
      case None =>
        writeLine("That's not an age, try again") *> ageExplainer2
    }
  } yield ()

Bounkong Khamphousone
@tiboun
Sep 12 10:14

final def *> [B](that : Program[B]): Program[B] =
      self.flatMap(_ => that)
    final def <* [B](that : Program[B]): Program[A] =
      for {
        a <- self
        _ <- that
      } yield a

Oleksandra Holubitska
@Vilkina
Sep 12 10:15
fish, cookie, syntax sugar... I think, creator of scala was hungry
Jens Hoffmann
@jchoffmann
Sep 12 10:15
and short sighted so he needed lenses
Bounkong Khamphousone
@tiboun
Sep 12 10:15
lol
Jules Ivanic
@guizmaii
Sep 12 10:16

  val ageExplainer2: Program[Unit] =
    readLine.map(s => Try(s.toInt).toOption).flatMap {
      case None                   => writeLine("That's not an age, try again").flatMap(_ => ageExplainer2)
      case Some(age) if age < 12  => writeLine("You are a kid")
      case Some(age) if age < 20  => writeLine("You are a teenager")
      case Some(age) if age < 30  => writeLine("You are a grownup")
      case Some(age) if age < 50  => writeLine("You are an adult")
      case Some(age) if age < 80  => writeLine("You are a mature adult")
      case Some(age) if age < 100 => writeLine("You are elderly")
      case _                      => writeLine("You are probably lying.")
    }

(I don’t have the initial question in my impl)
(but it’s very easy to add)

  val ageExplainer2: Program[Unit] =
    for {
      _ <- writeLine("What is your age?")
      _ <- readLine.map(s => Try(s.toInt).toOption).flatMap {
        case None                   => writeLine("That's not an age, try again").flatMap(_ => ageExplainer2)
        case Some(age) if age < 12  => writeLine("You are a kid")
        case Some(age) if age < 20  => writeLine("You are a teenager")
        case Some(age) if age < 30  => writeLine("You are a grownup")
        case Some(age) if age < 50  => writeLine("You are an adult")
        case Some(age) if age < 80  => writeLine("You are a mature adult")
        case Some(age) if age < 100 => writeLine("You are elderly")
        case _                      => writeLine("You are probably lying.")
      }
    } yield ()

Leszek Gruchała
@leszekgruchala
Sep 12 10:22

maybe I miss something but isn’t *> just

writeLine("That's not an age, try again")
  .flatMap(_ => ageExplainer2)

?
lmeyer
@LeonardMeyer
Sep 12 10:25
Does anybody have the correction for sequence ?
Bertjan Broeksema
@bbroeksema
Sep 12 10:25

def sequence[A](programs: List[Program[A]]): Program[List[A]] = programs match {
    case Nil => Program.point(Nil)
    case p :: ps =>
      for {
        a <- p
        as <- sequence(ps)
      } yield a :: as
  }

lmeyer
@LeonardMeyer
Sep 12 10:26
Thanks
Bounkong Khamphousone
@tiboun
Sep 12 10:27
@leszekgruchala You're right I guess because it's totally the *> operator
Bertjan Broeksema
@bbroeksema
Sep 12 10:28
The thing which finally starts to cement for me, is that in a for comprehension you always have the same F, therefore the weird looking flatMap in the code sample from @guizmaii as he is flatMapping over an Option, while the for comprehension is over a Program.
ಠ_ರೃ
@mrt181_twitter
Sep 12 10:29
you could have and inner for
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 10:29
Can anybody share John's ageExplainer2 solution?
aureliesalmon
@aureliesalmon
Sep 12 10:29
@jdegoes , when we have time, could you talk about:
final case class Chain[A0, A](previous: Program[A0], next: A0 => Program[A]) extends Program[A] ?
I like how you pushed to interpreter the responsability for chaining elements, but i had a hard time writing the interpreter portion for it.
Bertjan Broeksema
@bbroeksema
Sep 12 10:30
@mrt181_twitter, sure, but that doesn't change the fact that you cannot flatmap over different F's in the same for comprehension. Which is something that has confused me for a long time.
aureliesalmon
@aureliesalmon
Sep 12 10:30
@Eduardo-M-Cavalcanti i removed the if, but this is the essence

  //Recursivity + Careful of    "That's not an age, try again": unit, but have an effect that need to be thinked about
  // we implemented  *> and <* to help
  //Bonus : how easy was it to add "return age fonctionnality"?
  def ageExplainer2: Program[Int] = for {
    _ ← writeLine("What is your age?")
    input ← readLine
    age ← scala.util.Try(input.toInt).toOption match {
      case Some(age) if age < 12 => writeLine("You are a kid") *> Program.point(age)
      case Some(age) if age < 20 => writeLine("You are a teenager") *> Program.point(age)
      case Some(age) if age < 30 => writeLine("You are a grownup") *> Program.point(age)
      case Some(age) if age < 50 => writeLine("You are an adult") *> Program.point(age)
      case Some(age) if age < 80 => writeLine("You are a mature adult") *> Program.point(age)
      case Some(age) if age < 100 => writeLine("You are elderly") *> Program.point(age)
      case Some(age) ⇒ writeLine("You are probably lying.") *> Program.point(age)
      case _ ⇒ writeLine("That's not an age, try again") *> ageExplainer2
    }
  } yield age

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 10:31
I just made case _ =>
interpret(program) at the end of the interpreter
Thanks @aureliesalmon
aureliesalmon
@aureliesalmon
Sep 12 10:32
@Eduardo-M-Cavalcanti well when you read what was commited, map and flatmap are written with Chain and Return: even if it compiles, i have some doubts for the behavior at runtime… or maybe i’m wrong >< don’t know

final def map[B](f: A => B): Program[B] = Chain(self, f.andThen(Return(_)))
final def flatMap[B](f: A => Program[B]): Program[B] = Chain(self, f)

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 10:35
:) I made that without thinking much about it. I noteiced that John had modified the code for sealed trait Program[A].
aureliesalmon
@aureliesalmon
Sep 12 10:35
I will need to pull it^^
Merunas
@meras
Sep 12 10:35

  def ageExplainer2: Program[Int] = {
    def getAge(age: Int): String = age match {
      case age if (age < 12)  => "You are a kid"
      case age if (age < 20)  => "You are a teenager"
      case age if (age < 30)  => "You are a grownup"
      case age if (age < 50)  => "You are an adult"
      case age if (age < 80)  => "You are a mature adult"
      case age if (age < 100) => "You are elderly"
      case _                  => "You are probably lying."
    }

    for {
      _   <- writeLine("What is your age?")
      in    <- readLine
      age   <- scala.util.Try(in.toInt).toOption match {
             case Some(in) => Program.writeLine(getAge(in))
                                     .flatMap(_ => Program.point(in))
             case None     => Program.writeLine("That's not an age!")
                                     .flatMap(_ => ageExplainer2)
      }
    } yield age
  }

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 10:36
I Imagine that JOhn made explicit something that Chain already encapsulates.
Jens Hoffmann
@jchoffmann
Sep 12 10:36
@jdegoes when and which timezone would be the re-run of this course? I think I might take that offer
tyvm
Jules Ivanic
@guizmaii
Sep 12 10:39

  val ageExplainer3: Program[Int] =
    for {
      _ <- writeLine("What is your age?")
      age <- readLine.map(s => Try(s.toInt).toOption).flatMap {
        case None => writeLine("That's not an age, try again").flatMap(_ => ageExplainer3)
        case Some(age) =>
          (if (age < 12) writeLine("You are a kid")
           else if (age < 20) writeLine("You are a teenager")
           else if (age < 30) writeLine("You are a grownup")
           else if (age < 50) writeLine("You are an adult")
           else if (age < 80) writeLine("You are a mature adult")
           else if (age < 100) writeLine("You are elderly")
           else writeLine("You are probably lying.")) *> Program.point(age)
      }
    } yield age

Wiem Zine El Abidine
@wi101
Sep 12 10:48
type Exceptional[A] = IO[Exception, A]
type Task[A] = IO[Throwable, A]
type Infallible[A] = IO[Nothing, A]
Jens Hoffmann
@jchoffmann
Sep 12 10:50
What is the difference between type Infallible[A] = IO[_, A] and type Infallible[A] = IO[Nothing, A]
Sitbon
@nsitbon
Sep 12 10:51
how do we deal with OutOfMemoryException in the FP world @jdegoes ?
Leszek Gruchała
@leszekgruchala
Sep 12 10:51
IO[_, A] -> IO[Any, A] which means can fail with Any
Wiem Zine El Abidine
@wi101
Sep 12 10:51
IO[_, A] can fail
Jens Hoffmann
@jchoffmann
Sep 12 10:51
OK got it, thanks
Wiem Zine El Abidine
@wi101
Sep 12 10:51
type Unproductive[E] = IO[E, Nothing]
ಠ_ರೃ
@mrt181_twitter
Sep 12 10:52
Nothing has no values
you cant produce one
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 10:52
Why throwable in type Task[A] = IO[Throwable, A]
Leszek Gruchała
@leszekgruchala
Sep 12 10:53
so IO[E, Nothing] would mean the IO does "nothing"
Wiem Zine El Abidine
@wi101
Sep 12 10:53
Task can produce a value of type a or can fail with Throwable type
Leszek Gruchała
@leszekgruchala
Sep 12 10:53
@Eduardo-M-Cavalcanti because

//
  // EXERCISE 2
  //
  // Write the type of `IO` values that can fail with a `Throwable`, or
  // may produce an `A`.
  //
  type Task[A] = IO[Throwable, A]

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 10:53
Yes: a webserver.
Thanks @leszekgruchala
@leszekgruchala IO[E, Nothing] does not return a value. But can return an exception.
Wiem Zine El Abidine
@wi101
Sep 12 10:55
@leszekgruchala IO[E, Nothing] means will only fail (like throw new Exception(???))
Leszek Gruchała
@leszekgruchala
Sep 12 10:55
rather can fail with E
so it’s an IO which always fails with type E
Wiem Zine El Abidine
@wi101
Sep 12 10:56
yes
and never produce a value
Leszek Gruchała
@leszekgruchala
Sep 12 10:56
Exactly
ಠ_ರೃ
@mrt181_twitter
Sep 12 10:57
so forever just runs the cpu (think usb coffee warmer) until it fails
Sitbon
@nsitbon
Sep 12 10:58
thx
Wiem Zine El Abidine
@wi101
Sep 12 10:59
forever will run forever , retain the error type and never produce a value
but let's ask about that (if forever will stop if io fails)
ಠ_ರೃ
@mrt181_twitter
Sep 12 11:04
I do not have forever avaliable in my IDE?
IO.forever
nevermidn
Leszek Gruchała
@leszekgruchala
Sep 12 11:04
You’re welcome :trollface:
Oleksandra Holubitska
@Vilkina
Sep 12 11:04
I need help with Atom)
Jorge
@jaliss
Sep 12 11:05
I might try Atom at some point. I guess I'm too spoiled by IDEA
realfiretiger
@realfiretiger
Sep 12 11:05
im curios how good it is at refactoring
ಠ_ರೃ
@mrt181_twitter
Sep 12 11:06
i hope that scala has proper language and debug server implementations
Jorge
@jaliss
Sep 12 11:06
IDEA or Atom?
ಠ_ರೃ
@mrt181_twitter
Sep 12 11:06
soon
realfiretiger
@realfiretiger
Sep 12 11:06
atom
Oleksandra Holubitska
@Vilkina
Sep 12 11:06
is there any documentation how to change code in atom but look is it succeed in Terminal
Like John doing now
Leszek Gruchała
@leszekgruchala
Sep 12 11:06
Atom is rather terrible at refactoring, it’s mostly a text editor, right?
ಠ_ರೃ
@mrt181_twitter
Sep 12 11:06
./sbt ~compile
Oleksandra Holubitska
@Vilkina
Sep 12 11:06
that's all
?
sec
Jens Hoffmann
@jchoffmann
Sep 12 11:07
does anyone use Ensime with Atom (or anything else)?
Wiem Zine El Abidine
@wi101
Sep 12 11:07
@mrt181_twitter you can use forever in an IO value: example IO.point("1").forever
Jorge
@jaliss
Sep 12 11:07
I think Ensime development has/will stop
Sam is not working with Scala anymore
Oleksandra Holubitska
@Vilkina
Sep 12 11:09
Screen Shot 2018-09-12 at 2.08.40 PM.png
ಠ_ರೃ
@mrt181_twitter
Sep 12 11:10
it recompiles on eacj save
Oleksandra Holubitska
@Vilkina
Sep 12 11:10
how do I can not to commit my changes and pull from github?
Leszek Gruchała
@leszekgruchala
Sep 12 11:10
git stash
git pull
git stash pop (and solve any merge conflicts)
ಠ_ರೃ
@mrt181_twitter
Sep 12 11:10
have you forked johns repo or just clones?
Oleksandra Holubitska
@Vilkina
Sep 12 11:10
no
Leszek Gruchała
@leszekgruchala
Sep 12 11:10

I use IDEA with terminal (with sbt ~test or sbt ~test:compile) most of the time.
But since yesterday I plat with VCode. It’s super smooth for writing and scrolling.
I found plugins for scala syntax and scala sbt which provides sbt support with langague server.
Looks promissing, but as I understand there is zero refactoring capabilities or adding automatically imports because it’s just a text editor. Which is also a reason why it is so smooth.

But VCode connects with sbt and shows errors in the editor.
Oleksandra Holubitska
@Vilkina
Sep 12 11:11
:)
Alexander Babin
@mudriyjo
Sep 12 11:11
when lunc brake end?
Artsiom Miklushou
@mikla
Sep 12 11:11
final def forever: IO[E, Nothing] = self *> self.forever
Leszek Gruchała
@leszekgruchala
Sep 12 11:11
in an hour from now
Alexander Babin
@mudriyjo
Sep 12 11:11
ok, thx
Oleksandra Holubitska
@Vilkina
Sep 12 11:11
@mrt181_twitter I've forked of course)
@leszekgruchala tnx
It's time for a borscht)
ಠ_ರೃ
@mrt181_twitter
Sep 12 11:12
then it should work like @leszekgruchala suggested
Oleksandra Holubitska
@Vilkina
Sep 12 11:14
bon appetit
Wiem Zine El Abidine
@wi101
Sep 12 11:14
bon appetit :)
ಠ_ರೃ
@mrt181_twitter
Sep 12 12:11
can anyone recommend any conferences in europe? must not be only scala related. i was only at scala exchange and scala days so far
Wiem Zine El Abidine
@wi101
Sep 12 12:12
Yes, there is ScalaIO
simondumas
@simondumas
Sep 12 12:12
https://scala.io/ Scala.io in France
Wiem Zine El Abidine
@wi101
Sep 12 12:12
in Lyon, France
simondumas
@simondumas
Sep 12 12:12
It's great, it's cheap and Lyon is a nice city
Bertjan Broeksema
@bbroeksema
Sep 12 12:13
@mrt181_twitter you realize that you just stated a very broad question, no?! I was tempted to point you to a tupperware event :trollface:
ಠ_ರೃ
@mrt181_twitter
Sep 12 12:13
@bbroeksema as long as its good
Leszek Gruchała
@leszekgruchala
Sep 12 12:13
http://scalawave.io ;)
ಠ_ರೃ
@mrt181_twitter
Sep 12 12:13
i have tupperware, so i am the audience
Bertjan Broeksema
@bbroeksema
Sep 12 12:14
Free tupperware goodies, what more can you want?
Leszek Gruchała
@leszekgruchala
Sep 12 12:14
http://scalar-conf.com
Bertjan Broeksema
@bbroeksema
Sep 12 12:14
Functional tupperware goodies.... well, they are by default very functional :grin:
simondumas
@simondumas
Sep 12 12:14
Monadic tupperwares
ಠ_ರೃ
@mrt181_twitter
Sep 12 12:15
^^^ true
non leaky too
Bertjan Broeksema
@bbroeksema
Sep 12 12:15
:+1:
You can even map them: https://i.pinimg.com/originals/34/0a/cd/340acd3d4343e655b603433d9e83a3db.jpg
And the maps seem flat, so flatMapping should work as well
ಠ_ರೃ
@mrt181_twitter
Sep 12 12:17
:smile:
marianobringas
@marianobringas
Sep 12 12:18
here comes a new blog post on monads being like tupperware instead of burritos :)
realfiretiger
@realfiretiger
Sep 12 12:23
val ioXPlusY: IO[Nothing, Int] = ioX.flatMap(x => ioY.map(y => x+y))
Bertjan Broeksema
@bbroeksema
Sep 12 12:32
Can someone post the solution to decode2?
Merunas
@meras
Sep 12 12:33
yes pls
ಠ_ರೃ
@mrt181_twitter
Sep 12 12:33

  def decode2[E](read: IO[E, Byte]): IO[E, Either[Byte, Int]] =
    for {
      b <- read
      e <- if (b < 0) IO.now(Left(b))
          else
            for {
              b2 <- read
              b3 <- read
              b4 <- read
            } yield
              Right(
                (b.toInt + (b2.toInt << 8)) +
                  (b3.toInt << 16) + (b4.toInt << 24)
              )
    } yield e

Merunas
@meras
Sep 12 12:33
thanks!
Jules Ivanic
@guizmaii
Sep 12 12:37

  def decode2[E](read: IO[E, Byte]): IO[E, Either[Byte, Int]] =
    read
      .flatMap(
        b =>
          if (b < 0) IO.now(Left(b))
          else {
            read.seq(read).seq(read).map {
              case ((b1, b2), b3) => Right(b.toInt + (b1.toInt << 8) + (b2.toInt << 16) + (b3.toInt << 24))
            }
          }
      )

but 🤫
Wiem Zine El Abidine
@wi101
Sep 12 12:41

  IO.point(42).flatMap(a => IO.point(19).map(_ => a)).flatMap(_ => IO.point(1))

Merunas
@meras
Sep 12 12:44
👍
ಠ_ರೃ
@mrt181_twitter
Sep 12 12:48
so IO[Error, Either[Exception, A]] could handle non recoverable errors and recoverbale exceptions?
Jorge
@jaliss
Sep 12 12:51
What does IO use internally to handle concurrency?
Leszek Gruchała
@leszekgruchala
Sep 12 12:52
Fiber
https://scalaz.github.io/scalaz-zio/usage/fibers.html
Jorge
@jaliss
Sep 12 12:52
oh I see
Leszek Gruchała
@leszekgruchala
Sep 12 12:53

val fiber  = someIO.fork //use another thread
val io2 = fiber.join // get result of fork when completes

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 12:55
Can someone share def repeatN2
Leszek Gruchała
@leszekgruchala
Sep 12 12:55

def repeatN2(n: Int, action: IO[Nothing, Unit]): IO[Nothing, Unit] =
    if (n <= 0) IO.unit
    else action *> repeatN2(n - 1, action)

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 12:55
Thanks.
Jules Ivanic
@guizmaii
Sep 12 13:05

  /**
   *
   * Imports a synchronous effect into a pure `IO` value, translating any
   * throwables into a `Throwable` failure in the returned value.
   *
   * {{{
   * def putStrLn(line: String): IO[Throwable, Unit] = IO.syncThrowable(println(line))
   * }}}
   */
  final def syncThrowable[A](effect: => A): IO[Throwable, A] =
    syncCatch(effect) {
      case t: Throwable => t
    }

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 13:05
Great.
Jules Ivanic
@guizmaii
Sep 12 13:05

  /**
   * Safely imports an exception-throwing synchronous effect into a pure `IO`
   * value, translating the specified throwables into `E` with the provided
   * user-defined function.
   */
  final def syncCatch[E, A](effect: => A)(f: PartialFunction[Throwable, E]): IO[E, A] =
    IO.absolve[E, A](
      IO.sync(
        try {
          val result = effect
          Right(result)
        } catch f andThen Left[E, A]
      )
    )

hard to know if it catches OOM
Leszek Gruchała
@leszekgruchala
Sep 12 13:06
should not...
Jules Ivanic
@guizmaii
Sep 12 13:06
yeah, it should not
Jorge
@jaliss
Sep 12 13:07
Can't help thinking of Max Headroom whenever audio starts failing ..
lmeyer
@LeonardMeyer
Sep 12 13:07
Audio sucks :(
Sitbon
@nsitbon
Sep 12 13:07
me too
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 13:07
Yes.
marianobringas
@marianobringas
Sep 12 13:07
same here
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 13:07
Sound not ok now.
Jorge
@jaliss
Sep 12 13:07
@jdegoes audio is really bad
realfiretiger
@realfiretiger
Sep 12 13:07
dnt hear the explanation
Salla
@sallareznov
Sep 12 13:08
He’s sounding like Terminator right now
Jorge
@jaliss
Sep 12 13:08
Max Headroom :)
Sitbon
@nsitbon
Sep 12 13:08
same shape
Jorge
@jaliss
Sep 12 13:08
you seem to be back
marianobringas
@marianobringas
Sep 12 13:08
yes
realfiretiger
@realfiretiger
Sep 12 13:08
y
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 13:08
yes.
Sitbon
@nsitbon
Sep 12 13:08
yes
ಠ_ರೃ
@mrt181_twitter
Sep 12 13:08
@jdegoes why no IO.syncError?
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 13:09
sound better now
Sitbon
@nsitbon
Sep 12 13:09
not for me
Leszek Gruchała
@leszekgruchala
Sep 12 13:09
yeah, failing again
Jules Ivanic
@guizmaii
Sep 12 13:09
@mrt181_twitter in Java, this is an Error interface
interface Error extends Throwable
cverdier
@cverdier
Sep 12 13:09
@mrt181_twitter you're not supposed to catch Errors
Jules Ivanic
@guizmaii
Sep 12 13:09
maybe it’s the reason why not
cverdier
@cverdier
Sep 12 13:09
neither wrap them in IO
Wiem Zine El Abidine
@wi101
Sep 12 13:18

def sysExit(code: Int): IO[SecurityException, Unit]

Alexander Babin
@mudriyjo
Sep 12 13:21
Yep, why not use Unit?
Jorge
@jaliss
Sep 12 13:22
I think because once that gets executed the jvm exits.
so nothing will be returned
cverdier
@cverdier
Sep 12 13:23
also Nothing tells you that nothing can happen after sysExit
ಠ_ರೃ
@mrt181_twitter
Sep 12 13:23

def sysExit(code: Int): IO[SecurityException, Nothing] =
    IO.syncCatch({
      System.exit(code)
      throw new Error
      // ^ that line is never reached because of System.exit
      // scalac does not know that. it can be used to satisfy the type signature
      // jvm exits, no further execution of anything
    }) {
      case s: SecurityException => s
    }

Alexander Babin
@mudriyjo
Sep 12 13:24
ok, thx
Oleksandra Holubitska
@Vilkina
Sep 12 13:32
IO.async(l,r)
:)
marianobringas
@marianobringas
Sep 12 13:32
sound is terrible
Leszek Gruchała
@leszekgruchala
Sep 12 13:32
can’t understand a thing
Jorge
@jaliss
Sep 12 13:32
yeah
Sitbon
@nsitbon
Sep 12 13:33
yeah
aureliesalmon
@aureliesalmon
Sep 12 13:33
Sound is awful
Alexander Babin
@mudriyjo
Sep 12 13:33
some trouble with sound and video
Sitbon
@nsitbon
Sep 12 13:33
video frozen
Bounkong Khamphousone
@tiboun
Sep 12 13:33
lost video and sound
marianobringas
@marianobringas
Sep 12 13:33
Video is gone
mhdkassir
@mhdkassir
Sep 12 13:33
connection lost
marianobringas
@marianobringas
Sep 12 13:33
Back now
Alexander Babin
@mudriyjo
Sep 12 13:33
no video no problem
Merunas
@meras
Sep 12 13:33
1 sec
marianobringas
@marianobringas
Sep 12 13:33
better
aureliesalmon
@aureliesalmon
Sep 12 13:33
:)
better
Sitbon
@nsitbon
Sep 12 13:33
yes
mhdkassir
@mhdkassir
Sep 12 13:33
yes
Jorge
@jaliss
Sep 12 13:33
yes!
Leszek Gruchała
@leszekgruchala
Sep 12 13:33
ExceededLimitOfWifiException
Alexander Babin
@mudriyjo
Sep 12 13:33
yep)
aureliesalmon
@aureliesalmon
Sep 12 13:33
no, back to frozen
Alex Henning Johannessen
@ahjohannessen
Sep 12 13:33
:D
marianobringas
@marianobringas
Sep 12 13:34
:/
Jorge
@jaliss
Sep 12 13:34
:~(
Bertjan Broeksema
@bbroeksema
Sep 12 13:34
he was back :)
Alex Henning Johannessen
@ahjohannessen
Sep 12 13:34
RuntimeException
Alexander Babin
@mudriyjo
Sep 12 13:34
:\
aureliesalmon
@aureliesalmon
Sep 12 13:34
(or really really quiet and not moving…)
marianobringas
@marianobringas
Sep 12 13:34
sound is back
no vide
video
Bounkong Khamphousone
@tiboun
Sep 12 13:35
no screen
Jorge
@jaliss
Sep 12 13:35
yeah!
marianobringas
@marianobringas
Sep 12 13:35
yes
Alexander Babin
@mudriyjo
Sep 12 13:35
yep
Jorge
@jaliss
Sep 12 13:35
that hotel needs a better router ....
Simon Mittermueller
@simonmit
Sep 12 13:35
Dont do npm install or sbt. It will download the internet...
Jorge
@jaliss
Sep 12 13:35
LOL
marianobringas
@marianobringas
Sep 12 13:36
can you show the code again?
barely had time
Jorge
@jaliss
Sep 12 13:46
How do you actually execute the logic there? playGrame2.run?
Menestret Martin
@mmenestret_twitter
Sep 12 13:47

def playGame2: IO[Exception, Unit] =
    for {
      n ← IO.sync(scala.util.Random.nextInt(5))
      _ ← putStrLn("Enter a number between 0 - 5: ")
      input ← getStrLn
      _ ← IO
        .syncCatch(input.toInt) { case e ⇒ Unit }
        .redeem(
          _ ⇒ putStrLn("You didn't enter an integer!") *> playGame2,
          guess ⇒
            if (guess == n) putStrLn("You guessed right! The number was " + n)
            else putStrLn("You guessed wrong! The number was " + n)
        )
    } yield ()

Leszek Gruchała
@leszekgruchala
Sep 12 13:48
io.attempt executes
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 13:48
Thanks @mmenestret_twitter
Jorge
@jaliss
Sep 12 13:49
oh, thx @leszekgruchala
Jules Ivanic
@guizmaii
Sep 12 13:50
my 2 versions:

  def pureNextInt(i: Int): IO[Nothing, Int]      = IO.sync(scala.util.Random.nextInt(i))
  def purePrint(s: => String): IO[Nothing, Unit] = IO.sync(println(s))
  val pureReadInt: IO[Nothing, Option[Int]]      = IO.sync(Try(scala.io.StdIn.readLine().toInt).toOption)

  def playGame2: IO[Exception, Unit] =
    pureNextInt(5).flatMap { number =>
      purePrint("Enter a number between 0 - 5: ") *>
        pureReadInt.flatMap {
          case None                         => purePrint("You didn't enter an integer!") *> playGame2
          case Some(gess) if gess == number => purePrint("You guessed right! The number was " + number)
          case _                            => purePrint("You guessed wrong! The number was " + number)
        }
    }

  def playGame3: IO[Exception, Unit] =
    for {
      number <- pureNextInt(5)
      _      <- purePrint("Enter a number between 0 - 5: ")
      line   <- getStrLn
      _ <- IO
        .syncException(line.toInt)
        .redeem(
          _ => purePrint("You didn't enter an integer!") *> playGame2,
          guess =>
            if (guess == number) purePrint("You guessed right! The number was " + number)
            else purePrint("You guessed wrong! The number was " + number)
        )
    } yield ()

I personnaly prefer the first one
(they are not strictly the same)
Menestret Martin
@mmenestret_twitter
Sep 12 13:51
Or based on @wi101 suggestion:

def playGame2: IO[Exception, Unit] =
    for {
      n ← IO.sync(scala.util.Random.nextInt(5))
      _ ← putStrLn("Enter a number between 0 - 5: ")
      input ← getStrLn
      intAttempt ← IO
        .syncException(input.toInt)
        .attempt
      _ ← intAttempt match {
        case Left(_) ⇒ putStrLn("You didn't enter an integer!") *> playGame2
        case Right(guess) ⇒
          if (guess == n) putStrLn("You guessed right! The number was " + n)
          else putStrLn("You guessed wrong! The number was " + n)
      }
    } yield ()

which I find more readable
Jules Ivanic
@guizmaii
Sep 12 13:51
this line is useless: _ ← intAttempt match {

def playGame2: IO[Exception, Unit] =
    for {
      n ← IO.sync(scala.util.Random.nextInt(5))
      _ ← putStrLn("Enter a number between 0 - 5: ")
      input ← getStrLn
      _ ← IO
        .syncException(input.toInt)
        .attempt match {
        case Left(_) ⇒ putStrLn("You didn't enter an integer!") *> playGame2
        case Right(guess) ⇒
          if (guess == n) putStrLn("You guessed right! The number was " + n)
          else putStrLn("You guessed wrong! The number was " + n)
      }
    } yield ()

Wiem Zine El Abidine
@wi101
Sep 12 13:52
yes @mmenestret_twitter
Menestret Martin
@mmenestret_twitter
Sep 12 13:53

@guizmaii you meant:

def playGame2: IO[Exception, Unit] =
    for {
      n ← IO.sync(scala.util.Random.nextInt(5))
      _ ← putStrLn("Enter a number between 0 - 5: ")
      input ← getStrLn
      _ ← IO
        .syncException(input.toInt)
        .attempt
        .flatMap {
          case Left(_) ⇒ putStrLn("You didn't enter an integer!") *> playGame2
          case Right(guess) ⇒
            if (guess == n) putStrLn("You guessed right! The number was " + n)
            else putStrLn("You guessed wrong! The number was " + n)
        }
    } yield ()

?
Alex Henning Johannessen
@ahjohannessen
Sep 12 13:54
throw new BreakException("14:55")
Menestret Martin
@mmenestret_twitter
Sep 12 13:54
ahah
Wiem Zine El Abidine
@wi101
Sep 12 13:55
:D
Jorge
@jaliss
Sep 12 13:59
I might throw a SleepException anytime
ಠ_ರೃ
@mrt181_twitter
Sep 12 14:01
can someone c/p yesterdays FunctorNest implementation
Jens Hoffmann
@jchoffmann
Sep 12 14:02

  case class FunctorNest[F[_], G[_], A](run: F[G[A]])
  implicit def FunctorNestFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorNest[F, G, ?]] = new Functor[FunctorNest[F, G, ?]] {
      override def map[A, B](fa: FunctorNest[F, G, A])(f: A => B): FunctorNest[F, G, B] =
        new FunctorNest[F, G, B](fa.run.map(_.map(f)))
  }

ಠ_ರೃ
@mrt181_twitter
Sep 12 14:04
merci
Bertjan Broeksema
@bbroeksema
Sep 12 14:05
This is quite cool. I went on to refactor it a bit to come up with

  def nextInt(upper: Int): IO[Nothing, Int] =
    IO.sync(scala.util.Random.nextInt(5))

  def checkGuess(actual: Int, guess: Int): IO[Nothing, Unit] =
    if(guess == actual)
      putStrLn(" You guessed right! The number was ")
    else
      putStrLn("You guess wrong")

  def handleNotAnInt: IO[Nothing, Unit] =
    putStrLn("You didn't enter an integer") *> playGame2

  def getInput: IO[Nothing, String] =
    putStrLn("Enter a number between 0 - 5: ") *> getStrLn

  def checkInput(number: Int, input: String): IO[Nothing, Unit] =
    IO
      .syncException(input.toInt)
      .redeem(_ => handleNotAnInt, checkGuess(number, _))

  def playGame2: IO[Nothing, Unit] = for {
    number <- nextInt(5)
    input  <- getInput
    _      <- checkInput(number, input)
  } yield ()
`

The game logic becomes completely straightforward this way.
Bounkong Khamphousone
@tiboun
Sep 12 14:08
like that !
Sitbon
@nsitbon
Sep 12 14:10
Hey @jdegoes any idea when Scalaz 8 and ZIO will be production ready?
Jules Ivanic
@guizmaii
Sep 12 14:13
@mmenestret_twitter yes maybe.
I wrote it directly in Gitter...
Salla
@sallareznov
Sep 12 14:14
@nsitbon https://twitter.com/politrons/status/1023457659264159744
https://twitter.com/jdegoes/status/1023468524428124160
Sitbon
@nsitbon
Sep 12 14:15
@sallareznov thank you so much
Salla
@sallareznov
Sep 12 14:15
:)
np
Alexander Babin
@mudriyjo
Sep 12 14:18
flatMap?
Rob Vermazeren
@RobVermazeren
Sep 12 14:18
attempt?
Jorge
@jaliss
Sep 12 14:22
audio is failing for me
Alexander Babin
@mudriyjo
Sep 12 14:22
sound problem
Leszek Gruchała
@leszekgruchala
Sep 12 14:22
yeah
Bounkong Khamphousone
@tiboun
Sep 12 14:23
same
simondumas
@simondumas
Sep 12 14:23
:(
Menestret Martin
@mmenestret_twitter
Sep 12 14:23
:(
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 14:23
:(
Oleksandra Holubitska
@Vilkina
Sep 12 14:24
now I can hear some voice
Alexander Babin
@mudriyjo
Sep 12 14:24
yep
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 14:24
yes.
marianobringas
@marianobringas
Sep 12 14:24
yes
Alexander Babin
@mudriyjo
Sep 12 14:29
parAll execute all io even if some throw error?
cverdier
@cverdier
Sep 12 14:35
I seems yes, parAll uses parTraverse, that folds over the list of actions combining them with par, which interrupts the other on failure
Alexander Babin
@mudriyjo
Sep 12 14:35
@cverdier thx
Jorge
@jaliss
Sep 12 14:35
@jdegoes I'm not familiar with fibers, when using IO do you need to configure something similar to ExecutionContexts as you do for futures? Eg: a context for DB access and potentially others for other parts of the app? If this is something you're covering later please ignore this.
well, I guess I asked a few seconds ahead.
Sitbon
@nsitbon
Sep 12 14:38
@jaliss https://github.com/scalaz/scalaz-zio/blob/master/core/jvm/src/main/scala/scalaz/zio/RTS.scala#L61
Jorge
@jaliss
Sep 12 14:38
👍
Alex Henning Johannessen
@ahjohannessen
Sep 12 14:44

  def myPar[E, A, B](left: IO[E, A], right: IO[E, B]): IO[E, (A, B)] = for {
    l ← left.fork
    r ← right.fork
    d ← l.zip(r).join
  } yield d

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 14:44
Cool.
Jorge
@jaliss
Sep 12 14:45
nice!
Leszek Gruchała
@leszekgruchala
Sep 12 14:50
now it is really robotic voice
Jules Ivanic
@guizmaii
Sep 12 14:52
IO.unit.fork0(errors => putStrLn(errors.toString).attempt *> IO.unit)
Alex Henning Johannessen
@ahjohannessen
Sep 12 14:53

    for {
      fiber <- fibonacci(10000).fork
      _ ← IO.sleep(2.second) *> fiber.interrupt
    } yield ()

Jules Ivanic
@guizmaii
Sep 12 14:56
I have the following error:

[error] value flatMap is not a member of scalaz.zio.Fiber[Nothing,Int]
[error]       both   <- fiber1.zipWith(fiber2)(_ + _)

Am I the only one ?
Leszek Gruchała
@leszekgruchala
Sep 12 14:57
got it too, looks like we miss some IO context
ಠ_ರೃ
@mrt181_twitter
Sep 12 14:57
have used IO.point
Jules Ivanic
@guizmaii
Sep 12 14:58

  val interrupted2: IO[Nothing, Unit] =
    for {
      fiber1 <- fibonacci(10).fork
      fiber2 <- fibonacci(20).fork
      both   <- fiber1.zipWith(fiber2)(_ + _)
      _      <- both.interrupt
    } yield ()

I don’t understand
ಠ_ರೃ
@mrt181_twitter
Sep 12 14:59
both = fiber1.zipWith(fiber2)(_ + _)
Leszek Gruchała
@leszekgruchala
Sep 12 14:59
fiber1.zipWith(fiber2)(_ + _) returns Fiber, but you need IO with flatMap to do both <-
Jules Ivanic
@guizmaii
Sep 12 14:59
yes
Menestret Martin
@mmenestret_twitter
Sep 12 14:59
fiber1.zipWith(fiber2)( + ) returns a fiber
the others IOs
Jules Ivanic
@guizmaii
Sep 12 14:59
both should be =, not <-
both = fiber1.zipWith(fiber2)(_ + _)
Menestret Martin
@mmenestret_twitter
Sep 12 14:59
you have then to lift your fiber to IO
yes it could
or both <- IO.pure(...)
Jules Ivanic
@guizmaii
Sep 12 15:00
thnks @mrt181_twitter
ಠ_ರೃ
@mrt181_twitter
Sep 12 15:00

  val interrupted2: IO[Nothing, Unit] =
    for {
      fiber1 <- fibonacci(10).fork
      fiber2 <- fibonacci(20).fork
//      both   <- IO.point(fiber1.zipWith(fiber2)(_ + _)): IO[Nothing, Fiber[Nothing, Int]]
      both = fiber1.zipWith(fiber2)(_ + _)
      _    <- both.interrupt
    } yield ()

Oleksandra Holubitska
@Vilkina
Sep 12 15:00
The best way to learn ZIO is to contribute ZIO
:)
Jorge
@jaliss
Sep 12 15:01
true, well said.
Jules Ivanic
@guizmaii
Sep 12 15:01
or to put ZIO programs in production ;)
Jorge
@jaliss
Sep 12 15:01
ZIO needs your help so ;-)
Oleksandra Holubitska
@Vilkina
Sep 12 15:02
ZIO needs some cookies :)
ಠ_ರೃ
@mrt181_twitter
Sep 12 15:03
isn't ZIO the promised land?
there is even a song: iron, lion, zio
Jules Ivanic
@guizmaii
Sep 12 15:04
:smile:
John de Goes with some dreadlocks
Oleksandra Holubitska
@Vilkina
Sep 12 15:05
@guizmaii lol
Di zio
Menestret Martin
@mmenestret_twitter
Sep 12 15:06
sounds is bad again
Jorge
@jaliss
Sep 12 15:07
ok, audio is gone form e
Alexander Babin
@mudriyjo
Sep 12 15:07
freeeez
simondumas
@simondumas
Sep 12 15:07
Getting autotune again
Menestret Martin
@mmenestret_twitter
Sep 12 15:07
Ahahah
Jorge
@jaliss
Sep 12 15:07
audio.fork.join
Alexander Babin
@mudriyjo
Sep 12 15:07
=)
Menestret Martin
@mmenestret_twitter
Sep 12 15:07
We get a word out of 3 :(
Jorge
@jaliss
Sep 12 15:08
yeah me too
Leszek Gruchała
@leszekgruchala
Sep 12 15:08
IO.bracket(IO.fail(new Exception("Uh oh")))(_ => IO.sync(println("On the way out...")))(_ => IO.unit)
Jorge
@jaliss
Sep 12 15:10
we hear you
Jules Ivanic
@guizmaii
Sep 12 15:10
is it better ?
aureliesalmon
@aureliesalmon
Sep 12 15:10
yes
Menestret Martin
@mmenestret_twitter
Sep 12 15:10
for now ^
^^
Alex Henning Johannessen
@ahjohannessen
Sep 12 15:14

  def readFile2(file: File): IO[Exception, List[Byte]] = {
   def readAll(is: InputStream, acc: List[Byte]): IO[Exception, List[Byte]] =
      is.read.flatMap {
        case None => IO.now(acc.reverse)
        case Some(byte) => readAll(is, byte :: acc)
      }
    InputStream.openFile(file).bracket(_.close.attempt.void)(a ⇒ readAll(a, Nil))
  }

cverdier
@cverdier
Sep 12 15:17
"someone's not muted" !
ಠ_ರೃ
@mrt181_twitter
Sep 12 15:17
coincidence for the ordering for relase and use
Bounkong Khamphousone
@tiboun
Sep 12 15:21

def tryCatchFinally[E, A]
    (try0: IO[E, A])
    (catch0: PartialFunction[E, IO[E, A]])
    (finally0: IO[Nothing, Unit]): IO[E, A] =
    try0.catchSome(catch0).ensuring(finally0)

is this ok ?
without bracket of course
Leszek Gruchała
@leszekgruchala
Sep 12 15:22
nice!
can someone post John’s version of tryCatchFinally?
Bounkong Khamphousone
@tiboun
Sep 12 15:26

def tryCatchFinally[E, A]
    (try0: IO[E, A])
    (catch0: PartialFunction[E, IO[E, A]])
    (finally0: IO[Nothing, Unit]): IO[E, A] =
    try0.attempt.bracket(_ => finally0){
      case Left(e) =>
        catch0.applyOrElse(e, IO.fail)
      case Right(a) => IO.now(a)
    }

Leszek Gruchała
@leszekgruchala
Sep 12 15:26
thx
Bounkong Khamphousone
@tiboun
Sep 12 15:26
:)
ಠ_ರೃ
@mrt181_twitter
Sep 12 15:27
that does not compile for me
Leszek Gruchała
@leszekgruchala
Sep 12 15:28
yeah
Jules Ivanic
@guizmaii
Sep 12 15:28
me neither

[error] /Users/jules/functional-scala/src/main/scala/net/degoes/03-effects/exercises.scala:849:49: type mismatch;
[error]  found   : Nothing => scalaz.zio.IO[Nothing,Nothing]
[error]  required: E => scalaz.zio.IO[E,A]
[error]       case Left(e)  => catch0.applyOrElse(e, IO.fail)
[error]

ಠ_ರೃ
@mrt181_twitter
Sep 12 15:28

[error] /home/martin/functional-scala/src/main/scala/net/degoes/03-effects/exercises.scala:805:49: type mismatch;
[error]  found   : Nothing => scalaz.zio.IO[Nothing,Nothing]
[error]  required: E => scalaz.zio.IO[E,A]
[error]       case Left(e)  => catch0.applyOrElse(e, IO.fail)
[error]                                                 ^
[error] one error found

Leszek Gruchała
@leszekgruchala
Sep 12 15:30
catch0.applyOrElse(e, e => IO.fail[E](e))
or just catch0.applyOrElse(e, IO.fail[E]) looks like compiler needed some help
Jules Ivanic
@guizmaii
Sep 12 15:30
:+1: @leszekgruchala
Artsiom Miklushou
@mikla
Sep 12 15:31
Thx
Jorge
@jaliss
Sep 12 15:32
oh nice, thx @jdegoes
Menestret Martin
@mmenestret_twitter
Sep 12 15:35

def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    IO.syncException(new FileInputStream(file))
      .bracket(fis ⇒ IO.syncException(fis.close()).attempt.void) { fis ⇒
        for {
          l ← IO.syncException(file.length.toInt)
          array ← IO.syncException(Array.ofDim[Byte](l))
        } yield array.toList
      }

Jules Ivanic
@guizmaii
Sep 12 15:36
I cheated or I’m totally wrong ?

  def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    InputStream.openFile(file).bracket(_.close.attempt.void)(readAll(_, Nil))

Artsiom Miklushou
@mikla
Sep 12 15:39

def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    tryCatchFinally(readFile2(file))({
      case e => IO.fail(e)
    })(IO.now(()))

?
Jules Ivanic
@guizmaii
Sep 12 15:40
@mmenestret_twitter where is the call to read in your version ?
aren’t you returning an empty array ?
Oleksandra Holubitska
@Vilkina
Sep 12 15:41
6 min and 30 sec
Bounkong Khamphousone
@tiboun
Sep 12 15:41

def readFileTCF2(file: File): IO[Exception, List[Byte]] = {
    IO.syncException(new FileInputStream(file)).bracket(fis =>
      IO.syncException(fis.close()).attempt.void
    )(fis => {
      for {
        array <- IO.syncException(Array.ofDim[Byte](file.length.toInt))
        res <- IO.syncException(fis.read(array)) *> IO.now(array.toList)
      } yield res
    })
  }

@guizmaii it's an empty array
Menestret Martin
@mmenestret_twitter
Sep 12 15:42

def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    IO.syncException(new FileInputStream(file))
      .bracket(fis ⇒ IO.syncException(fis.close()).attempt.void) { fis ⇒
        for {
          l ← IO.syncException(file.length.toInt)
          array ← IO.syncException(Array.ofDim[Byte](l))
          _ ← IO.syncException(fis.read(array))
        } yield array.toList
      }

Alex Henning Johannessen
@ahjohannessen
Sep 12 15:44
@jdegoes Is this totally bunkers?

  def readFileTCF2(file: File): IO[Exception, List[Byte]] = {


    def acquireFS: IO[Exception, FileInputStream] = IO.syncException {
      new FileInputStream(file)
    }

    def useFS(fis: FileInputStream): IO[Exception, List[Byte]] = for {
      ar ← IO.syncException(Array.ofDim[Byte](file.length.toInt))
       _ ← IO.syncException(fis.read(ar))
    } yield ar.toList


    acquireFS.flatMap { fis ⇒
      tryCatchFinally(useFS(fis)) {
        case _: java.io.IOException => IO.point(Nil)
      }(IO.sync(fis.close()).attempt.void)
    }
  }

given that it should be impl. using tryCatchFinally
lmeyer
@LeonardMeyer
Sep 12 15:44
It's too bad you acquire the resource even if say, you error out on file.length
Alex Henning Johannessen
@ahjohannessen
Sep 12 15:45
yes, left over
I see, interuption. Bracket is much better :)
lmeyer
@LeonardMeyer
Sep 12 15:48
How about :

  def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    for {
      fileLength <- IO.syncException(file.length).map(_.toInt)
      array <- IO.point(Array.ofDim[Byte](fileLength))
      list <- IO.syncException(new FileInputStream(file)).bracket(fis => IO.syncException(fis.close()).attempt.void) { is =>
                is.read(array)
                IO.now(array.toList)
              }
    } yield list

Will this short circuit ?
Alex Henning Johannessen
@ahjohannessen
Sep 12 15:50
@LeonardMeyer exactly
@jdegoes bracket composes?
Artsiom Miklushou
@mikla
Sep 12 15:54
@guizmaii Oops :) thx
Menestret Martin
@mmenestret_twitter
Sep 12 15:55
@LeonardMeyer something feels wrong about:
is.read(array) IO.now(array.toList) part
Jules Ivanic
@guizmaii
Sep 12 15:55
Hum in fact it’s the way to do this
ಠ_ರೃ
@mrt181_twitter
Sep 12 15:55

  def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    (for {
      fis <- IO.syncException(new FileInputStream(file))
      arr <- IO.syncException(Array.ofDim[Byte](file.length.toInt))
      _   <- IO.syncException(fis.read(arr))
    } yield arr.toList)
      .catchSome({ case e => IO.fail(e) })
      .ensuring(IO.now(()))
}

Menestret Martin
@mmenestret_twitter
Sep 12 15:56
well you could syncException(firstThingy).flatMap(syncException(secondThingy)
so you stop at the first one if it fails
and get the correct exception
see what I mean ?
Alexander Babin
@mudriyjo
Sep 12 15:58
lesson started?
Maciej Kowalski
@fkowal
Sep 12 15:58
y
Alexander Babin
@mudriyjo
Sep 12 15:59
thx
Jules Ivanic
@guizmaii
Sep 12 16:00

  object FileInputStream {
    def openFile(file: File): IO[Exception, FileInputStream] = IO.syncException(new FileInputStream(file))
  }

  def readAll2(is: FileInputStream, lenght: Int): IO[Exception, List[Byte]] =
    IO.syncException {
      val array = Array.ofDim[Byte](lenght)
      is.read(array)
      array.toList
    }

  def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    FileInputStream
      .openFile(file)
      .bracket(fis => IO.syncException(fis.close()).attempt.void)(fis => readAll2(fis, file.length().toInt))

lmeyer
@LeonardMeyer
Sep 12 16:01

@mmenestret_twitter Something like :

    for {
      fileLength <- IO.syncException(file.length).map(_.toInt)
      array <- IO.point(Array.ofDim[Byte](fileLength))
      _ <- IO.syncException(new FileInputStream(file)).bracket(fis => IO.syncException(fis.close()).attempt.void) { is =>
                IO.syncException(is.read(array))
              }
    } yield array.toList

?
Alex Henning Johannessen
@ahjohannessen
Sep 12 16:03
tip: set fork in run := true in build.sbt to have it quit but stay in sbt
Menestret Martin
@mmenestret_twitter
Sep 12 16:03
that's what i'd do I think
@LeonardMeyer
Oleksandra Holubitska
@Vilkina
Sep 12 16:16
can somebody give me a link to javadoc.io repeat?
please (:
Jules Ivanic
@guizmaii
Sep 12 16:17
go on the ZIO website
you’ll find it
ಠ_ರೃ
@mrt181_twitter
Sep 12 16:17
https://static.javadoc.io/org.scalaz/scalaz-zio_2.12/0.2.7/scalaz/zio/IO.html#repeatOrElse[E1%3E:E,B](schedule:scalaz.zio.Schedule[A,B],orElse:(E,B)=%3Escalaz.zio.IO[E1,B]):scalaz.zio.IO[E1,B]
Oleksandra Holubitska
@Vilkina
Sep 12 16:23
I 've missed connection
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:24
Session has not failed for me. Try reconnect.
I believe connection is ok there.
Leszek Gruchała
@leszekgruchala
Sep 12 16:25
all good
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:25
How to use fiveTimes in exercise 2?
Leszek Gruchała
@leszekgruchala
Sep 12 16:25

IO.sync(putStrLn("Hello World")).repeat(fiveTimes)

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:25
Thank you.
Jules Ivanic
@guizmaii
Sep 12 16:26
val repeated1 = putStrLn("Hello World").repeat(fiveTimes)
Leszek Gruchała
@leszekgruchala
Sep 12 16:26
ha! @guizmaii is right, putStrLn is already an IO
Oleksandra Holubitska
@Vilkina
Sep 12 16:32
@mrt181_twitter tnx
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:36
What is (A)?
in the methods John is presenting.
Menestret Martin
@mmenestret_twitter
Sep 12 16:37
in f: (A) => ??? ?
just to tell that is waiting for a function that takes an A type
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:37
running an action?
Menestret Martin
@mmenestret_twitter
Sep 12 16:37
as parameter
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:38
ok.
thanks
Menestret Martin
@mmenestret_twitter
Sep 12 16:38
you're welcome !
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:39
Basic Scala syntax :)
Menestret Martin
@mmenestret_twitter
Sep 12 16:39
It looks like someone had a lot of fun creating all those Schedules / operator xD
Alex Henning Johannessen
@ahjohannessen
Sep 12 16:39
@jdegoes Schedule does not have a monad instance, right?
John A. De Goes
@jdegoes
Sep 12 16:42

//
  // EXERCISE 8
  //
  // Produce a jittered schedule that first does exponential spacing, but then
  // after the spacing reaches 60 seconds, switches over to fixed spacing of
  // 1 minute between recurrences, but will only do that for up to 100 times,
  // and produce a list of the results.
  //
  def mySchedule[A]: Schedule[A, List[A]] = ???

Alex Henning Johannessen
@ahjohannessen
Sep 12 16:42
thx
ಠ_ರೃ
@mrt181_twitter
Sep 12 16:42
can you please c/p the solution later, I need to leave now
Jules Ivanic
@guizmaii
Sep 12 16:43
@mrt181_twitter we'll do that
Bertjan Broeksema
@bbroeksema
Sep 12 16:43
I've to drop out. Family duty is calling. Wonderful session again today @jdegoes !
Menestret Martin
@mmenestret_twitter
Sep 12 16:46

(Schedule.exponential(1.second, 2) && Schedule.fixed(60.seconds)) andThen (Schedule
    .spaced(1.minute) && Schedule.recurs(100))

No idea
Jules Ivanic
@guizmaii
Sep 12 16:46
:smile:
Oleksandra Holubitska
@Vilkina
Sep 12 16:48
:)
John A. De Goes
@jdegoes
Sep 12 16:50

//
  // EXERCISE 8
  //
  // Produce a jittered schedule that first does exponential spacing (starting 
  // from 10 milliseconds), but then after the spacing reaches 60 seconds, 
  // switches over to fixed spacing of 60 seconds between recurrences, but will 
  // only do that for up to 100 times, and produce a list of the results.
  //

Alexander Babin
@mudriyjo
Sep 12 16:53

  def mySchedule[A]: Schedule[A, List[A]] =
    ((Schedule.exponential(100 millisecond).whileValue(_ < 60.seconds)) andThen
      (Schedule.spaced(60 second) && Schedule.recurs(100))) *> Schedule.identity[A].collect.jittered

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 16:54
John can you reduce the zoom a bit so we can see the entire lines of code?
Thanks @mudriyjo
Leszek Gruchała
@leszekgruchala
Sep 12 16:58
blow.gif
Wiem Zine El Abidine
@wi101
Sep 12 16:59
:D
Jules Ivanic
@guizmaii
Sep 12 16:59
ZIO folks have invented the new regex :smile:
realfiretiger
@realfiretiger
Sep 12 16:59
:D
Jorge
@jaliss
Sep 12 16:59
@jdegoes so could I use IO to build a library that can be used from code based on scala Future or Cats Effect? let's say I wanted to build a "portable" library and not force my users on a given library
Leszek Gruchała
@leszekgruchala
Sep 12 16:59
few mind blows today
Alexander Babin
@mudriyjo
Sep 12 17:00
thx
simondumas
@simondumas
Sep 12 17:00
Thanks a lot
Leszek Gruchała
@leszekgruchala
Sep 12 17:00
please also post here how to test schedule, thank you!
Rob Vermazeren
@RobVermazeren
Sep 12 17:01
Thanks! That was very very interesting.
Menestret Martin
@mmenestret_twitter
Sep 12 17:01
Gonna try to find the parts of my brain scattered around the room and going back home, have a nice evening people :). Thanks @jdegoes
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 17:02
Is there a book on all this stuff being considered?
John A. De Goes
@jdegoes
Sep 12 17:03

def mySchedule[A]: Schedule[A, List[A]] =
    (((Schedule.exponential(10.milliseconds).whileValue(_ < 60.seconds)) andThen (
      Schedule.spaced(60.seconds) && Schedule.recurs(100))) *>
      Schedule.identity[A]).collect.jittered

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 17:03
Thanks!
aureliesalmon
@aureliesalmon
Sep 12 17:04
Thanks! This is impressive, and I look forward to tomorrow!
Jorge
@jaliss
Sep 12 17:05
that sounds great @jdegoes
thx
I might be interested in contributing that :)
great session. thanks @jdegoes
Bounkong Khamphousone
@tiboun
Sep 12 17:05
thanks @jdegoes
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 17:13
@jdegoes, collect.jittered would be the same as jittered.collect? At least it compiles.
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 12 17:38
@jdegoes, jittered means random variation of the repeating intervals?
Merunas
@meras
Sep 12 17:49

Hi all, here's 2 recommendations for dinner

prince of India => menu https://www.princeofindiarestaurant.com/menu
cargills, a nice pub/restauraunt next to the golf course => https://www.pitlochrygolf.co.uk/pdfs/Cargills-menu.pdf recommended by my host

would aim for 19:30 - 20:00

any votes for which place to go?
Kurt Logan
@kurtlogan
Sep 12 17:50
I vote indian
Merunas
@meras
Sep 12 17:55
I'm a little worried as the place has some concerning reviews on trip advisor/google
Artsiom Miklushou
@mikla
Sep 12 17:59
Worried about indian place?
Jules Ivanic
@guizmaii
Sep 12 18:00
Ok for the 2
Merunas
@meras
Sep 12 18:02
yes @mikla
Artsiom Miklushou
@mikla
Sep 12 18:03
Google says cargills clubhouse is open till 9pm
Merunas
@meras
Sep 12 18:08
:(
Maciej Kowalski
@fkowal
Sep 12 18:09
Maybe i can go to the Indian płace a bit sonner. Order and the rest know?
3,7. With 131 votes doesnt seem that bad
Merunas
@meras
Sep 12 18:11
look at some of the individual ones that have bad ratings
but anyway, let's just try it
Eric Nelson
@enelson
Sep 12 18:16
I'm gonna sit this one out tonight boys. See you in the morning!
Jules Ivanic
@guizmaii
Sep 12 18:19
19h30 at the Indian restaurant ?
Merunas
@meras
Sep 12 18:19
@fkowal khan babas is open now though
Kurt Logan
@kurtlogan
Sep 12 18:21
19:30 works for me
Maciej Kowalski
@fkowal
Sep 12 18:24
Yes Indian for me
Artsiom Miklushou
@mikla
Sep 12 18:25
on my way to Indian place.
Jules Ivanic
@guizmaii
Sep 12 18:34
@mikla we're inside
John A. De Goes
@jdegoes
Sep 12 18:36
@Eduardo-M-Cavalcanti Yes, that is correct. They are the same either way because collect does not modify durations. It means random variations of the delays produced by the schedule.
I'll be at the Indian place too.
I thought it was 8:00 tonight.
@guizmaii Save me a spot!
Jules Ivanic
@guizmaii
Sep 12 18:40
Ok John. We're waiting you to pass the command. Hurry ! @meras is very angry ! :smile:
Merunas
@meras
Sep 12 18:40
Cmon 😂
I think he meant hungry
Jules Ivanic
@guizmaii
Sep 12 18:41
Who knows 😄
_

John A. De Goes/functional-scala

Rob Vermazeren
@RobVermazeren
Sep 13 07:44
Good morning. I am ready to be enlightened!
Bertjan Broeksema
@bbroeksema
Sep 13 07:44
:+1:
realfiretiger
@realfiretiger
Sep 13 07:44
morning
Menestret Martin
@mmenestret_twitter
Sep 13 07:45
Hi there :wave:
Alexander Babin
@mudriyjo
Sep 13 07:46
Hi
Eric Nelson
@enelson
Sep 13 07:46
Good morning
Amine SAGAAMA
@AmineSagaama
Sep 13 07:46
Hello
balanka
@balanka
Sep 13 07:47
Good morning
Alex Henning Johannessen
@ahjohannessen
Sep 13 07:47
Morning :)
Jules Ivanic
@guizmaii
Sep 13 07:49
Hi :)
Wiem Zine El Abidine
@wi101
Sep 13 07:52
Buongiorno :)
realfiretiger
@realfiretiger
Sep 13 07:52
i dont hear anything
Amine SAGAAMA
@AmineSagaama
Sep 13 07:53
@jdegoes there is no song
Alex Henning Johannessen
@ahjohannessen
Sep 13 07:53
What do you guys use for web frameworks? After almost a week with John, using Play seems like a cardinal sin. Only alternative that I can think of in Scala is http4s as it aligns better with pure FP.
Amine SAGAAMA
@AmineSagaama
Sep 13 07:53
video ok but sound ko
aureliesalmon
@aureliesalmon
Sep 13 07:54
Good morning!
I’m in "waiting to enter » status
Wiem Zine El Abidine
@wi101
Sep 13 07:54
me too
Alexander Babin
@mudriyjo
Sep 13 07:55
@ahjohannessen finch + twitter server
Jules Ivanic
@guizmaii
Sep 13 07:55
Play with its "PlayService" plugin + MacWire + Monix + Cats
Buts Http4s should be better
Amine SAGAAMA
@AmineSagaama
Sep 13 07:56
@jdegoes we can't hear anything
aureliesalmon
@aureliesalmon
Sep 13 07:56
Yep, no sound
balanka
@balanka
Sep 13 07:56
Alex, i have been using scalajs with Play but i am moving to scalajs-http4s
Amine SAGAAMA
@AmineSagaama
Sep 13 07:57
it's ok now
aureliesalmon
@aureliesalmon
Sep 13 07:58
+1
Alex Henning Johannessen
@ahjohannessen
Sep 13 07:58
@balanka We are experimenting with Outwatch and ScalaJS, seems to make Play less relevant once you go that path, e.g. use http4s
A bit frusturating that Play brings about DI / Guice and other crap
@guizmaii Interesting, seems like a good trade-off if you absolutely need to be in Play land.
Jules Ivanic
@guizmaii
Sep 13 08:00
Runtime DI is absolute crap
Alex Henning Johannessen
@ahjohannessen
Sep 13 08:00
Yep, been there done that.
balanka
@balanka
Sep 13 08:00
that's one of the main reason we are moving away from Play
Alex Henning Johannessen
@ahjohannessen
Sep 13 08:02
This is a good paper on why you cannot go half-in with pure FP: https://queue.acm.org/detail.cfm?id=2611829
ಠ_ರೃ
@mrt181_twitter
Sep 13 08:02
yes same
balanka
@balanka
Sep 13 08:03
We are using the following stack: Doobie/http4s/scalajs
Alex Henning Johannessen
@ahjohannessen
Sep 13 08:03
The Curse of the Excluded Middle - "Mostly functional" programming does not work.
Bertjan Broeksema
@bbroeksema
Sep 13 08:05
@jdegoes scala/bug#10270
Leszek Gruchała
@leszekgruchala
Sep 13 08:05
@jdegoes https://github.com/scalaz/scalaz-kleisliio/blob/master/build.sbt#L32-L39
Bertjan Broeksema
@bbroeksema
Sep 13 08:07

"-Xlint:-unused"

Amine SAGAAMA
@AmineSagaama
Sep 13 08:11
https://stackoverflow.com/questions/26940253/in-sbt-how-do-you-override-scalacoptions-for-console-in-all-configurations
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 08:11
@jdegoes, Thanks for the answers.
Leszek Gruchała
@leszekgruchala
Sep 13 08:13

lazy val functionalScala = (project in file(".")).
  settings (
    name          := "Functional Scala",
    organization  := "net.degoes",
    version       := "0.1-SNAPSHOT",
    scalaVersion  := "2.12.6",
    scalacOptions in Compile in console := Seq(
      "-Ypartial-unification",
      "-language:higherKinds",
      "-language:existentials",
      "-Yno-adapted-args",
      "-Xsource:2.13",
      "-Yrepl-class-based"
    ),
[…]

and then reload within sbt
Bertjan Broeksema
@bbroeksema
Sep 13 08:15
@jdegoes can you unmute me? :)
Menestret Martin
@mmenestret_twitter
Sep 13 08:22
This message was deleted
@jdegoes if we could pattern match on IO, would we need attempt / redeem ?
Thank you for the one who asked it :p
dadepo
@dadepo
Sep 13 08:23
You welcome :)
Menestret Martin
@mmenestret_twitter
Sep 13 08:24
Yes I know we can pattern match, but it's not usefriendly since IO is not either E either A cause of type safety and the sum type is wide
Jorge
@jaliss
Sep 13 08:24
good morning .... looks like I have not missed much ...
we're just reviewing yesterday's content?
Wiem Zine El Abidine
@wi101
Sep 13 08:24
yes
Jorge
@jaliss
Sep 13 08:25
great, thx
Menestret Martin
@mmenestret_twitter
Sep 13 08:25
Ok thank you @jdegoes & @dadepo that was my intuition
Wiem Zine El Abidine
@wi101
Sep 13 08:26
@jaliss there is some change in build.sbt (pull it) to not have the problem with unused imports at the console
Jorge
@jaliss
Sep 13 08:26
oh, will do that. thx
Wiem Zine El Abidine
@wi101
Sep 13 08:27
with pleasure
aureliesalmon
@aureliesalmon
Sep 13 08:44
@jdegoes , could you unmute me?
John A. De Goes
@jdegoes
Sep 13 08:54
@aureliesalmon Done!
aureliesalmon
@aureliesalmon
Sep 13 08:54
thanks!
Bertjan Broeksema
@bbroeksema
Sep 13 09:07
@ahjohannessen but it makes working with FP practically impossible, first you have no side effects, and now you can't do half FP either :trollface:
Jorge
@jaliss
Sep 13 09:07
@ahjohannessen if you use Play wouldn't the controller action be the end of the world? You could go down pure FP from there I think.
Bertjan Broeksema
@bbroeksema
Sep 13 09:07
On a more serious note, I haven't seen many context where there is enough FP knowledge to create a pure FP code base
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 09:07
is the audio on
marianobringas
@marianobringas
Sep 13 09:08
not for me
Jorge
@jaliss
Sep 13 09:08
it has not re-started yet
(at least does not look like it for me )
realfiretiger
@realfiretiger
Sep 13 09:08
@jorge by that logic cant you replace play with spring?
Bertjan Broeksema
@bbroeksema
Sep 13 09:08
So what I typically try to do is having pure FP core parts of application / code bases, surrounded with non-pure code
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 09:09
is John talking?
Bertjan Broeksema
@bbroeksema
Sep 13 09:09
This is btw also something that bothers me a bit about scalaz/zio. All these custom operators, make your code look nice, but close to incomprehensible for everyone around you :)
Jorge
@jaliss
Sep 13 09:10
@realfiretiger how does spring get along with scala :)
ಠ_ರೃ
@mrt181_twitter
Sep 13 09:10
someone who never used spring-boot will find spring-boot incomprehensible too
realfiretiger
@realfiretiger
Sep 13 09:10
didnt try it in a few years, im on kotlin + spring atm
but kotlin doesnt have typeclasses :(
so you can be functional only up to a point
Jorge
@jaliss
Sep 13 09:11
yes, @jdegoes is right.
Alex Henning Johannessen
@ahjohannessen
Sep 13 09:11
@jdegoes Is there some instance for zio to cats':

trait LiftIO[F[_]] {
  def liftIO[A](ioa: IO[A]): F[A]
}

or is a natural transformation needed ?
Artsiom Miklushou
@mikla
Sep 13 09:12
Thanks for the question about scalajs!
Jorge
@jaliss
Sep 13 09:13
@jdegoes if I need to use Play can I consider the controller action the end of the world and try to go down pure FP from there?
Jules Ivanic
@guizmaii
Sep 13 09:15

    This is btw also something that bothers me a bit about scalaz/zio. All these custom operators, make your code look nice, but close to incomprehensible for everyone around you :)

The problem is not the code, it’s the people. They have to learn, not complain.
ಠ_ರೃ
@mrt181_twitter
Sep 13 09:15
convince people with code that solves their problems better with FP
but beware, facts don't change peoples minds: https://jamesclear.com/why-facts-dont-change-minds
Jules Ivanic
@guizmaii
Sep 13 09:18
thanks for the article @mrt181_twitter
Artsiom Miklushou
@mikla
Sep 13 09:23
1 - Guess game.
2 - Simulation game. Simulate elevator system in a hotel.
3 - Web crawler.
cverdier
@cverdier
Sep 13 09:24

    A simple functionnal game : console input/ouput and randoms. Ex: The Hanged Man
    A simulation : simulate an Elevator system in a hotel - they have to be efficient...
    A web crawler : collect links, follow them, with real http pages (more realistic : more potential for failures)

Leszek Gruchała
@leszekgruchala
Sep 13 09:24
2
Eric Nelson
@enelson
Sep 13 09:25
3
Artsiom Miklushou
@mikla
Sep 13 09:25
3
Kurt Logan
@kurtlogan
Sep 13 09:25
option 3
Bounkong Khamphousone
@tiboun
Sep 13 09:25
3
Merunas
@meras
Sep 13 09:25
2 or 3
ghazi ben ahmed
@bghazy
Sep 13 09:25
3
Bertjan Broeksema
@bbroeksema
Sep 13 09:25
3
elarib
@elarib
Sep 13 09:25
3
Tomas Kruty
@tomkru
Sep 13 09:25
3
Menestret Martin
@mmenestret_twitter
Sep 13 09:25
3
MA Jian
@sdmj45
Sep 13 09:25
3
marianobringas
@marianobringas
Sep 13 09:25
3
Amine SAGAAMA
@AmineSagaama
Sep 13 09:25
3
aureliesalmon
@aureliesalmon
Sep 13 09:25
2 or 3
Tomas Dlabka
@DoktorZhor
Sep 13 09:25
1/3
cverdier
@cverdier
Sep 13 09:25
2
Alexander Babin
@mudriyjo
Sep 13 09:25
3
lengfab
@lengfab
Sep 13 09:25
3
realfiretiger
@realfiretiger
Sep 13 09:25
2
Alexander Babin
@mudriyjo
Sep 13 09:25
3/2
Oleksandra Holubitska
@Vilkina
Sep 13 09:25
3
Alex Henning Johannessen
@ahjohannessen
Sep 13 09:25
3
Menestret Martin
@mmenestret_twitter
Sep 13 09:25
3 but with a mandatory part on final tagless testing :p
Jorge
@jaliss
Sep 13 09:25
1 + 2
Eric Nelson
@enelson
Sep 13 09:25
1 + 2 = 3
Jorge
@jaliss
Sep 13 09:25
:)
bad joke sorry
Merunas
@meras
Sep 13 09:25
2
Wiem Zine El Abidine
@wi101
Sep 13 09:25
:D
Oleksandra Holubitska
@Vilkina
Sep 13 09:25
or 1
balanka
@balanka
Sep 13 09:26
3
ಠ_ರೃ
@mrt181_twitter
Sep 13 09:26
yes testing
maybe https://scalaz.github.io/testz/
Menestret Martin
@mmenestret_twitter
Sep 13 09:26
Why not fibonnaci ?
jk
Can't read another fibonnaci example :D
Jorge
@jaliss
Sep 13 09:27
lol
Alex Henning Johannessen
@ahjohannessen
Sep 13 09:29
Let's do pubcrawler :D
seems relevant in Moulin :D
Merunas
@meras
Sep 13 09:30
ha
Bertjan Broeksema
@bbroeksema
Sep 13 09:30
execute javascript to get generated URLS from the page :D
Menestret Martin
@mmenestret_twitter
Sep 13 09:34
Could we get that on gitter ? :angel:
Leszek Gruchała
@leszekgruchala
Sep 13 09:34

/**
  * Web crawler
  *
  * - start with a set of seed URLs
  * - for each URL:
  *   - retrieve the HTML content of the URL
  *     - handle failures gracefully
  *     - retry using a crazy complicated retry strategy
  *   - parse the HTML content
  *   - feed the content and URL to a processor
  *   - identify all href links
  *   - filter the href links according to some criteria
  *   - update the working set of URLs to include the href links
  *   - continue the process as long as we have URLs to crawl
  */

Menestret Martin
@mmenestret_twitter
Sep 13 09:34
Thanks !
MA Jian
@sdmj45
Sep 13 09:34
Thanks !
Leszek Gruchała
@leszekgruchala
Sep 13 09:34
:)
ಠ_ರೃ
@mrt181_twitter
Sep 13 09:34
Refined?
Jules Ivanic
@guizmaii
Sep 13 09:35
yes refined could be a good option
Leszek Gruchała
@leszekgruchala
Sep 13 09:36
final case class URL private (url: String) extends AnyVal?
Menestret Martin
@mmenestret_twitter
Sep 13 09:36
@leszekgruchala :+1:
Bertjan Broeksema
@bbroeksema
Sep 13 09:37
What's the point of the extend?
Menestret Martin
@mmenestret_twitter
Sep 13 09:37
a stupid regex as a start ?
@bbroeksema compile safety but at runtime no cost since it's unwrapped to the type of the single field it contains
marianobringas
@marianobringas
Sep 13 09:37
https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html
Salla
@sallareznov
Sep 13 09:37
You have to do that manually
Otherwise, use Apache Commons
Leszek Gruchała
@leszekgruchala
Sep 13 09:37
@bbroeksema it becomes a value class https://docs.scala-lang.org/overviews/core/value-classes.html
Salla
@sallareznov
Sep 13 09:37
dark side
Merunas
@meras
Sep 13 09:38
https://tools.ietf.org/html/rfc2396#appendix-B there's a regex here\
Jules Ivanic
@guizmaii
Sep 13 09:39
how refined seems to do that: https://github.com/fthomas/refined/blob/5cc30db656142fdc96ab81b0319a76534869d15e/modules/core/shared/src/main/scala/eu/timepit/refined/string.scala#L176
Leszek Gruchała
@leszekgruchala
Sep 13 09:40
is it only me with poor audio recently?
Jorge
@jaliss
Sep 13 09:40
audio works good for me
Leszek Gruchała
@leszekgruchala
Sep 13 09:41
ok
realfiretiger
@realfiretiger
Sep 13 09:41
was bad earlier, now seems fine
Menestret Martin
@mmenestret_twitter
Sep 13 09:41
Javascript void that sounds scary as hell
Merunas
@meras
Sep 13 09:43
someone got a url for that so link ?
Leszek Gruchała
@leszekgruchala
Sep 13 09:44
that works

  case class UrlName(value: String) extends AnyVal
  case class UrlContent(value: String) extends AnyVal
  def invokeUrls(urls: Seq[UrlName]): Seq[UrlContent] = {
    urls.map { url =>
      val call = scala.io.Source.fromURL(url.value, "UTF-8")
      UrlContent(call.getLines().toList.mkString(""))
    }
  }

Jorge
@jaliss
Sep 13 09:44
@jdegoes how about :
```

val html = Source.fromURL(url)
val s = html.mkString

thank google :)
Merunas
@meras
Sep 13 09:45
nice
Jens Hoffmann
@jchoffmann
Sep 13 09:47

    The problem is not the code, it’s the people. They have to learn, not complain.

@guizmaii I think people need to be careful with this opinion. Ultimately software is to solve a business problem, not to write as pure code as possible. As a professional you need to find a way do it in a robust and maintainable fashion in the least amount of time.
Alexander Babin
@mudriyjo
Sep 13 09:48
List[Url]?
Jens Hoffmann
@jchoffmann
Sep 13 09:48
If everyone knew FP then clearly this would be the best way. However, if you have a team of 10 people and 9 don't know this, it could lead to big problems in maintaining code like this. I think it's important to keep this in mind. (solution is possibly to enlighten people over time, or find another place to work :) )
Jules Ivanic
@guizmaii
Sep 13 09:50
@jchoffmann I’m clearly more radical than you on that subject.
but I’m working in a startup where I lead the software development so I can be radical
I recruit people wanting to follow me
Jorge
@jaliss
Sep 13 09:51
maybe Set?
so we don't have duplicates
ಠ_ರೃ
@mrt181_twitter
Sep 13 09:51
we want duplicates
ranking links if they appear more often
Sitbon
@nsitbon
Sep 13 09:52
too complicated
Jorge
@jaliss
Sep 13 09:52
yeah, you could then return another a set of another structure that holds the url and a counter
but too much for now
simondumas
@simondumas
Sep 13 09:53
https://github.com/ruippeixotog/scala-scraper ?
Bounkong Khamphousone
@tiboun
Sep 13 09:53
maybe we can name it extractUrls instead of parseHTML
and getContent instead of getUrl
Jules Ivanic
@guizmaii
Sep 13 09:54
:+1:
MA Jian
@sdmj45
Sep 13 09:54
:thumbsup:
marianobringas
@marianobringas
Sep 13 09:55
:+1:
Menestret Martin
@mmenestret_twitter
Sep 13 09:55
Why List[URL] instead of Option[NeL[URL]] or something like that ?
(Missed a part of the discussion there)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 09:58
:thumbsup:
[\"\'] instead of \"
unecessary perfectionism here
simondumas
@simondumas
Sep 13 10:06
This will only work with absolute urls no ?
aureliesalmon
@aureliesalmon
Sep 13 10:06
(for now, yes)
Wiem Zine El Abidine
@wi101
Sep 13 10:07

 def extractURLs(html: String): List[URL] = {
    Try{
      val pattern = "href=\"([^\"]+)\"".r
    val matches = pattern.findAllMatchIn(html).map(_.group(1)).toList
    for {
      m <- matches
      url <- URL(m).toList
    } yield url
    }.fold[List[URL]](_ => Nil, identity)
  }

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 10:08
identity?
Leszek Gruchała
@leszekgruchala
Sep 13 10:08
a => a
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 10:08
:thumbsup:
Jens Hoffmann
@jchoffmann
Sep 13 10:09
@guizmaii Then it's not radical, it's the philosophy that you're setting, and you won't have problems like this. You're in a very nice position which possibly deserves some envy :)
ಠ_ರೃ
@mrt181_twitter
Sep 13 10:11
well you're in the same position, you only need to convince me :D
Menestret Martin
@mmenestret_twitter
Sep 13 10:12
@jdegoes you're not big fan of .getOrElse ?

def extractURLs(root: URL, html: String): List[URL] = {
    val pattern = "href=\"([^\"]+)\"".r
    Try {
      pattern
        .findAllMatchIn(html)
        .map(_.group(1)).toList
        .flatMap(m ⇒ URL.apply(m).orElse(root.relative(m)).toList)
    }.getOrElse(Nil)
  }

Jens Hoffmann
@jchoffmann
Sep 13 10:13
@mrt181_twitter I think both of us don't need convincing, happy to go all the way.
ಠ_ರೃ
@mrt181_twitter
Sep 13 10:14
Narrator: Both developers dived into the pure FP rabbit hole. They were never seen again
Wiem Zine El Abidine
@wi101
Sep 13 10:15
can someone send relative code ?
aureliesalmon
@aureliesalmon
Sep 13 10:15


  final case class URL private(url: String) {
    //or url encode page
    def relative(page: String): Option[URL] = URL(s"$url/$page")
  }

Alexander Babin
@mudriyjo
Sep 13 10:16


    final case class URL private(url: String) {
      def relative(page: String): Option[URL] =
        URL(url + "/" + page)
    }

    object URL {
      def apply(url: String): Option[URL] =
        Try(java.net.URI.create(url)).toOption match {
          case Some(_) => Some (new URL(url))
          case _ => None
        }
    }

    def getUrl(url: URL): IO[Exception, String] =
      IO.syncException(scala.io.Source.fromURL(url.url)(Codec.UTF8).mkString)

    // TODO: Change to parsing into an immutable data structure
    def extractURls(root: URL, content: String): List[URL] = {
      val pattern = "href=[\"\']([^\'\"]+)[\"\']".r
      Try({
        val matches = (for (m <- pattern.findAllMatchIn(content)) yield  m.group(1)).toList
        for {
          m <- matches
          url <- URL(m).toList ++ root.relative(m).toList
        } yield url
      }).fold[List[URL]](_ => Nil, identity)
    }

Wiem Zine El Abidine
@wi101
Sep 13 10:16
Thanks!
Bounkong Khamphousone
@tiboun
Sep 13 10:16
URL(m).orElse(root.relative(m)).toList
aureliesalmon
@aureliesalmon
Sep 13 10:18
going from pattern.findAllMatchIn(html):Iterator[] to a List[] is not a huge step
Menestret Martin
@mmenestret_twitter
Sep 13 10:19
yep
Jules Ivanic
@guizmaii
Sep 13 10:20
+1 @tiboun

  final case class URL private (value: String) extends AnyVal {
    def relative(page: String): Option[URL] = URL(value + "/" + page)
  }
  object URL {
    final def apply(url: String): Option[URL] =
      Try(java.net.URI.create(url)) match {
        case Success(_) => Some(new URL(url))
        case Failure(_) => None
      }
  }

  final case class HTML(content: String) extends AnyVal

  final def getContent(url: URL): IO[Exception, HTML] =
    IO.syncException {
      HTML(Source.fromURL(url.value)(Codec.UTF8).mkString)
    }

  final val urlExtractorPattern = "href=\"([^\"]+)\”".r

  final def extractURLs(rootURL: URL, html: HTML): List[URL] =
    Try {
      val matches = (for (n <- urlExtractorPattern.findAllMatchIn(html.content)) yield n.group(1)).toList

      for {
        m   <- matches
        url <- (URL(m) orElse rootURL.relative(m)).toList
      } yield url
    }.getOrElse(Nil)

aureliesalmon
@aureliesalmon
Sep 13 10:23
Nothing?
or a int? (status code)
ಠ_ರೃ
@mrt181_twitter
Sep 13 10:23
List[Href]
Menestret Martin
@mmenestret_twitter
Sep 13 10:25
@jdegoes do you use IO instead of scala.util.Try ? Or there is still a good reason to keep using it ?
ok
Our own error ADT
aureliesalmon
@aureliesalmon
Sep 13 10:36
I like Either[E, Exception], but if we have other error types to handle, Either will no longer be usable
Menestret Martin
@mmenestret_twitter
Sep 13 10:39
We might need a Semigroup on E too then don't we ?
Jorge
@jaliss
Sep 13 10:41
shouldn't value: A be maybe value: Option[A]? what happens if we can't parse that url completely.
Menestret Martin
@mmenestret_twitter
Sep 13 10:42
We're not going through the creation of an automatic typeclass derivation lib here ?
:p
Jorge
@jaliss
Sep 13 10:43
he
oh, since A is a Monoid it could be empty right?
realfiretiger
@realfiretiger
Sep 13 10:52
why Crawl[Option[E], A] instead of Crawl[E, A]?
Leszek Gruchała
@leszekgruchala
Sep 13 10:52
due to a => Crawl(None, a)
we don’t have error to put into Crawl
Jorge
@jaliss
Sep 13 10:52
because E is not a monoid in the crawl method. I'm confused why E is a monoid in CrawlMonoid but we don't require that in the crawl method ...
realfiretiger
@realfiretiger
Sep 13 10:52
ah right
i understand, thanks
Bertjan Broeksema
@bbroeksema
Sep 13 10:53
Has someone a compiling process1 implementation?
Leszek Gruchała
@leszekgruchala
Sep 13 10:53
but also the question is, why e => Crawl(Some(e), mzero[A]), is fine with mzero[A]? Is it fine to have error with zero A but not zero Error with value A?
Jorge
@jaliss
Sep 13 10:54
yeah, that's what I don't understand.
Merunas
@meras
Sep 13 10:54
redeemPure works
realfiretiger
@realfiretiger
Sep 13 10:55
E is not monoid in crawl
Jorge
@jaliss
Sep 13 10:57
I don't understand why we don't require that.
Alexander Babin
@mudriyjo
Sep 13 11:00
smb can c/p code here?
Jorge
@jaliss
Sep 13 11:00
what you said about having List as the monoid makes sense to me @jdegoes but we require that procesor returns an IO[E, A] ... so what if the processor succeeds then what would E be in that case.
Amine SAGAAMA
@AmineSagaama
Sep 13 11:00

  final case class ProcessorError[E](error: E, url: URL, html: String)

  final case class Crawl[E, A](error: E, value: A)

  object Crawl {
    implicit def CrawlMonoid[E: Monoid, A: Monoid]: Monoid[Crawl[E, A]] =
      new Monoid[Crawl[E, A]] {
        override def zero: Crawl[E, A] = Crawl(mzero[E], mzero[A])

        override def append(f1: Crawl[E, A], f2: => Crawl[E, A]): Crawl[E, A] =
          Crawl(f1.error |+| f2.error, f1.value |+| f2.value)
      }
  }

  def crawl[E, A: Monoid](seed: Set[URL],
                          processor: (URL, String) => IO[E, A]): IO[Exception, Crawl[List[ProcessorError[E]], A]] = {

    def process1(url: URL, html: String): IO[Nothing, Crawl[List[ProcessorError[E]], A]] =
      processor(url, html).redeemPure(
        e => Crawl(List(ProcessorError(e, url, html)), mzero[A]),
        a => Crawl(Nil, a))

    ???
  }

Alexander Babin
@mudriyjo
Sep 13 11:01
@AmineSagaama thanks
aureliesalmon
@aureliesalmon
Sep 13 11:02
@jaliss that’s why he switched to Option[E], then List to incorporate the notion of « no error » => Nil
Jorge
@jaliss
Sep 13 11:03
@aureliesalmon see my comment above about the return type of processor
ಠ_ರೃ
@mrt181_twitter
Sep 13 11:05
my compiler does not find mzero?
elarib
@elarib
Sep 13 11:05
@mrt181_twitter import scalaz.Scalaz._
Amine SAGAAMA
@AmineSagaama
Sep 13 11:05
why we force E to be a monoid in the first crawl ???
Leszek Gruchała
@leszekgruchala
Sep 13 11:05
due to a => Crawl(mzero[E], a)
Jorge
@jaliss
Sep 13 11:05
ah, nvm .... I'm asking something stupid .. we'll know if there was an error or not when we redeem the IO returned by processor
ಠ_ರೃ
@mrt181_twitter
Sep 13 11:06
@elarib thx
Jorge
@jaliss
Sep 13 11:07
this was great, a lot to digest @jdegoes :)
Amine SAGAAMA
@AmineSagaama
Sep 13 11:07
@leszekgruchala I mean why we change the implementation of the function and so we have to use the monoid
Jorge
@jaliss
Sep 13 11:07
can you copy + paste the code you have so far?
yeah, you did @jdegoes thx
Leszek Gruchała
@leszekgruchala
Sep 13 11:09
@AmineSagaama we didn’t change the implementation of crawl, crawlE does not need E: Monoid
Wiem Zine El Abidine
@wi101
Sep 13 11:10

def crawE[E, A: Monoid](seed: Set[URL], processor: (URL, String) => IO[E, A])
    : IO[Exception, Crawl[List[ProcessorError[E]], A]] =
    crawl(seed,
          (url, html) =>
            processor(url, html)
              .redeem(e => IO.fail(List(ProcessorError(e, url, html))), IO.now))

Amine SAGAAMA
@AmineSagaama
Sep 13 11:11
function crawlE answer my question thanks
John A. De Goes
@jdegoes
Sep 13 11:12

  final case class URL private (url: String) {
    final def relative(page: String): Option[URL] = URL(url + "/" + page)
  }
  object URL {
    def apply(url: String): Option[URL] =
      // TODO: Replace URI.create by something better
      scala.util.Try(java.net.URI.create(url)).toOption match {
        case None => None
        case Some(_) => Some(new URL(url))
      }
  }

  def getURL(url: URL): IO[Exception, String] =
    IO.syncException(scala.io.Source.fromURL(url.url)(scala.io.Codec.UTF8).mkString)

  // TODO: Change to parsing into an immutable data structure
  def extractURLs(root: URL, html: String): List[URL] = {
    val pattern = "href=[\"\']([^\"\']+)[\"\']".r

    scala.util.Try({
      val matches = (for (m <- pattern.findAllMatchIn(html)) yield m.group(1)).toList

      for {
        m   <- matches
        url <- URL(m).toList ++ root.relative(m).toList
      } yield url
    }).getOrElse(Nil)
  }

  final case class ProcessorError[E](error: E, url: URL, html: String)
  final case class Crawl[E, A](error: E, value: A) {
    def leftMap[E2](f: E => E2): Crawl[E2, A] = Crawl(f(error), value)
    def map[A2](f: A => A2): Crawl[E, A2] = Crawl(error, f(value))
  }
  object Crawl {
    implicit def CrawlMonoid[E: Monoid, A: Monoid]: Monoid[Crawl[E, A]] =
      new Monoid[Crawl[E, A]]{
        def zero: Crawl[E, A] = Crawl(mzero[E], mzero[A])
        def append(l: Crawl[E, A], r: => Crawl[E, A]): Crawl[E, A] =
          Crawl(l.error |+| r.error, l.value |+| r.value)
      }
  }

  def crawl[E: Monoid, A: Monoid](
    seeds     : Set[URL],
    processor : (URL, String) => IO[E, A]): IO[Exception, Crawl[E, A]] = {
      def process1(url: URL, html: String): IO[Nothing, Crawl[E, A]] =
        processor(url, html).redeemPure(
          e => Crawl(e, mzero[A]),
          a => Crawl(mzero[E], a))

      ???
    }

  def crawlE[E, A: Monoid](
    seeds     : Set[URL],
    processor : (URL, String) => IO[E, A]): IO[Exception, Crawl[List[ProcessorError[E]], A]] =
    crawl(seeds, (url, html) => processor(url, html).redeem(
      e => IO.fail(List(ProcessorError(e, url, html))), IO.now))

Artsiom Miklushou
@mikla
Sep 13 11:21
Somebody is not muted and we hear everything :)
marianobringas
@marianobringas
Sep 13 11:59
hey @jdegoes you’re muted
John A. De Goes
@jdegoes
Sep 13 11:59
Will unmute soon
marianobringas
@marianobringas
Sep 13 11:59
thx
Alex Henning Johannessen
@ahjohannessen
Sep 13 12:15
@jdegoes Does this look ok?

  def crawl[E: Monoid, A: Monoid](
    seed: Set[URL],
    processor: (URL, String) ⇒ IO[E, A],
    criteria: URL ⇒ Boolean,
    maxDepth: Int
  ): IO[Exception, Crawl[E, A]] = {

    def process1(url : URL, html: String): IO[Nothing, Crawl[E, A]] =
      processor(url, html).redeemPure(
        f ⇒ Crawl(f, mzero[A]),
        s ⇒ Crawl(mzero[E], s)
      )

    def processUrl(url : URL, d: Int): IO[Exception, Crawl[E, A]] = for {
      content ← getURL(url)
      res     ← process1(url, content)
      links   = extractURLs(url, content)
      ress    ← if(d <= 0) IO.point(Nil)
                 else IO.parTraverse(links.filter(criteria))(processUrl(_, d - 1))
    } yield (res :: ress).foldMap()


    IO.parTraverse(seed)(processUrl(_, maxDepth)).map(_.foldMap())

  }

Sitbon
@nsitbon
Sep 13 12:17
yes
Bounkong Khamphousone
@tiboun
Sep 13 12:20
@jdegoes Is it possible to restrain the parallelism level when using parAll ?
thanks
ಠ_ರೃ
@mrt181_twitter
Sep 13 12:21
thats bad for IO
Alex Henning Johannessen
@ahjohannessen
Sep 13 12:22
not if you have 72-core :trollface:
ಠ_ರೃ
@mrt181_twitter
Sep 13 12:22
showoff :smile:
Wiem Zine El Abidine
@wi101
Sep 13 12:23
are you back?
ghazi ben ahmed
@bghazy
Sep 13 12:23
yes
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:23
yes, he's back
Wiem Zine El Abidine
@wi101
Sep 13 12:23
:o
I can't join -_-
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:23
sorry, I meant John
Menestret Martin
@mmenestret_twitter
Sep 13 12:23
I have no sound / video
do you ?
Leszek Gruchała
@leszekgruchala
Sep 13 12:23
All works for me
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:23
I have.
Leszek Gruchała
@leszekgruchala
Sep 13 12:24
@wi101 try again
Wiem Zine El Abidine
@wi101
Sep 13 12:24
yes
Menestret Martin
@mmenestret_twitter
Sep 13 12:24
ok got it
Wiem Zine El Abidine
@wi101
Sep 13 12:24
now :)
thanks !
Alex Henning Johannessen
@ahjohannessen
Sep 13 12:25
@jdegoes Your filter only applies to the processor? The urls are still being downloaded?
Alexander Babin
@mudriyjo
Sep 13 12:27
freez???
ಠ_ರೃ
@mrt181_twitter
Sep 13 12:27
type tag
?
Sitbon
@nsitbon
Sep 13 12:27
yep
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:28
sound is failing.
marianobringas
@marianobringas
Sep 13 12:28
sound is gone
Alexander Babin
@mudriyjo
Sep 13 12:28
and video
=(
Amine SAGAAMA
@AmineSagaama
Sep 13 12:28
sound is gone
Merunas
@meras
Sep 13 12:28
should be reconnected now
Amine SAGAAMA
@AmineSagaama
Sep 13 12:28
ok now
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:28
back
Oleksandra Holubitska
@Vilkina
Sep 13 12:30
looks like php code but more powerful and less implementation
and no foreach :)
Jorge
@jaliss
Sep 13 12:35
no audio
marianobringas
@marianobringas
Sep 13 12:35
sound is breaking
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:36
sound failing
Jorge
@jaliss
Sep 13 12:36
broke
Leszek Gruchała
@leszekgruchala
Sep 13 12:36
Yeah, sound lost
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:36
sound back
Jorge
@jaliss
Sep 13 12:36
back
thx
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:43
What should be a "B"?
Menestret Martin
@mmenestret_twitter
Sep 13 12:44
:bee:
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 12:45
in def crawl[E: Monoid, A: Monoid, B]
Never mind.
Alex Henning Johannessen
@ahjohannessen
Sep 13 12:49
_.foldMap()
@jdegoes
aureliesalmon
@aureliesalmon
Sep 13 12:51
(sorry for reverb><)
Jorge
@jaliss
Sep 13 12:51
np!
aureliesalmon
@aureliesalmon
Sep 13 12:52
fold exist but when trying to use it, we fallback to TraversableOnce fold ><
Oleksandra Holubitska
@Vilkina
Sep 13 12:53
its all non-blocking? for async calls
Bounkong Khamphousone
@tiboun
Sep 13 12:56
@jdegoes We probably need to filter already visited URLs in order to avoid an infinite loop
Merunas
@meras
Sep 13 13:01
can you c/p that implementation ?
Jules Ivanic
@guizmaii
Sep 13 13:01

  final def crawl[E: Monoid, A: Monoid](
      seed: Set[URL],
      router: URL => Set[URL],
      processor: (URL, HTML) => IO[E, A]
  ): IO[Exception, Crawl[E, A]] = {
    def process1(url: URL, html: HTML): IO[Nothing, Crawl[E, A]] =
      processor(url, html)
        .redeemPure(e => Crawl(errors = e, value = mzero[A]), a => Crawl(errors = mzero[E], value = a))

    IO.parTraverse(seed.flatMap(router)) { url: URL =>
        for {
          html    <- getContent(url)
          crawled <- process1(url, html)
          links = extractURLs(url, html).toSet.flatMap(router)
        } yield (crawled, links)
      }
      .map(_.foldMap(identity)) // IO[List[(Crawl[E, A], Set[URL])] => (Crawl[E, A], Set[URL])] because Crawl is a Monoid as well as Set. `foldMap` beauty !
      .flatMap {
        case (crawl0, links) => crawl(links, router, processor).map(crawl0 |+| _)
      }
  }

Merunas
@meras
Sep 13 13:02
how do I get the |+| ?
Jules Ivanic
@guizmaii
Sep 13 13:02
from scalaz imports
Artsiom Miklushou
@mikla
Sep 13 13:03
import scalaz._ import Scalaz._
Alexander Babin
@mudriyjo
Sep 13 13:03
add type in crawl0 case (crawl0: Crawl[E, A], links) =>
Jules Ivanic
@guizmaii
Sep 13 13:03

import scalaz._
import Scalaz._

Jorge
@jaliss
Sep 13 13:03
why do we need identity again? missed that
Jules Ivanic
@guizmaii
Sep 13 13:03
because we do nothing in the foldMap ?
Leszek Gruchała
@leszekgruchala
Sep 13 13:03
We don’t because it’s a default function in a foldMap
Jorge
@jaliss
Sep 13 13:03
oh
thx
Leszek Gruchała
@leszekgruchala
Sep 13 13:04

final def foldMap[B: Monoid](f: A => B = (a: A) => a): B = F.foldMap(self)(f)

see f: A => B = (a: A) => a
Merunas
@meras
Sep 13 13:04
I've got
import scalaz.
import Scalaz.
Jorge
@jaliss
Sep 13 13:04
thx @leszekgruchala
Alexander Babin
@mudriyjo
Sep 13 13:04
@meras try add in crawl0 case (crawl0: Crawl[E, A], links) =>
Jules Ivanic
@guizmaii
Sep 13 13:04
@meras is it Intellij error or Scalac error ?
Jorge
@jaliss
Sep 13 13:04
you're missing the underscore at the end @meras
Leszek Gruchała
@leszekgruchala
Sep 13 13:05
IDEA shows error at .map(crawl0 |+| _) whereas it compiles in sbt
Jules Ivanic
@guizmaii
Sep 13 13:05
Intellij doesn’t understand .map(crawl0 |+| _ ) but it understand .map(_ |+| crawl0)
Jorge
@jaliss
Sep 13 13:05
in some places it does
Leszek Gruchała
@leszekgruchala
Sep 13 13:05
thx
Jorge
@jaliss
Sep 13 13:05
for others it shows it in red
cverdier
@cverdier
Sep 13 13:06
error in Intellij disappears if you use .map(_.foldMap(identity)), so probably inference mess up when you use the default value
(error on .map(crawl0 |+| _) I mean)
Menestret Martin
@mmenestret_twitter
Sep 13 13:09

def crawl[E: Monoid, A: Monoid](
      seeds: Set[URL],
      routing: URL ⇒ Set[URL],
      processor: (URL, String) => IO[E, A]): IO[Exception, Crawl[E, A]] = {

    def loop(seeds: Set[URL], acc: Crawl[E, A]): IO[Exception, Crawl[E, A]] = {
      IO.traverse(seeds) { url ⇒
          for {
            html ← getURL(url)
            crawl ← process1(url, html)
            links ← IO.now(extractURLs(url, html).toSet.flatMap(routing))
          } yield (crawl, links)
        }
        .map(_.foldMap())
        .flatMap {
          case (crawl0, links) ⇒
            loop(links, acc |+| crawl0)
        }
    }

    def process1(url: URL, html: String): IO[Nothing, Crawl[E, A]] =
      processor(url, html)
        .redeemPure(e => Crawl(e, mzero[A]), a => Crawl(mzero[E], a))

    loop(seeds, mzero[Crawl[E, A]])
  }

That compiles
John A. De Goes
@jdegoes
Sep 13 13:09

  def crawl[E: Monoid, A: Monoid](
    seeds     : Set[URL],
    router    : URL => Set[URL],
    processor : (URL, String) => IO[E, A]): IO[Exception, Crawl[E, A]] = {
      def loop(seeds: Set[URL], acc: Crawl[E, A]): IO[Exception, Crawl[E, A]] = {
        (IO.traverse(seeds) { url =>
          for {
            html  <- getURL(url)
            crawl <- process1(url, html)
            links = extractURLs(url, html).toSet.flatMap(router)
          } yield (crawl, links)
        }).map(_.foldMap(identity)).flatMap {
          case (crawl0, links) => loop(links, acc |+| crawl0)
        }
      }

      def process1(url: URL, html: String): IO[Nothing, Crawl[E, A]] =
        processor(url, html).redeemPure(Crawl(_, mzero[A]), Crawl(mzero[E], _))

      loop(seeds, mzero[Crawl[E, A]])
    }

Alex Henning Johannessen
@ahjohannessen
Sep 13 13:13
seeds instead of links
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 13:20
Great explanation!
Bertjan Broeksema
@bbroeksema
Sep 13 13:23
Epic :)
Alex Henning Johannessen
@ahjohannessen
Sep 13 13:25
@jdegoes I think you mean: visited ++ seeds instead of visited ++ links
Amine SAGAAMA
@AmineSagaama
Sep 13 13:32
can someone share the entire class please ?
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 13:33
+1
Leszek Gruchała
@leszekgruchala
Sep 13 13:33

object FunctionalScala extends App {

  final case class URL private(url: String) extends AnyVal {

    def relative(page: String): Option[URL] = URL(url + "/" + page)
  }

  object URL {

    def apply(url: String): Option[URL] =
      Try(java.net.URI.create(url)).fold(_ => None, _ => Some(new URL(url)))
  }

  def getURL(url: URL): IO[Exception, String] =
    IO.syncException(Source.fromURL(url.url)(Codec.UTF8).mkString)

  // TODO: Change to parsing into an immutable data structure
  def extractURls(root: URL, content: String): List[URL] = {
    val pattern = """href="([^"]+)["']""".r
    Try({
      val matches = (for (m <- pattern.findAllMatchIn(content)) yield m.group(1)).toList
      for {
        m <- matches
        url <- URL(m).toList ++ root.relative(m).toList
      } yield url
    }).fold[List[URL]](_ => Nil, identity)
  }

  final case class ProcessorError[E](error: E, url: URL, html: String)

  final case class Crawl[E, A](error: E, value: A) {

    def leftMap[E2](f: E => E2): Crawl[E2, A] = Crawl(f(error), value)

    def map[A2](f: A => A2): Crawl[E, A2] = Crawl(error, f(value))
  }

  object Crawl {

    implicit def CrawlMonoid[E: Monoid, A: Monoid]: Monoid[Crawl[E, A]] =
      new Monoid[Crawl[E, A]] {
        override def zero: Crawl[E, A] = Crawl(mzero[E], mzero[A])

        override def append(l: Crawl[E, A], r: => Crawl[E, A]): Crawl[E, A] =
          Crawl(l.error |+| r.error, l.value |+| r.value)
      }
  }

  val DefaultCrawlScheduler = (Schedule.exponential(10.milliseconds).jittered && Schedule.recurs(20)).void

  def crawl[E: Monoid, A: Monoid](
    seeds     : Set[URL],
    router    : URL => Set[URL],
    processor : (URL, String) => IO[E, A],
    schedule  : Schedule[Exception, Unit] = DefaultCrawlScheduler
  ): IO[Exception, Crawl[E, A]] = {
      def loop(seeds: Set[URL], visited:Set[URL], acc: Crawl[E, A]): IO[Exception, Crawl[E, A]] = {
        IO.traverse(seeds) { url =>
          for {
            html  <- getURL(url).retry(schedule)
            crawl <- process1(url, html)
            links = extractURls(url, html).toSet.flatMap(router) diff visited
          } yield (crawl, links)
        }.map(_.foldMap(identity)).flatMap {
          case (crawl0, links) => loop(links, visited ++ seeds, acc |+| crawl0)
        }
      }

      def process1(url: URL, html: String): IO[Nothing, Crawl[E, A]] =
        processor(url, html).redeemPure(Crawl(_, mzero[A]), Crawl(mzero[E], _))

      loop(seeds, Set.empty, mzero[Crawl[E, A]])
    }

  //Another, more constrained way of crawl method
  def crawlE[E, A: Monoid](
    seed     : Set[URL],
    router   : URL => Set[URL],
    processor: (URL, String) => IO[E, A]
  ): IO[Exception, Crawl[List[ProcessorError[E]], A]] =
    crawl(seed, router,
      (url, html) =>
        processor(url, html)
        .redeem(e => IO.fail(List(ProcessorError(e, url, html))), IO.now))

  /**
    * Web crawler
    *
    * - start with a set of seed URLs
    * - for each URL:
    *   - retrieve the HTML content of the URL
    *     - handle failures gracefully
    *     - retry using a crazy complicated retry strategy
    *   - parse the HTML content
    *   - feed the content and URL to a processor
    *   - identify all href links
    *   - filter the href links according to some criteria
    *   - update the working set of URLs to include the href links
    *   - continue the process as long as we have URLs to crawl
    */
  def run(args: List[String]): IO[Nothing, ExitStatus] =
    (for {
      _ <- putStrLn("Hello World!")
    } yield
      ()).redeemPure(_ => ExitStatus.ExitNow(1), _ => ExitStatus.ExitNow(0))
}

Alex Henning Johannessen
@ahjohannessen
Sep 13 13:33
google :)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 13:34
Thanks!
Sitbon
@nsitbon
Sep 13 13:34
@jdegoes we may also need to decode links...
Amine SAGAAMA
@AmineSagaama
Sep 13 13:35
@leszekgruchala thanks !
Simon Mittermueller
@simonmit
Sep 13 13:46
interpolation!
Line 100
aureliesalmon
@aureliesalmon
Sep 13 13:49

  def run(args: List[String]): IO[Nothing, ExitStatus] =
    (for {
      _ <- putStrLn("Hello World!")
      seeds ← IO.traverse(args)(toURL).map(_.toSet)
      _ <- putStrLn(s"Seeds: ${seeds.mkString(",\n")}")
      router = (url: URL) ⇒ if (url.url.contains("zio")) Set(url) else Set.empty[URL]
      processor = (url: URL, html: String) ⇒ putStrLn(s"Traversing $url: ${html.take(100)}")
      crawl ← crawlE(seeds, router, processor)
      _ ← putStrLn(s"Errors: ${crawl.error.mkString(",\n")}")
      _ <- putStrLn("Bye!")
    } yield ()).redeemPure(_ => ExitStatus.ExitNow(1), _ => ExitStatus.ExitNow(0))

Bertjan Broeksema
@bbroeksema
Sep 13 13:52
Does running it actually yields result for someone?
Amine SAGAAMA
@AmineSagaama
Sep 13 13:52
yes
going to zio githhub site
Bertjan Broeksema
@bbroeksema
Sep 13 13:52
:/
Amine SAGAAMA
@AmineSagaama
Sep 13 13:52
put this in the input : https://github.com/scalaz/scalaz-zio
Bertjan Broeksema
@bbroeksema
Sep 13 13:53
Mine just prints

Seeds:

Amine SAGAAMA
@AmineSagaama
Sep 13 13:53
yes
Simon Mittermueller
@simonmit
Sep 13 13:53
Program arguments
Amine SAGAAMA
@AmineSagaama
Sep 13 13:53
put the url now
and enter
Menestret Martin
@mmenestret_twitter
Sep 13 13:53
Mine get stuck after 1 traversing
Bounkong Khamphousone
@tiboun
Sep 13 13:54
sale
same
aureliesalmon
@aureliesalmon
Sep 13 13:54
(i’m so sad now… poor crawler stuck^^)
Amine SAGAAMA
@AmineSagaama
Sep 13 13:54
I hear the sound of my CPU in my case
Menestret Martin
@mmenestret_twitter
Sep 13 13:55
Traversing https://scalaz.github.io/scalaz-zio/: <html><head><title>ZIO: Home</title><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible" conte ?
for you too ?
ಠ_ರೃ
@mrt181_twitter
Sep 13 13:55
i get the saem
Amine SAGAAMA
@AmineSagaama
Sep 13 13:56
it redirects me to the github page of zio via Chrome
John A. De Goes
@jdegoes
Sep 13 13:56
We'll look at bugs after the break.
Alex Henning Johannessen
@ahjohannessen
Sep 13 13:56
no protocol: /scalaz-zio/img/favicon.png
:D
John A. De Goes
@jdegoes
Sep 13 13:57
Probably it's retrying on malformed URLs.
aureliesalmon
@aureliesalmon
Sep 13 14:05
We may miss a stop condition on loop (if seeds is empty)
Menestret Martin
@mmenestret_twitter
Sep 13 14:06

def run(args: List[String]): IO[Nothing, ExitStatus] =
    (for {
      seeds ← IO.traverse(args)(toURL).map(_.toSet)
      router = (url: URL) ⇒
        if (url.url.contains("zio")) Set(url) else Set.empty[URL]
      processor = (url: URL, html: String) ⇒
        IO.syncException(List(s"Traversing ${url.url}: ${html.take(100)}"))
      crawl ← crawlE(seeds, router, processor)
      _ ← console.putStrLn(crawl.value.mkString("\n"))
      _ ← console.putStrLn(crawl.error.mkString("\n"))
    } yield
      ()).redeemPure(_ => ExitStatus.ExitNow(1), _ => ExitStatus.ExitNow(0))

gives me a Exception: sbt.TrapExitSecurityException thrown from the UncaughtExceptionHandler in thread ...
This message was deleted
Leszek Gruchała
@leszekgruchala
Sep 13 14:07
you may need to fork jvm when you run the app
aureliesalmon
@aureliesalmon
Sep 13 14:09
no sound
marianobringas
@marianobringas
Sep 13 14:09
is sound dead again?
Menestret Martin
@mmenestret_twitter
Sep 13 14:09
:/
Jorge
@jaliss
Sep 13 14:09
I have no sound
either
marianobringas
@marianobringas
Sep 13 14:09
video is frozen now
Amine SAGAAMA
@AmineSagaama
Sep 13 14:09
yes, no sound & video
Bertjan Broeksema
@bbroeksema
Sep 13 14:10
Yeah, well @jdegoes is downloading the internet :trollface:
Menestret Martin
@mmenestret_twitter
Sep 13 14:11
@leszekgruchala thanks, I got that now: scalaz.zio.Errors$UnhandledError: An error was not handled by a fiber: java.net.MalformedURLException: no protocol: /scalaz-zio/interop.html
Could you why I had to fork ?
I'm doing that now:

def run(args: List[String]): IO[Nothing, ExitStatus] =
    (for {
      seeds ← IO.traverse(args)(toURL).map(_.toSet)
      router = (url: URL) ⇒
        if (url.url.contains("zio")) Set(url) else Set.empty[URL]
      processor = (url: URL, html: String) ⇒
        IO.syncException(List(s"Traversing ${url.url}: ${html.take(100)}"))
      f ← crawlE(seeds, router, processor).fork
      crawl ← f.join
      _ ← console.putStrLn(crawl.value.mkString("\n"))
      _ ← console.putStrLn(crawl.error.mkString("\n"))
    } yield
      ()).redeemPure(_ => ExitStatus.ExitNow(1), _ => ExitStatus.ExitNow(0))

Leszek Gruchała
@leszekgruchala
Sep 13 14:13
because when you start sbt it spawns a jvm instance, then you run the App which shutsdown at the end, which in fact tries to shut down to sbt’s jvm - but sbt has some internal mess to deal with it like sbt.TrapExitSecurityException
Jules Ivanic
@guizmaii
Sep 13 14:13
my network here is so bad, I can’t test my program :’(
Leszek Gruchała
@leszekgruchala
Sep 13 14:14
you can also apply sbt configuration which will start new jvm instance (that’s what I meant by fork) when you runMain within sbt
you can in sbt configuration

.settings(
          fork in (run) := true,

Bounkong Khamphousone
@tiboun
Sep 13 14:17
@jdegoes like @aureliesalmon said we may traverse empty seeds and we go into an infinite loop.
Jules Ivanic
@guizmaii
Sep 13 14:17
no protocol: /scalaz-zio/img/favicon.png we don’t handle the relative URLs correctly
Leszek Gruchała
@leszekgruchala
Sep 13 14:19
with forking it looks like it

sbt:Functional Scala> runMain net.degoes.FunctionalScala https://scalaz.github.io/testz/
[info] Packaging /Users/lgr/projects/courses/functional-scala/target/scala-2.12/functional-scala_2.12-0.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Running (fork) net.degoes.FunctionalScala https://scalaz.github.io/testz/
[info] Seeds: URL(https://scalaz.github.io/testz/)
[info] Traversing https://scalaz.github.io/testz/: <html><head><title>testz: Home</title><meta charset="utf-8" /><meta http-equiv="X-UA-Compatible” con

(I mean sbt forking within sbt)
ಠ_ರೃ
@mrt181_twitter
Sep 13 14:21
so with tagless final we abstract over the exceution context?
Leszek Gruchała
@leszekgruchala
Sep 13 14:22
yes!
Jorge
@jaliss
Sep 13 14:24
this is so cool
Jorge
@jaliss
Sep 13 14:30
@jdegoes we are abstracting the effect but we're also imposing that only effects that expect 2 parameter types can be used correct? Eg: IO or Either.
ಠ_ರೃ
@mrt181_twitter
Sep 13 14:30
(*, *) => *
Leszek Gruchała
@leszekgruchala
Sep 13 14:31
I think yes, because only zio is a bifunctor.
but there is also MonadError[F[_], S] in scalaz and ApplicativeError[F[_], E] in cats
altough the types look different.
Alex Henning Johannessen
@ahjohannessen
Sep 13 14:32
@jdegoes Would you evolve it like this?

  object Retryable {
    case class Options(times: Int, delay: Duration, etc...)
  }

Menestret Martin
@mmenestret_twitter
Sep 13 14:32

object Retryable {
    def apply[F[_, _]](implicit F: Retryable[F]): Retryable[F] = F
    implicit def retryIO[E, A, B](implicit sch: Schedule[E, A]) =
      new Retryable[IO] {
        override def retry[E, A, B](f: IO[E, A]): IO[E, A] = f.retry(sch)
      }
  }

Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 14:32
What is the purpose of this implementation?
retryable, httpclient, etc
Alexander Babin
@mudriyjo
Sep 13 14:33
smb know how trace execution/debuggin
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 14:34
ok.
thanks
Menestret Martin
@mmenestret_twitter
Sep 13 14:36
What was @jdegoes implementation of Retryable ?
Does some1 have it ?
Jules Ivanic
@guizmaii
Sep 13 14:37
he didn’t implement it
Menestret Martin
@mmenestret_twitter
Sep 13 14:37
ok
@jaliss yes you're right, you'll probably want to fix the E type to abstract over X => X type
I guess
Leszek Gruchała
@leszekgruchala
Sep 13 14:38
probably saying that F[_, _]: Monad would help us avoid building some methods like F.traverse
Menestret Martin
@mmenestret_twitter
Sep 13 14:38
Yes or at least foldable
But anyway we are flatMappi,ng over it
so we'll have to need it
Leszek Gruchała
@leszekgruchala
Sep 13 14:39
but then we will need to provide more for our test F instance
Jorge
@jaliss
Sep 13 14:39
@mmenestret_twitter maybe ...
Menestret Martin
@mmenestret_twitter
Sep 13 14:40
Anyway our crawl has sequential operations that depends on the one before, so even in test I guess we'll still have to provide a monad there
ಠ_ರೃ
@mrt181_twitter
Sep 13 14:49
i dont have Effect[F].monad?
do i need some import?
Bounkong Khamphousone
@tiboun
Sep 13 14:49
You need to add def apply[F[_,_]](implicit F: Effect[F]) = F
ಠ_ರೃ
@mrt181_twitter
Sep 13 14:50
thx
can someone c//p the effect syntax
aureliesalmon
@aureliesalmon
Sep 13 14:53
sound is bad
Amine SAGAAMA
@AmineSagaama
Sep 13 14:57

  implicit class EffectSyntax[F[_, _], E1, A](fea: F[E1, A]) {
    def redeem[E2, B](err: E1 => F[E2, B], succ: A => F[E2, B])(implicit F: Effect[F]): F[E2, B] =
      F.redeem(fea)(err, succ)

    def redeemPure[B](err: E1 => B, succ: A => B)(implicit F: Effect[F]): F[Nothing, B] =
      redeem(
        err.andThen(F.monad[Nothing].point[B](_)),
        succ.andThen(F.monad[Nothing].point[B](_))
      )

  }

ಠ_ರೃ
@mrt181_twitter
Sep 13 15:01
ladies and gents, need to drop out for today now, please post everything interesting here (code, comments, everything john says (transcript) :smile:
Leszek Gruchała
@leszekgruchala
Sep 13 15:03
I am affraid we will not convince much people to go into that rabbit hole...
Jorge
@jaliss
Sep 13 15:04
maybe not, but if you fully grasp this you'll be like Neo in the Matrix ;-)
John A. De Goes
@jdegoes
Sep 13 15:04

package net.degoes

import scala.concurrent.duration._

import scalaz.zio._
import scalaz.zio.console._

import scalaz._
import Scalaz._

object FunctionalScala extends App {
  final case class URL private (url: String) {
    final def relative(page: String): Option[URL] = URL(url + "/" + page)
  }
  object URL {
    def apply(url: String): Option[URL] =
      scala.util.Try(new java.net.URI(url).parseServerAuthority()).toOption match {
        case None => None
        case Some(_) => Some(new URL(url))
      }
  }

  trait HttpClient[F[_, _]] {
    def getURL(url: URL): F[Exception, String]
  }
  object HttpClient {
    def apply[F[_, _]](implicit F: HttpClient[F]): HttpClient[F] = F

    implicit val HttpClientIO: HttpClient[IO] =
      new HttpClient[IO] {
        def getURL(url: URL): IO[Exception, String] =
          IO.syncException(scala.io.Source.fromURL(url.url)(scala.io.Codec.UTF8).mkString).
            retry(DefaultCrawlSchedule)
      }
  }

  def getURL[F[_, _]: HttpClient](url: URL): F[Exception, String] =
    HttpClient[F].getURL(url)

  def extractURLs(root: URL, html: String): List[URL] = {
    val pattern = "href=[\"\']([^\"\']+)[\"\']".r

    scala.util.Try({
      val matches = (for (m <- pattern.findAllMatchIn(html)) yield m.group(1)).toList

      for {
        m   <- matches
        url <- URL(m).toList ++ root.relative(m).toList
      } yield url
    }).getOrElse(Nil)
  }

  final case class Crawl[E, A](error: E, value: A) {
    def leftMap[E2](f: E => E2): Crawl[E2, A] = Crawl(f(error), value)
    def map[A2](f: A => A2): Crawl[E, A2] = Crawl(error, f(value))
  }
  object Crawl {
    implicit def CrawlMonoid[E: Monoid, A: Monoid]: Monoid[Crawl[E, A]] =
      new Monoid[Crawl[E, A]]{
        def zero: Crawl[E, A] = Crawl(mzero[E], mzero[A])
        def append(l: Crawl[E, A], r: => Crawl[E, A]): Crawl[E, A] =
          Crawl(l.error |+| r.error, l.value |+| r.value)
      }
  }

  val DefaultCrawlSchedule: Schedule[Exception, Unit] =
    Schedule.once
    /// exponential(10.milliseconds).jittered && Schedule.recurs(20)).void

  trait Effect[F[+_, +_]] {
    def monad[E]: Monad[F[E, ?]]

    def redeem[E1, E2, A, B](fa: F[E1, A])(err: E1 => F[E2, B], succ: A => F[E2, B]): F[E2, B]
  }
  object Effect {
    def apply[F[+_, +_]](implicit F: Effect[F]): Effect[F] = F

    implicit val EffectIO: Effect[IO] = new Effect[IO] {
      def monad[E]: Monad[IO[E, ?]] = new Monad[IO[E, ?]] {
        def point[A](a: => A): IO[E, A] = IO.point(a)
        def bind[A, B](fa: IO[E, A])(f: A => IO[E, B]): IO[E, B] = fa.flatMap(f)
      }
      def redeem[E1, E2, A, B](fa: IO[E1, A])(err: E1 => IO[E2, B], succ: A => IO[E2, B]): IO[E2, B] =
        fa.redeem(err, succ)
    }
  }
  implicit def EffectMonad[F[+_, +_]: Effect, E]: Monad[F[E, ?]] =
    new Monad[F[E, ?]] {
      def point[A](a: => A): F[E, A] = Effect[F].monad.point(a)

      def bind[A, B](fa: F[E, A])(f: A => F[E, B]): F[E, B] =
        Effect[F].monad.bind(fa)(f)
    }
  implicit class EffectSyntax[F[+_, +_], E1, A](fea: F[E1, A]) {
    def redeem[E2, B](err: E1 => F[E2, B], succ: A => F[E2, B])(implicit F: Effect[F]): F[E2, B] =
      F.redeem(fea)(err, succ)
    def redeemPure[B](err: E1 => B, succ: A => B)(implicit F: Effect[F]): F[Nothing, B] =
      redeem[Nothing, B](
        err.andThen(F.monad[Nothing].point[B](_)),
        succ.andThen(F.monad[Nothing].point[B](_)))
  }

  def crawl[F[+_, +_]: HttpClient: Effect, E: Monoid, A: Monoid](
    seeds     : Set[URL],
    router    : URL => Set[URL],
    processor : (URL, String) => F[E, A]): F[Exception, Crawl[E, A]] = {
      // implicit val monadException = Effect[F].monad[Exception]
      // implicit val monadException = Effect[F].monad[Exception]
      implicitly[Monad[F[Exception, ?]]]

      def loop(seeds: Set[URL], visited: Set[URL], crawl0: Crawl[E, A]): F[Exception, Crawl[E, A]] =
        (seeds.toList.traverse { url =>
          for {
            html  <- getURL[F](url)
            crawl <- process1(url, html)
            links = extractURLs(url, html).toSet.flatMap(router)

Leszek Gruchała
@leszekgruchala
Sep 13 15:04
30 min for John, 3 days for us
Jorge
@jaliss
Sep 13 15:05
Lol
aureliesalmon
@aureliesalmon
Sep 13 15:06
@jdegoes there some parts missing^^
Jorge
@jaliss
Sep 13 15:06
looks like
I copy pasted it but it fails to compile
realfiretiger
@realfiretiger
Sep 13 15:06
not all code was pasted
marianobringas
@marianobringas
Sep 13 15:06
looks like it cropped the code
realfiretiger
@realfiretiger
Sep 13 15:06
was too much :D
marianobringas
@marianobringas
Sep 13 15:06
:)
Jorge
@jaliss
Sep 13 15:06
SBT knows we're not john
Merunas
@meras
Sep 13 15:07
thanks a bunch Gitter
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 15:08
@jdegoes please paste the code in 2 slices next time.
if necessary.
aureliesalmon
@aureliesalmon
Sep 13 15:09
:D
John A. De Goes
@jdegoes
Sep 13 15:09
https://gist.github.com/jdegoes/da80f74c95efe06cb41a929eead532d4
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 15:09
Better.
Jorge
@jaliss
Sep 13 15:09
cool thx
simondumas
@simondumas
Sep 13 15:10
thanks
Amine SAGAAMA
@AmineSagaama
Sep 13 15:12
IDEA is not able to compile loop inside the crawl function, sbt can
Jorge
@jaliss
Sep 13 15:12
yeah, IDEA has its own compiler
aureliesalmon
@aureliesalmon
Sep 13 15:12
Intellij has given up for me (only trust the console…)
Menestret Martin
@mmenestret_twitter
Sep 13 15:13
Yeah, I open a term tab in intelij and run sbt / ~compile
whenever it gets a bit complicated
:p
John A. De Goes
@jdegoes
Sep 13 15:25

  case class CrawlState(content: Map[URL, String], error: URL => Exception)

  case class CrawlTest[+E, +A](run: CrawlState => Either[E, A])

  object CrawlTest {
    implicit val HttpClientCrawlTest: HttpClient[CrawlTest] =
      new HttpClient[CrawlTest] {
        def getURL(url: URL): CrawlTest[Exception, String] =
          CrawlTest(state =>
            state.content.get(url).fold[Either[Exception, String]](Left(state.error(url)))(Right(_))
          )
      }

    implicit val EffectCrawlTest: Effect[CrawlTest] =
      new Effect[CrawlTest] {
        def fail[E](e: E): CrawlTest[E, Nothing] =
          CrawlTest(state => Left(e))

        def monad[E]: Monad[CrawlTest[E, ?]] = new Monad[CrawlTest[E, ?]] {
          def point[A](a: => A): CrawlTest[E,A] = CrawlTest(_ => Right(a))
          def bind[A, B](fa: CrawlTest[E,A])(f: A => CrawlTest[E,B]): CrawlTest[E,B] =
            CrawlTest(state => fa.run(state) match {
              case Left(e) => Left(e)
              case Right(a) => f(a).run(state)
            })
        }

        def redeem[E1, E2, A, B](fa: CrawlTest[E1,A])(
          err: E1 => CrawlTest[E2,B], succ: A => CrawlTest[E2,B]): CrawlTest[E2,B] =
            CrawlTest(state => fa.run(state) match {
              case Left(e1) => err(e1).run(state)
              case Right(a) => succ(a).run(state)
            })
      }
  }

Menestret Martin
@mmenestret_twitter
Sep 13 15:34
Sound is bad again
@jdegoes with that approach, you test the crawlE based on custom typeclass that you made up for test purposes, do you also test your real typeclass instances ?
John A. De Goes
@jdegoes
Sep 13 15:35

  val TestData1: CrawlState =
    CrawlState(
      Map(
        URL("http://scalaz.org").get -> """<a href="index.html">This link</a> <a href="missing-page.html">Bad link</a>""",
        URL("http://scalaz.org/index.html").get -> """<a href="overview.html">This link</a> <a href="index.html">Link to itself</a>""",
        URL("http://scalaz.org/overview.html").get -> """<a href="http://scalaz.org/index.html">Back to home</a>"""),
      url => new Exception("Bad URL: " + url)
    )
  val TestResult1 = crawlE(
    Set(URL("http://scalaz.org").get), Set(_),
    (url: URL, html: String) => CrawlTest(_ => Right(List((url, html))))).run(TestData1)

Menestret Martin
@mmenestret_twitter
Sep 13 15:36
Cause its some kind of end to end test there right ?
If you mess up your production algebras implementations you cant tell now
Each time I see that approach I understand that we test the business logic but not the machinery part that we wrote (kind of "real" unit tests, if we agree that the one we wrote is an "end to end" test)
That's what I dont get with that approach :(
Bertjan Broeksema
@bbroeksema
Sep 13 15:39
I need to drop out for today unfortunately. Excellent session again @jdegoes !
Simon Mittermueller
@simonmit
Sep 13 15:58
what does mtl stand for? Monad Transformer L...?
Leszek Gruchała
@leszekgruchala
Sep 13 16:00
Monad Transformer Library
Merunas
@meras
Sep 13 16:00
it's from haskell
marianobringas
@marianobringas
Sep 13 16:02
hey @jdegoes , can we construct different levels of abstraction for tagless (i.e. Printer (having println capability) and InputReader (having readln) composed in a Console capability exposing both (i.e. exposing ask as println + readln)?
Menestret Martin
@mmenestret_twitter
Sep 13 16:05
I'm sorry I had to go for a few minutes
What are we covering ?
MTL ?
Jorge
@jaliss
Sep 13 16:05
actually using type classes to avoid mtl (if I got it right)
Eric Nelson
@enelson
Sep 13 16:07
Any good articles/links talking about MTL?
@guizmaii ?
Jules Ivanic
@guizmaii
Sep 13 16:07
@mmenestret_twitter ?
Eric Nelson
@enelson
Sep 13 16:07
F[U] . :)
Menestret Martin
@mmenestret_twitter
Sep 13 16:10
Yes Eric
Just a min
Eric Nelson
@enelson
Sep 13 16:10
@mmenestret_twitter Thanks!
John A. De Goes
@jdegoes
Sep 13 16:10


  def myCode1: Future[Try[Boolean]]

  Task[Either[E, A]]
  F[E, A]

  trait FromFuture[F[_]] {
    def fromFuture[A](fa: => Future[A]): F[A]
  }
  implicit val MyInstance: FromFuture[IO[Throwable, ?]] with MonadError[IO[Throwable, ?], Throwable] {

  }

  def myNewCode[F[_]: MonadError[?, Throwable]: FromFuture]: F[Boolean]

  case class OptionT[F[_], +A](run: F[Option[A]]) {
  case class ErrorT[F[_], +E, +A](run: F[Either[E, A]]) {
    def map[B](f: A => B)(implicit F: Functor[F]): ErrorT[F, E, B] = ???
    def flatMap[B](f: A => ErrorT[F, E, B])(implicit F: Monad[F]): ErrorT[F, E, B] = ???
  }
  object ErrorT {
    def point[F[_]: Applicative, A](a: => A): ErrorT[F, Nothing, A] = 
      ErrorT[F, Nothing, A](Right(a).point[F])
  }
  def myCode1: ErrorT[Future, Error, Unit] = ???
  def myCode2[F[_]: MonadError[Error, ?]]: F[Unit] = ???
  type ErrorfulList[A] = ErrorT[List, Error, A]
  trait MonadError[F[_], E] {
    def fail[A](e: E): F[A]
    def attempt[A](fa: F[A]): F[Either[E, A]]
  }

Menestret Martin
@mmenestret_twitter
Sep 13 16:11

    https://www.youtube.com/watch?v=QM86Ab3lL20
    https://www.youtube.com/watch?v=knK70T4X7YE
    and
    https://www.sderosiaux.com/articles/2018/08/15/types-never-commit-too-early-part1/ (part 3 in particular)

And a lot of FP stuff there: https://github.com/mmenestret/fp-ressources (not exhaustive, just the ressources that helped me :smile: )
Eric Nelson
@enelson
Sep 13 16:12
That was fast! Thanks so much!
Menestret Martin
@mmenestret_twitter
Sep 13 16:12
np !
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 16:15
@mmenestret_twitter Great!
Thanks!
Menestret Martin
@mmenestret_twitter
Sep 13 16:15
you're welcome :)
marianobringas
@marianobringas
Sep 13 16:17
@mmenestret_twitter thx!
Alexander Babin
@mudriyjo
Sep 13 16:29
some sort of debugging, maybe tips/trick?
Jorge
@jaliss
Sep 13 16:30
Awesome session. Thanks @jdegoes!
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 16:31
Thanks @jdegoes. Thanks everyone.
Alexander Babin
@mudriyjo
Sep 13 16:31
Thanks
realfiretiger
@realfiretiger
Sep 13 16:31
Great session @jdegoes ! Thanks
allami
@allami
Sep 13 16:31
Thanks @jdegoes
Amine SAGAAMA
@AmineSagaama
Sep 13 16:31
See you tomorrow
Jorge
@jaliss
Sep 13 16:32
see you all!
Bounkong Khamphousone
@tiboun
Sep 13 16:32
Thanks @jdegoes
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 16:33
@jdegoes, can you update the "monster"?
Rob Vermazeren
@RobVermazeren
Sep 13 16:34
Thank you, that was very enlightening!!
John A. De Goes
@jdegoes
Sep 13 16:36
@Eduardo-M-Cavalcanti Done!
aureliesalmon
@aureliesalmon
Sep 13 16:36
Thank @jdegoes , it was a really good day. (and that’s not a monster, it’s quite beautiful in it’s simplicity and utility!)
Can i commit my notes to my fork on github, or would you rather keep it private?
Some other people of ebiznext following this course have expressed their interest in my notes^^
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 13 16:36
Thanks a lot!
John A. De Goes
@jdegoes
Sep 13 16:37
@aureliesalmon Feel free to share.
cverdier
@cverdier
Sep 13 17:00
Iranian
Italian place tonight?
Caffe Scozia
https://www.tripadvisor.fr/Restaurant_Review-d10779428?m=19905
Jules Ivanic
@guizmaii
Sep 13 17:01
19h30 ?
cverdier
@cverdier
Sep 13 17:02
https://goo.gl/maps/84MPdiCCdB72
Jules Ivanic
@guizmaii
Sep 13 17:02
19h ?
Merunas
@meras
Sep 13 17:04
Yes
7pm at caffe scozia
Jules Ivanic
@guizmaii
Sep 13 17:12
@meras you should eat more at lunch. You're too angry in the evening 😄
Kurt Logan
@kurtlogan
Sep 13 17:17
7 is good with me
Jules Ivanic
@guizmaii
Sep 13 17:21
@jdegoes Do you want to join us tonight ?
Eric Nelson
@enelson
Sep 13 17:31
I’ll be there
cverdier
@cverdier
Sep 13 17:32
Playing Pool at McKays
Eric Nelson
@enelson
Sep 13 17:32
Don’t you mean pool party? :)
cverdier
@cverdier
Sep 13 17:32
I wish :D
Eric Nelson
@enelson
Sep 13 17:33
Lol
Artsiom Miklushou
@mikla
Sep 13 17:41
I will skip today
Jules Ivanic
@guizmaii
Sep 13 18:01
@meras where are you ?
Merunas
@meras
Sep 13 18:08
Right here 👀
Wiem Zine El Abidine
@wi101
Sep 13 18:11
I am looking forward for tomorrow! It's really an amazing training tomorrow will be finished :(, I hope that I will keep everything in my mind :D ! Thanks @jdegoes
Artsiom Miklushou
@mikla
Sep 13 18:41
today is 256th day in this year :)
Merunas
@meras
Sep 13 20:39
I wish our brains were better than this but it only takes a week to forget more than half of what we learn @wi101 :(
Wiem Zine El Abidine
@wi101
Sep 13 21:46
yes :( ! it's easy to forget if we will continue to implement with the same way as before, we should put in practice what we learned and do exercises (I am trying to motivate myself too :D )
Artsiom Miklushou
@mikla
Sep 13 21:49
I’m rewriting one of my current services with FT and techniques that we discovered today :)
Wiem Zine El Abidine
@wi101
Sep 13 21:54
Great!
Sounds interesting :)
Artsiom Miklushou
@mikla
Sep 13 22:50

class UserRepositoryImpl[F[_] : Monad, DB[_] : Functor](
  userRepository: UserRepository[DB],
  run: DB ~> F) extends UserService[F] {
  override def findUser(login: String): F[Option[User]] = {
    run(userRepository.findUserQuery(login).map(_.map(_.toDomain)))
  }
}

_

John A. De Goes/functional-scala

Menestret Martin
@mmenestret_twitter
Sep 14 06:36
@mikla I would probably go for something like:

trait User
  trait DBUser {
    def toDomain: User
  }
  trait ConnexionConfig
  // You're actual DB connection
  trait Connection {
    def findUserQuery(login: String): Option[DBUser]
  }
  trait UserRepository[F[_]] {
    def findUser(login: String): F[Option[User]]
  }
  object UserRepository {
    def create[F[_]: Sync](myConnexionConfig: ConnexionConfig): F[UserRepository[F]] = Sync[F].delay {
      new UserRepository[F] {
        override def findUser(login: String): F[Option[User]] = Sync[F].delay {
          conn.findUserQuery(login).map(_.toDomain)
        }
      }
    }
  }

  // How to use it
  val conn: Connection                   = ???
  val myConnexionConfig: ConnexionConfig = ???
  for {
    ur   <- UserRepository.create[IO](myConnexionConfig)
    user ← ur.findUser("mmenestret")
    _ ← user match {
      case Some(value) ⇒ ???
      case None        ⇒ ???
    }
  } yield ()

Menestret Martin
@mmenestret_twitter
Sep 14 06:47
Here I went for Cats IO (sorry John, for now I know it a bit better, but I'll switch :D).
1- The creation of your connection is probably side effectful so here you wrap it in a IO.Delay (which is a IO.syncException in ZIO)
2 - Then you can safely flatMap it and use it later on
3 - Your findUserQueries are side effectful (they IO in a DB) so now you wrap it in an IO as well
There might be other (better) ways, that's just my 2 cents ^^
Artsiom Miklushou
@mikla
Sep 14 06:48
@mmenestret_twitter thank you!.
Menestret Martin
@mmenestret_twitter
Sep 14 06:48
:thumbsup:
Artsiom Miklushou
@mikla
Sep 14 06:52
@mmenestret_twitter I just had to start with something, beacuse I have service lik this :D it’s kind of pait to refactotor it.

class AuthService(
  featureToggleTable: FeatureToggleTable,
  dealersTable: DealersTable,
  authTokensTable: AuthTokensTable,
  tokenFactory: JWTTokenFactory,
  regularSessionDuration: Duration,
  rememberMeSessionDuration: Duration,
  requestThrottler: ActorRef,
  refreshCacheAfter: ScalaDuration = 5.minutes) {

  private implicit val tokenCacheTimeout: Timeout = Timeout(500.millis)

  private lazy val authFeaturesCache: AuthFeaturesCache = AuthFeaturesCache(
    loadFeatures,
    expiresAfter = refreshCacheAfter)

  def login(
    login: String,
    password: String,
    rememberMe: Boolean)(
    implicit trace: TraceContext): Task[Either[AuthError, (Session, Token)]] = for {
    features <- authFeaturesCache()
    loginResult <- dealersTable.driver.runTask(findUserQuery(login))

Menestret Martin
@mmenestret_twitter
Sep 14 06:54
:D
An other way to do what I showed you:

trait User
  trait DBUser {
    def toDomain: User
  }
  trait ConnectionConfig
  // You're actual DB connection
  trait Connection {
    def findUserQuery(login: String): Option[DBUser]
  }
  object Connection {
    def create(config: ConnectionConfig): Connection = ???
  }
  trait UserRepository[F[_]] {
    def findUser(login: String): Kleisli[F, Connection, Option[User]]
  }

  class UserRepositoryImpl[F[_]: Sync] extends UserRepository[F] {
    override def findUser(login: String): Kleisli[F, Connection, Option[User]] =
      Kleisli(conn ⇒
        Sync[F].delay {
          conn.findUserQuery(login).map(_.toDomain)
      })
  }
  // How to use it
  val userRepoImpl: UserRepositoryImpl[IO] = ???
  val conf: ConnectionConfig               = ???
  for {
    conn ← IO.delay(Connection.create(conf))
    user ← userRepoImpl.findUser("mmenestret")(conn)
    _ ← user match {
      case Some(value) ⇒ ???
      case None        ⇒ ???
    }
  } yield ()

Kleisli is just a wrapper for a function waiting for an A to produce a F[B]
So here, it waits for a connection to trigger it's functions which are returning IO[Something]
So you can write your repository DSL without depending on your connection and you can delay your connection creation until the end on the world, where you'll push it to your DSL calls userRepoImpl.findUser("mmenestret")(conn)
But you have to constraint your UserRepository algebra to return a Kleisli of F (in your trait), which was not the case with the first implementation
Artsiom Miklushou
@mikla
Sep 14 06:59
@mmenestret_twitter cool, Thanks!
Menestret Martin
@mmenestret_twitter
Sep 14 07:44
@mikla in the first implementation I gave you, I forgot the connection creation :p

object UserRepository {
    def create[F[_]: Sync](myConnexionConfig: ConnexionConfig): F[UserRepository[F]] =
      Sync[F].delay { Connection(myConnexionConfig) }.flatMap { conn ⇒
        Sync[F].delay {
          new UserRepository[F] {
            override def findUser(login: String): F[Option[User]] = Sync[F].delay {
              conn.findUserQuery(login).map(_.toDomain)
            }
          }
        }
      }
  }

Jules Ivanic
@guizmaii
Sep 14 07:51
https://twitter.com/SpaceX/status/1040397262248005632
Rob Vermazeren
@RobVermazeren
Sep 14 07:51
Good morning!
Merunas
@meras
Sep 14 07:52
o/
Alexander Babin
@mudriyjo
Sep 14 07:52
Good morning))
Jules Ivanic
@guizmaii
Sep 14 07:53
Good morning :)
allami
@allami
Sep 14 07:53
Good morning everyone !
Bertjan Broeksema
@bbroeksema
Sep 14 07:56
Good morning neverland :)
Leszek Gruchała
@leszekgruchala
Sep 14 07:56
hello everyone :)
realfiretiger
@realfiretiger
Sep 14 07:56
Good morning :)
Bertjan Broeksema
@bbroeksema
Sep 14 07:57
No sound (yet?)
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 07:57
God moning folks.
Menestret Martin
@mmenestret_twitter
Sep 14 07:57
Hi there :)
Alex Henning Johannessen
@ahjohannessen
Sep 14 07:58
Good morning :)
Leszek Gruchała
@leszekgruchala
Sep 14 07:59
@jdegoes I was playing with your example of wireing togehter tagless final and IO, but I have quesions what is the best way to inject dependencies into a class/component. Please see Console instance in following snippet - I also don’t like the fact that every implementation is in companion object as implicit val.

type SimpleIO[A] = IO[Exception, A]

  trait MyPrinter[F[_]] {
    def print(str: String): F[Unit]
  }
  object MyPrinter {
    def apply[F[_]](implicit F: MyPrinter[F]): MyPrinter[F] = F

    implicit val MyPrinterIO: MyPrinter[SimpleIO] = new MyPrinter[SimpleIO] {
      override def print(str: String): SimpleIO[Unit] = IO.syncException(putStrLn(str))
    }
  }
  trait InputReader[F[_]] {
    def read: F[String]
  }
  object InputReader {
    def apply[F[_]](implicit F: InputReader[F]): InputReader[F] = F

    implicit val MyInputReaderIO: InputReader[SimpleIO] = new InputReader[SimpleIO] {
      override def read: SimpleIO[String] = IO.syncException("read value")
    }
  }

  def read[F[_]: InputReader]: F[String] =
    InputReader[F].read

  def print[F[_]: MyPrinter](str: String): F[Unit] =
    MyPrinter[F].print(str)

  trait Console[F[_]] {
    def readAndPrint(implicit IR: InputReader[F], P: MyPrinter[F]): F[Unit]
  }
  object Console {
    def apply[F[_]](implicit F: Console[F]): Console[F] = F

    implicit val ConsoleIO: Console[SimpleIO] = new Console[SimpleIO] {

      override def readAndPrint(implicit IR: InputReader[SimpleIO], P: MyPrinter[SimpleIO]): SimpleIO[Unit] = {
//        InputReader[SimpleIO].read.flatMap(str => MyPrinter[SimpleIO].print(str))
        //OR
        read.flatMap(print(_))
      }
    }
  }

  //TODO can I make it compilable with:
//  type MyAppCapabilities[F[_]] = Console[F] with InputReader[F] with MyPrinter[F]
//  def runConsole[F[_]: MyAppCapabilities]: F[Unit] = {
  def runConsole[F[_]: Console: InputReader: MyPrinter]: F[Unit] = {
    Console[F].readAndPrint
  }
  runConsole.attempt.void

  //or without Console, it compiles but where is the Monad instance for ZIO?
  def runner[F[_]: InputReader: MyPrinter: Monad]: F[Unit] = {
    for {
      str <- read
      u   <- print(str)
    } yield u
  }
  runner.attempt.void

Alexander Babin
@mudriyjo
Sep 14 08:02
No sound ???
Jules Ivanic
@guizmaii
Sep 14 08:02
no one is talking for now
Leszek Gruchała
@leszekgruchala
Sep 14 08:03
it seems the screen sharing or John’s gitter is delayed by 1 min or so…
Menestret Martin
@mmenestret_twitter
Sep 14 08:03
I do have sound
Leszek Gruchała
@leszekgruchala
Sep 14 08:03
I do too, but terrible ;)
ok, working well
Alexander Babin
@mudriyjo
Sep 14 08:04
thx
Menestret Martin
@mmenestret_twitter
Sep 14 08:04
And I have more requests :p

    Are there still use cases for Free Monad in Scala ?
    Can you explain us recursion schemes ?
    Classical Monad stacks you'd use and in what case (keeping state while logging, reading a conf while IO effecting, and so on.) and which one are overkill and shouldn't be used ?
    What's the right approach, go for a simple, concrete implementations and then, when they work, abstract it out in algebras and go finally tagless ? Or you create your algebras first, write your business logic with them and at the end write your concrete instances ?

Jules Ivanic
@guizmaii
Sep 14 08:05
@mmenestret_twitter do you have five more days ? :smile:
Menestret Martin
@mmenestret_twitter
Sep 14 08:05
I would love to :D
Jules Ivanic
@guizmaii
Sep 14 08:05
me too ! :D
Oleksandra Holubitska
@Vilkina
Sep 14 08:05
I don't see a screen
Alex Henning Johannessen
@ahjohannessen
Sep 14 08:05
Would be nice to see an example of zio replacement of Actor, basic equivalent functionality. Queue + Ref usage.
marianobringas
@marianobringas
Sep 14 08:06
:+1: on recursion schemes
Oleksandra Holubitska
@Vilkina
Sep 14 08:06
I see
Menestret Martin
@mmenestret_twitter
Sep 14 08:07
@ahjohannessen on it's way https://scalaz.mobilize.io
I think :)
Alex Henning Johannessen
@ahjohannessen
Sep 14 08:08
Do you hear and see John in zoom?
Leszek Gruchała
@leszekgruchala
Sep 14 08:08
generally yes
Simon Mittermueller
@simonmit
Sep 14 08:13
I have a question on how to compose different algebras.
Suppose I have 2 algebras that I want to compose to a new algebra.
Is there an way to compose them in a for comprehension like program below?


  case class User(id: Long, name: String)
  sealed trait UserAPIError
  case class UserAPIError1(foo: String) extends UserAPIError
  case class UserAPIError2(bar: String) extends UserAPIError

  trait UserAPI[F[_]] {
    def getUserById(id: Long): F[Either[UserAPIError, User]]
    def someOtherMethod(id: Long): F[Unit]
  }

  sealed trait PictureAPIError
  case class PictureAPIError1(foo: String) extends PictureAPIError
  case class PictureAPIError2(bar: String) extends PictureAPIError

  case class Picture(url: String)
  trait PictureAPI[F[_]] {
    def getPictures(userId: Long): F[Either[PictureAPIError, List[Picture]]]
    def someOtherMethod(id: Long): F[Unit]
  }

  // my program:
  def program[F[_]: Monad](implicit F: Monad[F]) {

    val userApi: UserAPI[F] = ???
    val pictureApi: PictureAPI[F] = ???

    val id: Long = 123
    val pictures = (for {
      user <- EitherT(userApi.getUserById(id))
      pictures <- EitherT(pictureApi.getPictures(user.id)) 
      // does not compose because error types are not equal
    } yield pictures).run // .value
  }

Menestret Martin
@mmenestret_twitter
Sep 14 08:15
Your 2 algebras have to be typeclasses and have an instances for both of them for your final F type and you'll be able to use them both in your program since their are producing basicly the same F's
marianobringas
@marianobringas
Sep 14 08:16
sound and video are down
Leszek Gruchała
@leszekgruchala
Sep 14 08:16
audio and video lost
Sitbon
@nsitbon
Sep 14 08:16
lost video and audio
Amine SAGAAMA
@AmineSagaama
Sep 14 08:16
we lost the connection
Jorge
@jaliss
Sep 14 08:16
good morning everybody
yeah
Jules Ivanic
@guizmaii
Sep 14 08:16
it’s reconnecting
realfiretiger
@realfiretiger
Sep 14 08:16
no sound & video
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 08:17
Before that, the sound was unstable.
Jorge
@jaliss
Sep 14 08:17
connection is down
audio is really bad
Alex Henning Johannessen
@ahjohannessen
Sep 14 08:18
sound is terrible
Jorge
@jaliss
Sep 14 08:18
now
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 08:18
bad sound
Amine SAGAAMA
@AmineSagaama
Sep 14 08:18
sound is bad
Sitbon
@nsitbon
Sep 14 08:18
sound is horrible
Leszek Gruchała
@leszekgruchala
Sep 14 08:18
yeah
ಠ_ರೃ
@mrt181_twitter
Sep 14 08:19
@jdegoes I c/p the gist from https://gist.github.com/jdegoes/da80f74c95efe06cb41a929eead532d4 but it won't compile

[info] Compiling 1 Scala source to /home/martin/functional-scala/target/scala-2.12/classes ...
[error] /home/martin/functional-scala/src/main/scala/net/degoes/FunctionalScala.scala:197:17: value map is not a member of type parameter F[Nothing,net.degoes.FunctionalScala.Crawl[E,A]]
[error]           crawl <- process1(url, html)
[error]                 ^
[error] /home/martin/functional-scala/src/main/scala/net/degoes/FunctionalScala.scala:194:20: no type parameters for method traverse: (f: net.degoes.FunctionalScala.URL => G[B])(implicit G: scalaz.Applicative[G])G[List[B]] exist so that it can be applied to arguments (net.degoes.FunctionalScala.URL => F[Exception,Nothing])
[error]  --- because ---
[error] argument expression's type is not compatible with formal parameter type;
[error]  found   : net.degoes.FunctionalScala.URL => F[Exception,Nothing]
[error]  required: net.degoes.FunctionalScala.URL => ?G[?B]
[error]       seeds.toList.traverse { url =>
[error]                    ^
[error] /home/martin/functional-scala/src/main/scala/net/degoes/FunctionalScala.scala:194:35: type mismatch;
[error]  found   : net.degoes.FunctionalScala.URL => F[Exception,Nothing]
[error]  required: net.degoes.FunctionalScala.URL => G[B]
[error]       seeds.toList.traverse { url =>
[error]                                   ^
[error] /home/martin/functional-scala/src/main/scala/net/degoes/FunctionalScala.scala:201:38: type mismatch;
[error]  found   : Any
[error]  required: Set[net.degoes.FunctionalScala.URL]
[error]         case (crawl1, links) => loop(links, visited ++ seeds, crawl0 |+| crawl1)
[error]                                      ^
[error] /home/martin/functional-scala/src/main/scala/net/degoes/FunctionalScala.scala:201:74: type mismatch;
[error]  found   : Any
[error]  required: net.degoes.FunctionalScala.Crawl[E,A]
[error]         case (crawl1, links) => loop(links, visited ++ seeds, crawl0 |+| crawl1)
[error]                                                                          ^
[error] 5 errors found
[error] (Compile / compileIncremental) Compilation failed
[error] Total time: 2 s, completed Sep 14, 2018 10:15:19 AM

Leszek Gruchała
@leszekgruchala
Sep 14 08:24
is it audio distorted all the time only for me?
ಠ_ರೃ
@mrt181_twitter
Sep 14 08:24
not all the time
allami
@allami
Sep 14 08:24
no the same here
Sitbon
@nsitbon
Sep 14 08:27
same for me
Jorge
@jaliss
Sep 14 08:27
it's getting hard to follow, audio comes and goes
realfiretiger
@realfiretiger
Sep 14 08:28
its distorting for me too
Leszek Gruchała
@leszekgruchala
Sep 14 08:31
audio and video is fine for couple of last minutes to me
balanka
@balanka
Sep 14 08:32
Good moring
sorry i was very late
Leszek Gruchała
@leszekgruchala
Sep 14 08:33
and bad audio again
Jorge
@jaliss
Sep 14 08:33
yes :(
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 08:35
Good morning @balanka. Johnn is revisiting yesterday's example making some explanations.
marianobringas
@marianobringas
Sep 14 08:35
sound is terrible
Jorge
@jaliss
Sep 14 08:35
yes, really bad
realfiretiger
@realfiretiger
Sep 14 08:36
i didnt hear the explanation
Sitbon
@nsitbon
Sep 14 08:36
I can barely understand what he's saying
Alex Henning Johannessen
@ahjohannessen
Sep 14 08:36
Please repeat the answer, no sound
Jorge
@jaliss
Sep 14 08:36
+1
I can hear he's typing but the screen is not updading...
same for others?
Leszek Gruchała
@leszekgruchala
Sep 14 08:37
Yes, there are lags...
Alex Henning Johannessen
@ahjohannessen
Sep 14 08:37
Who is watching Netflix at the hotel :D
Jorge
@jaliss
Sep 14 08:37
lol
Sitbon
@nsitbon
Sep 14 08:39
video is frozen
Jorge
@jaliss
Sep 14 08:39
It's hard to follow
it's lagging behind several seconds
let's buy that hotel a good router
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 08:41
Can hear John.
Screen mute.
Screen back
ಠ_ರೃ
@mrt181_twitter
Sep 14 08:42
johns current example does not compile for me

[info] Compiling 1 Scala source to /home/martin/functional-scala/target/scala-2.12/classes ...
[error] /home/martin/functional-scala/src/main/scala/net/degoes/FunctionalScala.scala:30:9: type mismatch;
[error]  found   : scalaz.zio.IO[java.io.IOException,Unit]
[error]  required: F[Unit]
[error]       _ <- putStrLn("Hello what is your name?")
[error]         ^

Sitbon
@nsitbon
Sep 14 08:42
I guess someone is still running the crawler....
ಠ_ರೃ
@mrt181_twitter
Sep 14 08:43
nevermind
Jorge
@jaliss
Sep 14 08:44
screen not refreshing ....
Wiem Zine El Abidine
@wi101
Sep 14 08:44
yes ..
Simon Mittermueller
@simonmit
Sep 14 08:44
This is so bad..
John A. De Goes
@jdegoes
Sep 14 08:46
http://collabedit.com/c34v5
Alex Henning Johannessen
@ahjohannessen
Sep 14 08:47
Yes, with a little delay
John A. De Goes
@jdegoes
Sep 14 08:50
https://codeshare.io/GqyN3z
Jorge
@jaliss
Sep 14 09:02
audio is bad now
ಠ_ರೃ
@mrt181_twitter
Sep 14 09:14
@jdegoes how deep is the rabbit hole?
Jules Ivanic
@guizmaii
Sep 14 09:17

does someone have this error:

[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:62:50: value flatMap is not a member of Nothing
[error]           Console.putStrLn(s"Logging: \n$lines").flatMap(_ => Monad[F].point(name))
[error]                                                  ^

??
ಠ_ರೃ
@mrt181_twitter
Sep 14 09:19

[warn] /home/martin/functional-scala/src/main/scala/net/degoes/FunctionalScala.scala:64:57: a pure expression does nothing in statement position
[warn]         Console.putStrLn(s"logging: \n$lines").map(_ => name)
[warn]                                                         ^

Jorge
@jaliss
Sep 14 09:20
can't hear john
marianobringas
@marianobringas
Sep 14 09:20
sound is terrible
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 09:20
Sound failed for las 30 seconds.
Sound back
Jules Ivanic
@guizmaii
Sep 14 09:21

          val a: F[Unit] = Console.putStrLn(s"Logging: \n$lines")

          a.flatMap(_ => Monad[F].point(name))

with explicit typing, it compiles….
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 09:22
Escape?
Jules Ivanic
@guizmaii
Sep 14 09:22
or

putStrLn[F](s"Logging: \n$lines") flatMap (_ => Monad[F].point(name))

or

          putStrLn[F](s"Logging: \n$lines") *> Monad[F].point(name)

Merunas
@meras
Sep 14 09:23
please try not to have select all on the screen share the whole time :(
Alexander Babin
@mudriyjo
Sep 14 09:25
screen is ok?
Alex Henning Johannessen
@ahjohannessen
Sep 14 09:28
@jdegoes Would be nice to see an example of zio replacement of Actor, basic equivalent functionality. Queue + Ref usage :)
Artsiom Miklushou
@mikla
Sep 14 09:32
@ahjohannessen +1
marianobringas
@marianobringas
Sep 14 09:33
+1
Jules Ivanic
@guizmaii
Sep 14 09:33
@ahjohannessen meh. Actors are useful in distributed system because of their cluster capability. ZIO doesn’t cover that
Jorge
@jaliss
Sep 14 09:33
+1 to what @ahjohannessen said
MTL = combining tagless final + monad transformers .. Did I get that right?
Alexander Babin
@mudriyjo
Sep 14 09:33
can you add me to lecture?
Leszek Gruchała
@leszekgruchala
Sep 14 09:34
I’d say Tagless Final itself is about avoiding MTL
Jules Ivanic
@guizmaii
Sep 14 09:34
if you use actors only for parallelism, you misuse them
Leszek Gruchała
@leszekgruchala
Sep 14 09:34
If I get it correctly, the difference
Jorge
@jaliss
Sep 14 09:34
oh I thought John said that combining both was MTL ... probably got it wrong then
Menestret Martin
@mmenestret_twitter
Sep 14 09:35
Monad transformer != MTL style (which is what we used by using types classes)
Leszek Gruchała
@leszekgruchala
Sep 14 09:35
you can combine it, but the you and up with this mess
Menestret Martin
@mmenestret_twitter
Sep 14 09:35
There is just a confusion in the terms
Jorge
@jaliss
Sep 14 09:35
:-\
Jules Ivanic
@guizmaii
Sep 14 09:36
MTL is the alternative to Monad Transformer to achieve what we just seen with John, no ? @mmenestret_twitter
(an alternative ?)
Menestret Martin
@mmenestret_twitter
Sep 14 09:36
yes
MTL style comes from Monad Transformer Library which is a lib in haskell that provides typesclasses abtrascting over monads
That's what's creating the confusion
Jules Ivanic
@guizmaii
Sep 14 09:37
the name is bad :/
Menestret Martin
@mmenestret_twitter
Sep 14 09:37
With plain old Monad Transformer
Leszek Gruchała
@leszekgruchala
Sep 14 09:37
Thanks for clarification
Menestret Martin
@mmenestret_twitter
Sep 14 09:38
You should double check with @jdegoes to make sure I'm not saying non senses :p
Jules Ivanic
@guizmaii
Sep 14 09:38
https://github.com/typelevel/cats-mtl
https://github.com/typelevel/cats-tagless
Alex Henning Johannessen
@ahjohannessen
Sep 14 09:39
@guizmaii Not so interested in distribtuted system example, but more FP equivalent of actor using Queue / Process and other IO primitives
Jorge
@jaliss
Sep 14 09:40
The code makes more sense to me now ... I don't see why make it more complex and also add a guaranteed performance penalty
Merunas
@meras
Sep 14 09:41
agree with that
Jorge
@jaliss
Sep 14 09:44
audio is gone
back
Sitbon
@nsitbon
Sep 14 09:48
how do we deal with? no sound
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 09:48
+1
Jules Ivanic
@guizmaii
Sep 14 09:48
@ahjohannessen so I think I don’t understand what you're doing with Actors
balanka
@balanka
Sep 14 09:49
My question is about modeling business requirement using effects
Leszek Gruchała
@leszekgruchala
Sep 14 09:50

my question after a break @jdegoes the getName method seems to be defined at the “end of the world”.
If I would like to extract it into some class, but still use typeclass then is this a way to go?

trait NameGetter[F[_]] {
   //Here I do not leak implementation details of needing F[_]: Console: Logging: Monad
    def getName: F[String]
  }
  class DefaultNameGetter[F[_]: Console: Logging: Monad]() extends NameGetter[F] {

    override def getName: F[String] = {
      for {
        _ <- Console.putStrLn("Hello, what is your name?")
        _ <- Logging[F].log("My log line")
        n <- Console.getStrLn
        _ <- Console.putStrLn("Good to meet you, " + n + "!")
      } yield n
    }
  }

didn’t check if that compiles though
balanka
@balanka
Sep 14 09:50
Is it correct to thing about using effects for modeling business requirements as this:
Effects may be used for describing computations of a specific domain like debiting/crediting the balance an account with amounts
Alex Henning Johannessen
@ahjohannessen
Sep 14 09:57
@leszekgruchala In FP for Mortals, I noticed that it was some thing like this: class DefaultNameGetter[F[_]: Monad](console: Console[F], logging: Logging[F]) extends NameGetter[F] { ... }
realfiretiger
@realfiretiger
Sep 14 09:58
I am also interested in @balanka 's question
Is the debit operation an effect or is it running in an effectful program (IO)?
Leszek Gruchała
@leszekgruchala
Sep 14 09:59
@ahjohannessen thank you, makes sense too, probably makes it easier to inject things…
I am trying to figure out how to wire things together in tagless final in more real life apps
Alex Henning Johannessen
@ahjohannessen
Sep 14 09:59
@leszekgruchala Where Sam talks about modules in the form of:

class OAuth2Client[F[_]: Monad](
    config: ServerConfig
  )(
    user: UserInteraction[F],
    client: JsonClient[F],
    clock: LocalClock[F]
  ) { ... }

Leszek Gruchała
@leszekgruchala
Sep 14 10:00
good, thank you, so I wasn’t that far away from the way to go :)
Alex Henning Johannessen
@ahjohannessen
Sep 14 10:01
@guizmaii My point was just that how one can model the same thing that an Actor usually is used for in pure FP using zio and its primitives. E.g. we have some functionality that we wish to migrate from actors to pure FP. Techniques one can use for that
balanka
@balanka
Sep 14 10:01

My question is about modeling business requirement using effects
Is it correct to think about using effects for modeling business requirements as follows:
Effects may be used for describing computations of a specific domain like debiting/crediting the balance of an account with amounts.
Using tagless final effects are described using type class and may be composed using constraints on methods.

I am trying to see the duality for the analogy between effects/tagless final and free monad
Sitbon
@nsitbon
Sep 14 10:02
sound is bad
Menestret Martin
@mmenestret_twitter
Sep 14 10:03
@balanka they encode the same thing
in a different manner
marianobringas
@marianobringas
Sep 14 10:05
sound is gone
realfiretiger
@realfiretiger
Sep 14 10:05
no sound
Sitbon
@nsitbon
Sep 14 10:05
same for me
ಠ_ರೃ
@mrt181_twitter
Sep 14 10:05
@balanka this goes into the details on doing that: Functional and Reactive Domain Modeling
Leszek Gruchała
@leszekgruchala
Sep 14 10:06
no sound
Wiem Zine El Abidine
@wi101
Sep 14 10:06
@jdegoes
ಠ_ರೃ
@mrt181_twitter
Sep 14 10:06
https://www.goodreads.com/book/show/23488413-functional-and-reactive-domain-modeling
Jules Ivanic
@guizmaii
Sep 14 10:06
@ahjohannessen did you see this talk https://www.youtube.com/watch?v=Eihz7kqn6mU ?
Jorge
@jaliss
Sep 14 10:06
yeah
we can't hear a thing
Merunas
@meras
Sep 14 10:06
that's a good book
Bertjan Broeksema
@bbroeksema
Sep 14 10:06
@jdegoes no soumd
Jules Ivanic
@guizmaii
Sep 14 10:08
@ahjohannessen are you using Actors for shared states ?
realfiretiger
@realfiretiger
Sep 14 10:12
is transaction an effect or an effectful operation?
Jorge
@jaliss
Sep 14 10:12
we can hear you
editor is not refreshing
marianobringas
@marianobringas
Sep 14 10:13
sound is gone now
Jorge
@jaliss
Sep 14 10:13
oh, audio is gone
realfiretiger
@realfiretiger
Sep 14 10:13
audio gone
Jorge
@jaliss
Sep 14 10:13
:(
marianobringas
@marianobringas
Sep 14 10:13
back
ಠ_ರೃ
@mrt181_twitter
Sep 14 10:13
does anyone have a version of monster.scala that compiles? mine fails in the crawl function. I c/p the one from the gist
Alex Henning Johannessen
@ahjohannessen
Sep 14 10:13
@guizmaii Yes, I did. Very interesting talk. Wish to hear more about techniques to go from actor to pure FP, considering queue / state etc.
marianobringas
@marianobringas
Sep 14 10:14
editor is not refreshing for me
Jules Ivanic
@guizmaii
Sep 14 10:15
@mrt181_twitter
https://gist.github.com/guizmaii/30368a3d9021c0752bcb58cf4678eaeb
if you want the IO impl, I can also give it to you ;)
@ahjohannessen ok
ಠ_ರೃ
@mrt181_twitter
Sep 14 10:16
@guizmaii yes bot please
Jules Ivanic
@guizmaii
Sep 14 10:17
@mrt181_twitter https://gist.github.com/guizmaii/e50c43a5ebe25bbce7db39edfc9a3d61
Alex Henning Johannessen
@ahjohannessen
Sep 14 10:20
@leszekgruchala perhaps rather: object namegetter { def apply[F[_]: Monad](console: Console[F], logging: Logging[F]): NameGetter[F] = new NameGetter[F] { ... } }
ಠ_ರೃ
@mrt181_twitter
Sep 14 10:21
@guizmaii thank you
Bertjan Broeksema
@bbroeksema
Sep 14 10:21
codeshare no updating again?
Leszek Gruchała
@leszekgruchala
Sep 14 10:21
works for me
Jorge
@jaliss
Sep 14 10:26
audio is ok now
Menestret Martin
@mmenestret_twitter
Sep 14 10:27
@jdegoes Are there still use cases for Free Monad in Scala ?
beside stack safety
John A. De Goes
@jdegoes
Sep 14 10:28


def myGetName[F[_]: Console: Logging: Monad]: F[String] = 
  for {
    _ <- Console.putStrLn("Hello, what is your name?")
    _ <- Logging[F].log("My log line")
    n <- Console.getStrLn
    _ <- Console.putStrLn("Good to meet you, " + n + "!")
  } yield n

def myThirdPartyCode[F[_]: Monad](getName: F[String]): F[Unit] = 
  getName *> getName *> getName

myThirdPartyCode(myGetName)

Menestret Martin
@mmenestret_twitter
Sep 14 10:30
Ok I think I get it
MonadT = Product of effects whereas Free Monad is a Sum of effects
when you want to flatMap over it, you go through 1 stack of monad in free
and all of them in MonadT
Leszek Gruchała
@leszekgruchala
Sep 14 10:32
IO bifunctor FTW!
Menestret Martin
@mmenestret_twitter
Sep 14 10:32
Why are people moving from Free Monad to Tagless final then ? The boilerplate ?
Yes right
Jorge
@jaliss
Sep 14 10:35
codeshare it's working
balanka
@balanka
Sep 14 10:35
Thank i will have a look. I had the first version o this book, but i did not have time to read through to the end
Bertjan Broeksema
@bbroeksema
Sep 14 10:39
I still have to constantly refresh to follow up :/
Jorge
@jaliss
Sep 14 10:39
reload the page maybe? it seems to be working ok . I can see live updates.
Leszek Gruchała
@leszekgruchala
Sep 14 10:40
Works for me well in recent Firefox, doesn’t work in Safari
Merunas
@meras
Sep 14 10:40
enable javascript ? :)
Leszek Gruchała
@leszekgruchala
Sep 14 10:40
maybe disable ad blocker… ? :)
Bertjan Broeksema
@bbroeksema
Sep 14 10:41
@meras :joy:
Wiem Zine El Abidine
@wi101
Sep 14 10:50
map should be like that:

 def map[B](f: A => B): Effect[E, B] = {
      Effect(run.map {
        case Left(e) =>Left(e)
        case Right(None) =>Right(None)
        case Right(Some(a)) => Right(Some(f(a)))
      })
    }

Leszek Gruchała
@leszekgruchala
Sep 14 10:54
I encourage all of you to take a look at slides from the presentation at Scalawave by Pawel Szulc
https://www.slideshare.net/paulszulc/trip-with-monads
It shows all the problems John is talking about.
Soon there should be video availalbe http://scalawave.io
Jorge
@jaliss
Sep 14 10:54
cool, thanks @leszekgruchala
Merunas
@meras
Sep 14 10:55
thanks, will have a look later on
Leszek Gruchała
@leszekgruchala
Sep 14 10:56
His presentation was great and entertaining as always, look here https://twitter.com/scalawavepl for info about videos
Jules Ivanic
@guizmaii
Sep 14 10:57

[error] type Λ$ takes type parameters
[error]     type MonadTransformerBasedEffect[E, A] = OptionT[EitherT[Future, E, ?], ?]
[error]                                              ^

:tada: cryptic error message
:smile:
Leszek Gruchała
@leszekgruchala
Sep 14 10:58
freeks out thanks to kind-projector :)
Bertjan Broeksema
@bbroeksema
Sep 14 11:01
@jdegoes can we try to use something else than codeshare after the break, tried different browsers, but at best I can refresh all the time, but often I get the overcapacity error.
Jorge
@jaliss
Sep 14 11:07
@jdegoes could case Left(None) => IO.fail(None) happen? If this matches we will have a valid value for A.
John A. De Goes
@jdegoes
Sep 14 11:11


// type Effect0[E, A] = Future[Either[E, Option[A]]]

trait Effect[F[_, _]] {
  def monad[E]: Monad[F[E, ?]]

  def fail[E, A](e: E): F[E, A]

  def attempt[E, A](fea: F[E, A]): F[Nothing, Either[E, A]]

  def none[E, A]: F[E, A]

  def some[E, A](a: A): F[E, A]

  def fromFuture[E, A](f: Future[A]): F[E, A]
}
object Effect {
  type MyIO[E, A] = IO[Option[E], A]

  implicit val EffectMyIO: Effect[MyIO] = new Effect[MyIO] {
    def monad[E]: Monad[MyIO[E, ?]] = 
        new Monad[MyIO[E, ?]] {
        def point[A](a: => A): MyIO[E, A] = IO.point(a)
        def bind[A, B](fa: MyIO[E, A])(f: A => MyIO[E, B]): MyIO[E, B] = fa.flatMap(f)
      }

    def fail[E, A](e: E): MyIO[E, A] = IO.fail(Some(e))

    def attempt[E, A](fea: MyIO[E, A]): MyIO[Nothing, Either[E, A]] = 
        fea.attempt.flatMap {
        case Left(None)         => IO.fail[Option[E]](None)
        case Left(Some(e))     => IO.now(Left(e))
        case Right(a)             => IO.now(Right(a)) 
      }

    def none[E, A]: MyIO[E, A] = IO.fail[Option[E]](None)

    def some[E, A](a: A): MyIO[E, A] = IO.now(a)

    def fromFuture[E, A](f: Future[A]): MyIO[E, A] = ???
  }
}

def geoAPI[F[_, _]: Effect](url: String): F[E, Geocode] = ???

def cacheAPI[F[_, _]: Effect](key: Array[Byte]): F[E, Value] = ???

def queryDatabase[F[_, _]: Effect](query: String): F[E, Response] = ???

Merunas
@meras
Sep 14 11:12
https://teletype.atom.io/#getting-started might be worth a shot over lunch
Menestret Martin
@mmenestret_twitter
Sep 14 11:13

    Task, or Cats IO, those legacy IO Monads.
    by @jdegoes
    (won't tweet that).

Jorge
@jaliss
Sep 14 11:13
lol
Menestret Martin
@mmenestret_twitter
Sep 14 11:14
:D
Alex Henning Johannessen
@ahjohannessen
Sep 14 11:14
@jdegoes Should it not be: case Left(None) => IO.fail[Option[Nothing]](None)?
Menestret Martin
@mmenestret_twitter
Sep 14 11:19
@jdegoes would it be possible to talk a bit about fix point / recursion schemes this afternoon ?
Leszek Gruchała
@leszekgruchala
Sep 14 11:20

2 years ago when I started with Monix and quickly end up with EitherT[Task, E, A] I thought: why the hell Tasks[A] is not Task[E,A]. Apprenelty Alexander, the creator of Monix did it by purpose: https://alexn.org/blog/2018/05/06/bifunctor-io.html

Which I personally don’t agree with as effectively he is saying that throwing exceptions is fine.
Menestret Martin
@mmenestret_twitter
Sep 14 11:21
Yep, that's the same choices in cats IO
Leszek Gruchała
@leszekgruchala
Sep 14 11:22
Sure, as cats-io was created based on monix’s Task
Menestret Martin
@mmenestret_twitter
Sep 14 11:22
yes
John A. De Goes
@jdegoes
Sep 14 11:23
@ahjohannessen Yes that's right, I fixed it

object MyRTS extends RTS { } 
MyRTS.unsafeRun(putStrLn("Hello"))

Leszek Gruchała
@leszekgruchala
Sep 14 11:24

There is an attempt to use cats-io as BIO, https://github.com/LukaJCB/cats-bio

And more background http://degoes.net/articles/bifunctor-io
Menestret Martin
@mmenestret_twitter
Sep 14 11:25
whats bio ? bifunctor io ?
oh ok got my answer
Leszek Gruchała
@leszekgruchala
Sep 14 11:25
yes
Menestret Martin
@mmenestret_twitter
Sep 14 11:26
That is based on the same usage that you had of Task
ioEitherT refers to EitherT[cats.effect.IO, E, A]
Leszek Gruchała
@leszekgruchala
Sep 14 11:27
No, this is added there just for benchmark
Look at the amount of errors :scream:
John A. De Goes
@jdegoes
Sep 14 11:28

case class Account()
case class Adjustment()
case class Balance()

trait Account[F[_]] {
  def balance(account: Account): F[Balance]

  def adjust(account: Account, adjustment: Adjustment): F[Balance]

  def transaction[A](fa: F[A]): F[A]
}

val result: F[(Balance, Balance)] =
  transaction { 
    for {
      b1 <- adjust(account1, 200)
      b2 <- adjust(account2, -200)
    } yield (b1, b2)
  }

ಠ_ರೃ
@mrt181_twitter
Sep 14 11:28
http://degoes.net/articles/effects-without-transformers
Wiem Zine El Abidine
@wi101
Sep 14 11:29
the attempt method should return: F[E, Either[E, A]]instead of F[Nothing, Either[E, A]] because in case of Left(None) we have to return IO.fail(None)
Menestret Martin
@mmenestret_twitter
Sep 14 11:29
Stooop so many articles to read ffs
ಠ_ರೃ
@mrt181_twitter
Sep 14 11:29
Never stop reading, never stop learning
Wiem Zine El Abidine
@wi101
Sep 14 11:30
I am hungry
but I am interested to keep listening
ಠ_ರೃ
@mrt181_twitter
Sep 14 11:30
@jdegoes how do you keep up to date, which resources are you reading regularly?
Wiem Zine El Abidine
@wi101
Sep 14 11:30
questions after the lunch
ಠ_ರೃ
@mrt181_twitter
Sep 14 11:31
https://paperswelove.org/
didn't know that
Tomas Kruty
@tomkru
Sep 14 11:33
https://fpchat-invite.herokuapp.com <- get invite for the fp slack channel
John A. De Goes
@jdegoes
Sep 14 12:13
http://www.geekabyte.io/2018/05/thoughts-on-dealing-with-having-another.html
John A. De Goes
@jdegoes
Sep 14 12:18
https://gist.github.com/jdegoes/da80f74c95efe06cb41a929eead532d4
Alex Henning Johannessen
@ahjohannessen
Sep 14 12:27
sound is choppy
Amine SAGAAMA
@AmineSagaama
Sep 14 12:27
the sound is bad
Jorge
@jaliss
Sep 14 12:27
yeah
Leszek Gruchała
@leszekgruchala
Sep 14 12:27
yes
Jules Ivanic
@guizmaii
Sep 14 12:28
https://github.com/ProjectSeptemberInc/freek
Jorge
@jaliss
Sep 14 12:29
freek is mandugian's magic
:)
Jules Ivanic
@guizmaii
Sep 14 12:29
yeah. I’m not sure he’ll continue to maintain it
Menestret Martin
@mmenestret_twitter
Sep 14 12:30
There's http://frees.io as well bu I think they merged their effort with cats-mtl, abandonning free monad to tagless
Jules Ivanic
@guizmaii
Sep 14 12:35
@mmenestret_twitter frees.io is more than just a Free monad
Menestret Martin
@mmenestret_twitter
Sep 14 12:35
well it provides way to interop in a Free context I think
But the core was to provide utilities to easily create your free algebra and reduce the boilerplate
But you're right
They offer more :)
ಠ_ರೃ
@mrt181_twitter
Sep 14 12:38
in scala 3 can you also use enum to build GADTs?
Amine SAGAAMA
@AmineSagaama
Sep 14 12:47
we will talk about Category theory ?
Menestret Martin
@mmenestret_twitter
Sep 14 12:47
Recursion schemes ! :alien:
Amine SAGAAMA
@AmineSagaama
Sep 14 12:47
matryoshka :D
Menestret Martin
@mmenestret_twitter
Sep 14 12:48
I'll try to support scalaz schema :D
Alex Henning Johannessen
@ahjohannessen
Sep 14 12:48
Pure FP Actors
Leszek Gruchała
@leszekgruchala
Sep 14 12:48
we talked about Category Theory all the time actually
Menestret Martin
@mmenestret_twitter
Sep 14 12:48
@AmineSagaama you should too !
Amine SAGAAMA
@AmineSagaama
Sep 14 12:49
@mmenestret_twitter yes ! good idea !
Jorge
@jaliss
Sep 14 12:50
All roads lead to Haskell
Menestret Martin
@mmenestret_twitter
Sep 14 12:50
Could you give an example of that functors ? No idea what it might be ._.
Would love to understand co-things as well
Yeah !
No idea of what's their use
Simon Mittermueller
@simonmit
Sep 14 12:52
+1 for HOAS
Bertjan Broeksema
@bbroeksema
Sep 14 12:52
I'd be in favor of the Higher order abstract syntax
Sitbon
@nsitbon
Sep 14 12:52
how would you deal with Unix signal in a pure FP application for example if I want to somehow "catch" SIGINT to properly terminate my application?
Bertjan Broeksema
@bbroeksema
Sep 14 12:52
That relates to the tricks you did in Quasar, right?
ಠ_ರೃ
@mrt181_twitter
Sep 14 12:53
trolling lightbend
Menestret Martin
@mmenestret_twitter
Sep 14 12:53
What's HOAS ? I missed few mins
Simon Mittermueller
@simonmit
Sep 14 12:53
Higher order abstract syntax
Jorge
@jaliss
Sep 14 12:53
a way to build typesafe DSLs into your app
Bertjan Broeksema
@bbroeksema
Sep 14 12:53
which is extremely cool
Menestret Martin
@mmenestret_twitter
Sep 14 12:53
Wasn't what we did with tagless / free ?
Jorge
@jaliss
Sep 14 12:54
I guess it's another technique
Sitbon
@nsitbon
Sep 14 12:55
thx
Leszek Gruchała
@leszekgruchala
Sep 14 12:55
scalaz.zio.App
Bertjan Broeksema
@bbroeksema
Sep 14 12:56
HOAS
Maciej Kowalski
@fkowal
Sep 14 12:56
Higher Order Abstract Syntax
Kurt Logan
@kurtlogan
Sep 14 12:56
HOAS
Simon Mittermueller
@simonmit
Sep 14 12:56
+1 for HOAS
marianobringas
@marianobringas
Sep 14 12:56
HOAS / recursion schemes / functors
Menestret Martin
@mmenestret_twitter
Sep 14 12:56
HOAS / Recursion scheme / Selectable Functor
Amine SAGAAMA
@AmineSagaama
Sep 14 12:56
recursion schemes
Eric Nelson
@enelson
Sep 14 12:56
Functors / HOAS
Merunas
@meras
Sep 14 12:56
f u n c t o r s
cverdier
@cverdier
Sep 14 12:57
Functors / HOAS
allami
@allami
Sep 14 12:57
Recursion schemes
Leszek Gruchała
@leszekgruchala
Sep 14 12:57
HOAS / Recursion scheme
Jorge
@jaliss
Sep 14 12:57
functors / HOAS / actors
Jules Ivanic
@guizmaii
Sep 14 12:57
Recursion schemes
Rob Vermazeren
@RobVermazeren
Sep 14 12:57
recursion schemes
Jules Ivanic
@guizmaii
Sep 14 12:57
and Functors
Jorge
@jaliss
Sep 14 12:57
Let's kidnap John and cover all topics.
realfiretiger
@realfiretiger
Sep 14 12:58
+1
Menestret Martin
@mmenestret_twitter
Sep 14 12:58
We pick 2 topics and we time bound both so we get enough material to be autonomous to continue digging by ourselves ?
Jules Ivanic
@guizmaii
Sep 14 12:58
+1
Alex Henning Johannessen
@ahjohannessen
Sep 14 12:58
actors / HOAS / recursion schemes / selectable functors
realfiretiger
@realfiretiger
Sep 14 12:58
actors/HOAS/functors
Alex Henning Johannessen
@ahjohannessen
Sep 14 12:58
:metal:
dadepo
@dadepo
Sep 14 12:59
Strange Functors (selectable) and/or Higher-Order Abstract Syntax
Artsiom Miklushou
@mikla
Sep 14 12:59
Хаос
Kurt Logan
@kurtlogan
Sep 14 13:00
HOAS / Recursion Schemes
Jules Ivanic
@guizmaii
Sep 14 13:00
HOAS / Functors
Menestret Martin
@mmenestret_twitter
Sep 14 13:00
Just enough to be able to continue by ourselves on both topics :)
lol i think HOAS is the clear winner
Maciej Kowalski
@fkowal
Sep 14 13:00
HOAC then Selectable Functor
Menestret Martin
@mmenestret_twitter
Sep 14 13:00
the second is unclear
Merunas
@meras
Sep 14 13:00
https://www.strawpoll.me/16456559
Menestret Martin
@mmenestret_twitter
Sep 14 13:00
:p
Jorge
@jaliss
Sep 14 13:01
ha I was building a doodle
Amine SAGAAMA
@AmineSagaama
Sep 14 13:01
I think recursion schemes is very helpful for Big Data project
Sitbon
@nsitbon
Sep 14 13:01
@jdegoes low carb/ low fat diet? ;-)
Menestret Martin
@mmenestret_twitter
Sep 14 13:03
Has someone a good learning material about scala type checking and type erasure process ?
Leszek Gruchała
@leszekgruchala
Sep 14 13:07
type erasure https://medium.com/@sinisalouc/overcoming-type-erasure-in-scala-8f2422070d20
Menestret Martin
@mmenestret_twitter
Sep 14 13:08
Yep I've red that one, looking for other to complete it :)
Jorge
@jaliss
Sep 14 13:10
I'm interested in reading more about modeling things in an FP way .... I think it's not easy to do the mental shift from OO.
ಠ_ರೃ
@mrt181_twitter
Sep 14 13:11
@jaliss https://www.goodreads.com/book/show/23488413-functional-and-reactive-domain-modeling
Jorge
@jaliss
Sep 14 13:11
oh cool. thx @mrt181_twitter
ಠ_ರೃ
@mrt181_twitter
Sep 14 13:11
examples model bank accounts
such models, very enterprise
Menestret Martin
@mmenestret_twitter
Sep 14 13:14
@mrt181_twitter that one is awesome, at least the functional part
awesome
ಠ_ರೃ
@mrt181_twitter
Sep 14 13:17
why not Lit[A](value: A)
Wiem Zine El Abidine
@wi101
Sep 14 13:48
EitherT.either(-\/("Error"))
Leszek Gruchała
@leszekgruchala
Sep 14 13:48
:clap:
Merunas
@meras
Sep 14 13:49
👍
squiggles© brought to you by IntelliJ
Menestret Martin
@mmenestret_twitter
Sep 14 13:50
Ahah
Bertjan Broeksema
@bbroeksema
Sep 14 13:50
HAha indeed
I'm trying to get ensime working, but to no avail yet
Menestret Martin
@mmenestret_twitter
Sep 14 13:53
I would love to be able to work on atom / vim or vs code like that but omfg type inference in the editor, refactoring, direct link to stuff and so on... would have a hard time to get used to not having it
Merunas
@meras
Sep 14 13:54
easy, be more like John, have the compiler inside your head
Leszek Gruchała
@leszekgruchala
Sep 14 13:56

I have the same. refactoring (in projects you join or many people of different levels work on) and suggestions of types needed and returned for the methods available only on given type is really useful.
Otherwise you have to know type signatures of many many things like John, but he still looks at javadocs.

I use IDEA with terminal with sbt anyway, but above still applies.
Merunas
@meras
Sep 14 14:02
can someone c/p the code so far 🙏
Jules Ivanic
@guizmaii
Sep 14 14:05
does it compiles for you ?

[info] Compiling 1 Scala source to /Users/jules/functional-scala/target/scala-2.12/classes ...
[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:256:83: type mismatch;
[error]  found   : (Symbol, Any)
[error]  required: String
[error]       def addValue(name: Symbol, value: Any): IState = copy(value = value + (name -> value))
[error]                                                                                   ^
[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:269:40: type mismatch;
[error]  found   : value.type (with underlying type Int)
[error]  required: A
[error]           case IntLit(value) => IO.now(value)
[error]                                        ^
[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:270:72: type mismatch;
[error]  found   : Int
[error]  required: A
[error]           case Add(l, r)     => interpret0(l).seqWith(interpret0(r))(_ + _)
[error]                                                                        ^
[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:277:21: type mismatch;
[error]  found   : b.type (with underlying type A0)
[error]  required: A
[error]             } yield b
[error]                     ^
[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:286:56: polymorphic expression cannot be instantiated to expected type;
[error]  found   : [F[_], B]scalaz.EitherT[F,String,B]
[error]  required: scalaz.zio.IO[String,A]
[error]           case _                      => EitherT.either(-\/("Error"))
[error]                                                        ^
[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:289:21: missing parameter type for expanded function ((x$9: <error>) => interpret0(p, x$9))
[error]       interpret0(p, _)
[error]                     ^
[error] /Users/jules/functional-scala/src/main/scala/net/degoes/05-arts/exercises.scala:289:17: Adapting argument list by creating a 2-tuple: this may not be what you want.
[error]         signature: interpret.interpret0[A](expr: net.degoes.arts.exercises.TeachingHigherOrderAsbtractSyntax.Expr[A]): scalaz.zio.IO[String,A]
[error]   given arguments: p, <x$9: error>
[error]  after adaptation: interpret.interpret0((p, <x$9: error>): null)
[error]       interpret0(p, _)
[error]                 ^

Amine SAGAAMA
@AmineSagaama
Sep 14 14:07
we have to use asInstanceOf ?, is there another way to avoid that ?
Bertjan Broeksema
@bbroeksema
Sep 14 14:12
My brain needs to recover for at least two weeks after this week :joy:
Jules Ivanic
@guizmaii
Sep 14 14:13
Does someone have a compiling version ?
Bertjan Broeksema
@bbroeksema
Sep 14 14:13
yup
Wiem Zine El Abidine
@wi101
Sep 14 14:13
yes
Bertjan Broeksema
@bbroeksema
Sep 14 14:13

package net.degoes

import scalaz._
import scalaz.Scalaz._


object HigherOrderAbstractSyntax {
  /**
    * Let's write a language which supports:
    *
    * let i = 0
    * in while (i < 10) { i = i + 1 }
    */
  sealed trait Expr[A]
  case class IntLit(value: Int) extends Expr[Int]
  case class Add(l: Expr[Int], r: Expr[Int]) extends Expr[Int]
  case class Let[A, B](name: Symbol, value: Expr[A], body: Expr[B]) extends Expr[B]
  case class Value[A](name: Symbol) extends Expr[A]
  case class UpdateVar[A](name: Symbol, value: Expr[A]) extends Expr[A]
  case class LessThan(l: Expr[Int], Right: Expr[Int]) extends Expr[Boolean]
  case class While[A](condition: Expr[Boolean], body: Expr[A]) extends Expr[Unit]

  case class IState(value: Map[Symbol, Any]) {
    def addVariable(name: Symbol, v: Any): IState =
      copy(value = value + (name -> v))

    def removeVariable(name: Symbol): IState =
      copy(value = value - name)
  }

  import scalaz.zio._

  def interpret[A0](expr: Expr[A0], ref: Ref[IState]): IO[String, A0] = {

    def interpret0[A](expr: Expr[A]): IO[String, A] =
      expr match {
        case IntLit(value) => IO.now(value)
        case Add(left, right) => interpret0(left).seqWith(interpret0(right))(_ + _)
        case Let(name, value, body) =>
          for {
            v <- interpret0(value)
            _ <- ref.update(_.addVariable(name, v))
            b <- interpret0(body)
            _ <- ref.update(_.removeVariable(name))
          } yield b
        case Value(name)=>
          for {
            s <- ref.get
            v <- IO.fromOption((s.value.get(name))).leftMap(_ => "Unreferenced variable: " + name)
          } yield v.asInstanceOf[A]

        case UpdateVar(name, value) =>
          for {
            v <- interpret0(value)
            _ <- ref.update(_.addVariable(name, v))
          } yield v
        case LessThan(left, right) =>
          interpret0(left).seqWith(interpret0(right))(_ < _)
        case While(condition, body) =>
          (for {
            b <- interpret0(condition)
            _ <- if (b) interpret0(body) else IO.unit
          } yield b).repeat(Schedule.doWhile[Boolean](identity)).void
        case _ => IO.fail("Error")
      }

    interpret0(expr)
  }

  // Main problem: this is pretty type unsafe:
  // Everywhere, we see 'i, we can put in an arbitrary string.
  val program: Expr[Unit] =
    Let('i, IntLit(0),
      While(LessThan(Value('i), IntLit(10)),
        UpdateVar('i, Add(Value('i), IntLit(1)))
      )
    )
}

hmmmz
John A. De Goes
@jdegoes
Sep 14 14:14
https://gist.github.com/jdegoes/f3c0f780cdb3ff293f7a2ee0dfac1ab5
ಠ_ರೃ
@mrt181_twitter
Sep 14 14:14
@bbroeksema use ```
instead of """
Bertjan Broeksema
@bbroeksema
Sep 14 14:14
right
John A. De Goes
@jdegoes
Sep 14 14:15
^^^ See above for compiling code
ಠ_ರೃ
@mrt181_twitter
Sep 14 14:21
why does IO.now(value) work? it returns IO[Nothing, Int] but interpret0 returns IO[String, A]?
sbt happily compiles
nevermind
Nothing is a subtype of String
Menestret Martin
@mmenestret_twitter
Sep 14 14:24
^^
Wiem Zine El Abidine
@wi101
Sep 14 14:26
@mrt181_twitter thanks to the covariance IO[+E, +A]
ಠ_ರೃ
@mrt181_twitter
Sep 14 14:27
:+1:
my brain is not properly rewired yet
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 14:39
This is great.
in Expr[IO[String, ?]] ? means that def interpret... is not concrete?
Menestret Martin
@mmenestret_twitter
Sep 14 14:43
I still don't get what changed comparing to what we saw about tagless final yesterday / this morning ><
Maybe I'm missing something there
Jorge
@jaliss
Sep 14 14:46
Same here
John A. De Goes
@jdegoes
Sep 14 14:47

  object Expr {
    def apply[F[_]](implicit F: Expr[F]): Expr[F] = F
  }
  implicit class IntExprSyntax[F[_]](left: F[Int]) {
    def + (right: F[Int])(implicit F: Expr[F]): F[Int] = F.add(left, right)
    def < (right: F[Int])(implicit F: Expr[F]): F[Boolean] = F.lessThan(left, right)
  }
  def int[F[_]: Expr](i: Int): F[Int] = Expr[F].intLit(i)
  def let[F[_]: Expr, A, B](name: String, value: F[A])(body: F[A] => F[B]): F[B] =
    Expr[F].let(name, value, body)
  def while0[F[_]: Expr, A](condition: F[Boolean])(body: F[A]): F[Unit] =
    Expr[F].while0(condition, body)

Menestret Martin
@mmenestret_twitter
Sep 14 14:49
I think it starts to click
John A. De Goes
@jdegoes
Sep 14 14:56

  trait Expr[F[_]] {
    type Var[_]

    def intLit(value: Int): F[Int]
    def add(l: F[Int], r: F[Int]): F[Int]
    def let[A, B](name: String, value: F[A], body: Var[A] => F[B]): F[B]
    def updateVariable[A](name: Var[A], value: F[A]): F[A]
    def value[A](variable: Var[A]): F[A]
    def lessThan(left: F[Int], right: F[Int]): F[Boolean]
    def while0[A](condition: F[Boolean], body: F[A]): F[Unit]
  }

Bertjan Broeksema
@bbroeksema
Sep 14 14:57

object HigherOrderAbstractSyntax {
  /**
    * Let's write a language which supports:
    *
    * let i = 0
    * in while (i < 10) { i = i + 1 }
    */
  trait Expr[F[_]] {
    def intLit(value: Int): F[Int]
    def add(l: F[Int], r: F[Int]): F[Int]
    // Uses scala lambdas in input type
    def let[A, B](name: Symbol, value: F[A], body: F[A] => F[B]): F[B]
    def updateVar[A](name: Symbol, value: F[A]): F[A]
    def lessThan(l: F[Int], Right: F[Int]): F[Boolean]
    def while0[A](condition: F[Boolean], body: F[A]): F[Unit]
  }
  object Expr {
    def apply[F[_]](implicit F: Expr[F]): Expr[F] = F
  }

  implicit class IntExprSyntax[F[_]](left: F[Int]) {
    def + (right: F[Int])(implicit F: Expr[F]): F[Int] = F.add(left, right)
    def < (right: F[Int])(implicit F: Expr[F]): F[Boolean] = F.lessThan(left, right)
  }
  def int[F[_]: Expr](i: Int): F[Int] = Expr[F].intLit(i)
  def let[F[_]: Expr, A, B](name: Symbol, value: F[A])(body: F[A] => F[B]): F[B] =
    Expr[F].let(name, value, body)
  def while0[F[_]: Expr, A](condition: F[Boolean])(body: F[A]): F[Unit] =
    Expr[F].while0(condition, body)

  case class IState(value: Map[Symbol, Any]) {
    def addVariable(name: Symbol, v: Any): IState =
      copy(value = value + (name -> v))

    def removeVariable(name: Symbol): IState =
      copy(value = value - name)
  }

  import scalaz.zio._

  // Look how in this program, 'i is defined in let, but than becomes a real
  // scala variable in the places where you want to use it.
  //
  // Variables in the DSL, have now become variables in scala as well. This
  // doesn't hold for the updateVar yet. This can be worked around, but if
  def program[F[_]: Expr]: F[Unit] =
    let('i, int(0))(i =>
      while0(i < int(10))(
        Expr[F].updateVar('i, i + int(1))
      )
    )
}

Menestret Martin
@mmenestret_twitter
Sep 14 14:57
thanks
Leszek Gruchała
@leszekgruchala
Sep 14 14:57
thx
Alex Henning Johannessen
@ahjohannessen
Sep 14 14:58
@jdegoes What kind real-world usage of HOAS is common?
Bertjan Broeksema
@bbroeksema
Sep 14 14:59
Business rules DSL for example
Wiem Zine El Abidine
@wi101
Sep 14 14:59
@bbroeksema thanks
Menestret Martin
@mmenestret_twitter
Sep 14 15:00
Any business logic algebra I guess yep
Bertjan Broeksema
@bbroeksema
Sep 14 15:00
and a better Spark => i.e. quasar and friends ;)
Menestret Martin
@mmenestret_twitter
Sep 14 15:00
Btw @jdegoes do you suggest using scalazzi plugin ?
Oleksandra Holubitska
@Vilkina
Sep 14 15:06
I'm back. Lost an internet connection
Leszek Gruchała
@leszekgruchala
Sep 14 15:06
what a luck
to lose internet connection during the training
Oleksandra Holubitska
@Vilkina
Sep 14 15:09
@leszekgruchala tnx :(
ಠ_ರೃ
@mrt181_twitter
Sep 14 15:15
what the meaning of this [E1 >: E, B]
Leszek Gruchała
@leszekgruchala
Sep 14 15:16
lower bound
E1 must be a supertype of E if I remember correctly
Oleksandra Holubitska
@Vilkina
Sep 14 15:19
I like concrete val)
Bertjan Broeksema
@bbroeksema
Sep 14 15:31
HAh, this stuff is all extremely cool! :)
Merunas
@meras
Sep 14 15:31
aye
Wiem Zine El Abidine
@wi101
Sep 14 15:34
@mrt181_twitter E1 is a supertype of E [E1 >: E, B] because we will use it at the input of a function, we can't use the type E because it is a covariant (+E: it accepts the subtypes of E ===> Nothing)
every function(i: I): O has a contravariant Input types and returns a covariant output types,
Tricks:
if we have Type[+A] we cannot define a function which has A as input type without adding in the parameter of that function [A1 >: A]
if we have Type[-A] we cannot define a function which returns A without adding in the parameter of that function [A1 <: A]
Leszek Gruchała
@leszekgruchala
Sep 14 15:35
great explenation
Wiem Zine El Abidine
@wi101
Sep 14 15:36
:)
ಠ_ರೃ
@mrt181_twitter
Sep 14 15:38
thank you great
Alex Henning Johannessen
@ahjohannessen
Sep 14 15:50
@jdegoes With regards to tagless final. Is this a normal thing to do?

  trait LowDslA[F[_]] {
    def doA(i: Int): F[Int]
    def doAB(i: Int, j: Int): F[Int]
  }

  type SettingsA = Int
  object LowDslA {
    def apply[F[_]](s: SettingsA): LowDslA[F] = ???
  }

  trait LowDslB[F[_]] {
    def doB(i: Int): F[Int]
    def doBC(i: Int, s: String): F[Int]
  }

  type SettingsB = Int
  object LowDslB {
    def apply[F[_]](s: SettingsB): LowDslB[F] = ???
  }

  trait HighDsl[F[_]] {
    def doH1(): F[Unit]
    def doH2(i: Int): F[Int]
  }

  object HighDsl {
    def apply[F[_]: scalaz.Monad](la: LowDslA[F], lb: LowDslB[F]) : HighDsl[F] = new HighDsl[F] {
      def doH1(): F[Unit] = ???
      def doH2(i: Int): F[Int] = ???
    }
  }

  object eow {

    val lowDslA: LowDslA[Task] = ???
    val lowDslAWithDifferentSettings: LowDslA[Task] = ???
    val lowDslB: LowDslB[Task] = ???
    val highDsl: HighDsl[Task] = HighDsl[Task](lowDslA, lowDslB)

    def program[F[_] : HighDsl] = ???

  }

Here I think about dependencies
Artsiom Miklushou
@mikla
Sep 14 15:50

    http://www.geekabyte.io/2018/05/thoughts-on-dealing-with-having-another.html This article recmmends to use Monad Transformers :))

Alex Henning Johannessen
@ahjohannessen
Sep 14 15:52
You think about coherence?
Ok, great. Would another approach be type class for Environment or Config? Or Reader for settings?
Wrt. implicit summoning
John A. De Goes
@jdegoes
Sep 14 16:02

trait MonadReader[R, F[_]] {
    def read: F[R]
  }
  trait HasEnv1[R] {
    def env1: Lens[R, LowDslEnv1]
  }
  case class LowDslEnv1()
  def myLowDsl1[R: HasEnv1, F[_]: MonadReader[R, ?]]: F[Unit] = ???

  trait HasEnv2[R] {
    def env2: Lens[R, LowDslEnv2]
  }
  case class LowDslEnv2()
  def myLowDsl2[R: HasEnv2, F[_]: MonadReader[R, ?]]: F[Unit] = ???

  case class GlobalEnv(env1: LowDslEnv1, env2: LowDslEnv2)
  object GlobalEnv {
    implicit val GlobalEnvHasEnv1: HasEnv1[GlobalEnv] = ???
    implicit val GlobalEnvHasEnv2: HasEnv2[GlobalEnv] = ???
  }
  def myProgram[F[_]: MonadReader[GlobalEnv, ?]]: F[Unit] = ???

Menestret Martin
@mmenestret_twitter
Sep 14 16:02
What's the right approach to write down your program, go for a simple, concrete implementations and then, when they work, abstract it out in algebras and go finally tagless ? Or you create your algebras first, write your business logic with them and at the end write your concrete instances ?
Jules Ivanic
@guizmaii
Sep 14 16:03
does it compiles for you ?
ok
Menestret Martin
@mmenestret_twitter
Sep 14 16:03
Ok, what I like about the other way around is that sometime you can write part of your algebras by composing simpler parts of it and save you some concrete work
Jules Ivanic
@guizmaii
Sep 14 16:03
β$11$ takes no type parameters, expected: one 😅
Menestret Martin
@mmenestret_twitter
Sep 14 16:04
β$11$, always the same.
Would you just have the time to roughly explain what a fixpoint is ? :o
Bertjan Broeksema
@bbroeksema
Sep 14 16:24
Is anyone still awake?! :P
Or in me.tooMuchBrainDamage mode :grin:
realfiretiger
@realfiretiger
Sep 14 16:25
ha
Leszek Gruchała
@leszekgruchala
Sep 14 16:25
tryin'
Menestret Martin
@mmenestret_twitter
Sep 14 16:25
This message was deleted
Bertjan Broeksema
@bbroeksema
Sep 14 16:26
:joy:
realfiretiger
@realfiretiger
Sep 14 16:26
anyone writing code like that atm?
Jules Ivanic
@guizmaii
Sep 14 16:26
some does
no me, for now
Bertjan Broeksema
@bbroeksema
Sep 14 16:26
Some(john) you mean :)
realfiretiger
@realfiretiger
Sep 14 16:26
:D
bbroeksema @bbroeksema suspects a super computer and a very powerful battery in his head
Menestret Martin
@mmenestret_twitter
Sep 14 16:27
Yeah I have colleague working with that shit
omg
realfiretiger
@realfiretiger
Sep 14 16:28
how long did it take him to become proficient?
Leszek Gruchała
@leszekgruchala
Sep 14 16:29
20y+
Menestret Martin
@mmenestret_twitter
Sep 14 16:29
I think @AmineSagaama & @wi101 worked with that, didn't you guys ?
Leszek Gruchała
@leszekgruchala
Sep 14 16:30
I am tired after this week and how John is able to do all those things, explain, talk and so on like he would write hello world in java… No matter question you will ask on no matter topic and he gets the answer. Boom.
realfiretiger
@realfiretiger
Sep 14 16:31
i noticed that too
Menestret Martin
@mmenestret_twitter
Sep 14 16:31
Yeah that's fuckin impressive
Leszek Gruchała
@leszekgruchala
Sep 14 16:31
And I thought I am not that stupid :D
realfiretiger
@realfiretiger
Sep 14 16:32
i know :D, i thought i make composable programs pretty good with some basic monads ported to kotlin
but this scalaz stuff is huge
Bertjan Broeksema
@bbroeksema
Sep 14 16:32
Haha, @leszekgruchala well, you're most likely reasonably smart, it's just that there are smarter people than you, which you happened to encounter this week :P
Leszek Gruchała
@leszekgruchala
Sep 14 16:32
I will take that reasoning!
Wiem Zine El Abidine
@wi101
Sep 14 16:35
@mmenestret_twitter yes
ಠ_ರೃ
@mrt181_twitter
Sep 14 16:35
@jdegoes thank you for this great week, my brain had a total break down and I really learned a lot
Menestret Martin
@mmenestret_twitter
Sep 14 16:36
I'd love to have a rule thumb to know wether it is worth to use the stuff we've seen last days and when it's overkill !
Alex Henning Johannessen
@ahjohannessen
Sep 14 16:36
Thanks for a great week @jdegoes :+1:
Leszek Gruchała
@leszekgruchala
Sep 14 16:38
I think it all boils down to more code when you build things just to make them easy to use in a very type safe way. So you make sure the client of your tool/library is guided by types and it’s way hard to write incorrect logically code.
Amine SAGAAMA
@AmineSagaama
Sep 14 16:39
@mmenestret_twitter oh yeah, i love that library : https://github.com/slamdata/matryoshka
Menestret Martin
@mmenestret_twitter
Sep 14 16:40
Thank you all for that week, and @jdegoes thanks again, it was as mind blowing as it was awesome...
Jorge
@jaliss
Sep 14 16:40
Thank you all. What a week! @jdegoes thank you, this was great!
Bye all!
Rob Vermazeren
@RobVermazeren
Sep 14 16:41
@jdegoes Thank you for a 5 great days. Lots of things learned! Lots of new things to learn!
Jules Ivanic
@guizmaii
Sep 14 16:41
Bye :)
marianobringas
@marianobringas
Sep 14 16:41
Thanks so much @jdegoes! this week was awesome
Eduardo Moritz Cavalcanti
@Eduardo-M-Cavalcanti
Sep 14 16:41
Thanks a lot @jdegoes and all you folks that participated and helped in these classes.
Jules Ivanic
@guizmaii
Sep 14 16:41
See you on Twitter or IRL if possible. See you at ScalaIO if you’re going ! :)
Simon Mittermueller
@simonmit
Sep 14 16:41
thx. bye
realfiretiger
@realfiretiger
Sep 14 16:41
Great week @jdegoes ! Thank you!
allami
@allami
Sep 14 16:41
Thanks @jdegoes
Leszek Gruchała
@leszekgruchala
Sep 14 16:41
Thank you and all the best
Wiem Zine El Abidine
@wi101
Sep 14 16:41
Thank you @jdegoes I learned a lot :) you're a good mentor!
Oleksandra Holubitska
@Vilkina
Sep 14 16:41
Thanks. It was amazing course. Best course in my life
Wiem Zine El Abidine
@wi101
Sep 14 16:58
By the way in this workshop I learned also the way to solve some problems we face in our projects (the way of functional programmers), it was great when we asked about some problems and we saw in live the steps to build a solution for every problems (it was also intensive to my brain :D ) but I am glad and honored to know how experiment FP people think and to learn from them.
John A. De Goes
@jdegoes
Sep 14 17:12
Thank you all for coming and attending. An amazing group of attendees, and you all deserve the upcoming weekend... rest up... and maybe do a few more exercises. :wink:
Jules Ivanic
@guizmaii
Sep 14 17:33
We have a booked table at McKay's at 7:30PM for 6
Steak night tonight :tada:
Artsiom Miklushou
@mikla
Sep 14 18:35
We are at McKeys @jdegoes
Jules Ivanic
@guizmaii
Sep 14 18:58
https://twitter.com/ValentinKasas/status/879414703340081156?s=19
Wiem Zine El Abidine
@wi101
Sep 14 19:19
@guizmaii I remember when I saw this tweet I didn't understand any thing, it was very complicated ! I am glad now that I can understand it! :)
Jules Ivanic
@guizmaii
Sep 14 19:28
It helped to understand a lot of things :)
Wiem Zine El Abidine
@wi101
Sep 14 19:28
yes
Jules Ivanic
@guizmaii
Sep 14 19:28
And now it helps me lot to explain these things to beginners !
Wiem Zine El Abidine
@wi101
Sep 14 19:29
yes, I think we should do some exercises to put that in mind
I understand now but maybe after 2 days I will forget :o
Merunas
@meras
Sep 14 19:46
Elevators!
Wiem Zine El Abidine
@wi101
Sep 14 19:59
:)
Artsiom Miklushou
@mikla
Sep 14 20:59
Maybe somebody is interested. Resersed State Monad in Scala https://pavkin.ru/reverse-state-monad-in-scala-is-it-possible/
Bertjan Broeksema
@bbroeksema
Sep 14 21:55
The "build a data strucure and write an efficient interpreter for it" approach really stuck! I just skimmed the RTS.eval code to see how it's done for zio.IO and I really like the approach.
_


John A. De Goes/functional-scala

cverdier
@cverdier
Sep 15 07:55

Morning !
Here's the picture we took yesterday
https://photos.app.goo.gl/tHpnEGyavtVQt2K2A

Thanks again John for this amazing training week !
Jules Ivanic
@guizmaii
Sep 15 07:58
Thank you @cverdier :+1:
Artsiom Miklushou
@mikla
Sep 15 08:38
@cverdier thank you!
Jens Hoffmann
@jchoffmann
Sep 15 08:54
that looks awesome. great choice of location!
_

John A. De Goes/functional-scala

toxicafunk
@toxicafunk
Oct 01 12:13
Hi! Any SpartanZ here yet?
Arbër Shabhasa
@ashabhasa
Oct 01 12:15
Hello
Alex Salguero
@hasumedic
Oct 01 12:18
:wave:
toxicafunk
@toxicafunk
Oct 01 12:39
the session should start in aprox 1:30 hrs right?
don't wanna get my timezones confused ... again :disappointed:
Dan Suman
@xdannys9_twitter
Oct 01 12:44
Yeah I think that’s right
toxicafunk
@toxicafunk
Oct 01 12:45
cool
FatCaterpillar
@FatCaterpillar
Oct 01 12:45
hello
Pavel Khamutou
@pkhamutou
Oct 01 12:51
Hi, is it going to be via Zoom link in the email?
toxicafunk
@toxicafunk
Oct 01 13:05
that's my best bet
Oleksandra Holubitska
@Vilkina
Oct 01 13:49
Hi
I think, in zoom
GrafBlutwurst
@GrafBlutwurst
Oct 01 13:53
o/
toxicafunk
@toxicafunk
Oct 01 13:57
hi @GrafBlutwurst !
you've been popping out everywhere i go lately :smile:
Muhammad Farag
@MuhammadFarag
Oct 01 13:58
:wave:
toxicafunk
@toxicafunk
Oct 01 13:59
u're working on schema right? @GrafBlutwurst
GrafBlutwurst
@GrafBlutwurst
Oct 01 14:00
jap also a bit on scalaz proper (because we needed ApplicativeError for scalaz-schema) and scalaz-analytics because I'm a spark monkey by day :D
toxicafunk
@toxicafunk
Oct 01 14:00
oh, I haven't checked the analytics project
what's your focus on?
I did a bit of spark about a year ago
GrafBlutwurst
@GrafBlutwurst
Oct 01 14:01
@toxicafunk it might just be that we're interested in the same things :D mostly scalaz-schema because it addresses a lot of points that I constantly work with
toxicafunk
@toxicafunk
Oct 01 14:01
sorry, I know about schema, I meant ot ask what's the focus on scalaz-analytics :smile:
GrafBlutwurst
@GrafBlutwurst
Oct 01 14:02
oh. not much yet. just proposals.
toxicafunk
@toxicafunk
Oct 01 14:02
will need to keep an eye on that
I focus what little time I have on scalaz-metrics but want to get active with reactive, distributed and schema
GrafBlutwurst
@GrafBlutwurst
Oct 01 14:03
join the gitter channel! @toxicafunk I'm also in the distributed one but it seems a bit slow lately
toxicafunk
@toxicafunk
Oct 01 14:04
yah, hopefully next week it restarts
John A. De Goes
@jdegoes
Oct 01 14:04
https://github.com/jdegoes/functional-scala
https://www.scala-lang.org/api/2.12.x/index.html
https://github.com/scalaz/scalaz/tree/series/7.3.x/core/src/main/scala/scalaz
https://scalaz.github.io/scalaz-zio/
https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc
Thiago Pereira
@iamthiago
Oct 01 14:13
yeah
Ahmad Ragab
@ASRagab
Oct 01 14:13
:thumbsup:
Thiago Pereira
@iamthiago
Oct 01 14:27
Left, Right?
Alex Salguero
@hasumedic
Oct 01 14:27
3
Yash Datta
@saucam
Oct 01 14:27
3
Ahmad Ragab
@ASRagab
Oct 01 14:35
4
Muhammad Farag
@MuhammadFarag
Oct 01 14:36
4
Tim Steinbach
@NeQuissimus
Oct 01 14:36
null!
:P
Ahmad Ragab
@ASRagab
Oct 01 14:36
3

  val EitherEitherUnitUnitUnitValues: List[Either[Either[Unit, Unit], Unit]] = List(
    Left(
      Right(())
    ),
    Left(
      Left(())
    ),
    Right(
      Right(()))
  )

GrafBlutwurst
@GrafBlutwurst
Oct 01 14:40
and nontermination and exceptions :p @NeQuissimus
Tim Steinbach
@NeQuissimus
Oct 01 14:40
yeah, just being a d**k
xD
Muhammad Farag
@MuhammadFarag
Oct 01 14:44
:thumbsup:
Thiago Pereira
@iamthiago
Oct 01 14:44
it’s fine
Ahmad Ragab
@ASRagab
Oct 01 14:44
I'm good
Alex
@Fruzenshtein
Oct 01 14:44
:+1:
Alex Salguero
@hasumedic
Oct 01 14:45
:thumbsup:
Damian Albrun
@insdami
Oct 01 14:51
@ASRagab I think you are missing Right(Left())
Alex
@Fruzenshtein
Oct 01 14:51
At the university this was covered on the course of Algebra And Numbers Theory
But in that time I didn't have a clue where it may be useful :D
Ahmad Ragab
@ASRagab
Oct 01 14:52
@insdami thank you.
James Warren
@jameswarren
Oct 01 14:54
@insdami I recommend you try compiling that ;)
Dejan Mijić
@mijicd
Oct 01 14:54
@insdami not really
Damian Albrun
@insdami
Oct 01 14:54
@jameswarren It compiles, Right(Left(()) doesn't give you a warning though
toxicafunk
@toxicafunk
Oct 01 14:55
euclidean space that is
Damian Albrun
@insdami
Oct 01 14:56

 val EitherEitherUnitUnitUnitValues: List[Either[Either[Unit, Unit], Unit]] =
    List(
        Left(Left(()))
      , Left(Right(()))
      , Right(Left(()))
      , Right(Right(()))
    )

Dejan Mijić
@mijicd
Oct 01 14:57
Except there’s no either on the right.
toxicafunk
@toxicafunk
Oct 01 14:58
but the first Right can only be unit
Damian Albrun
@insdami
Oct 01 14:58
Yeah, was it that mentioned? I missed the first part
catching up
Dejan Mijić
@mijicd
Oct 01 14:59
Take a look at the signature: Either[Either[Unit, Unit], Unit]. What you wrote fits into Either[Either[Unit, Unit], Either[Unit, Unit]].
James Warren
@jameswarren
Oct 01 15:00
@insdami - my apologies, it does compile, but it'll evaluate to Right(())
Damian Albrun
@insdami
Oct 01 15:01
@jameswarren No worries, Now having a closer look I don't know why the compiler doesn't catch it
toxicafunk
@toxicafunk
Oct 01 15:01
can verify the compiler didn't catch it
James Warren
@jameswarren
Oct 01 15:03
it shouldn't catch it - it's like declaring a function that returns Unit with the last line resulting in a value
in that case the value is ignored
Ahmad Ragab
@ASRagab
Oct 01 15:03
@jdegoes could you explain what that might mean that the product of Nothing and A is Nothing?
Damian Albrun
@insdami
Oct 01 15:06
@jameswarren Cheers, you are right. I can put whatever in there and it's ignored
Álvaro Castellanos López
@AlvaroCaste
Oct 01 15:07
unfortunately, I have to leave soon. Will this be recorded?
Muhammad Farag
@MuhammadFarag
Oct 01 15:08
I think to2 should return Nothing?
Domenico Fioravanti
@nicodom
Oct 01 15:08
Me too :(. Is there a way of following the training offline? Many of us are probably working
Álvaro Castellanos López
@AlvaroCaste
Oct 01 15:08
Thanks!
Pierangelo Cecchetto
@pierangeloc
Oct 01 15:15
I’m in the same situation as @nicodom :-(
toxicafunk
@toxicafunk
Oct 01 15:21
sealed trait vs abstract class???
Muhammad Farag
@MuhammadFarag
Oct 01 15:22
We use sealed to use finite set?
Yuriy Susuk
@ysusuk
Oct 01 15:24
type Identifier = Either[Int, String] ? =)
hardlianotion
@hardlianotion
Oct 01 15:24
type Identifier = Either[Int, String]
Calvin Lee Fernandes
@calvinlfer
Oct 01 15:25
type Identifier = Either[Int, String]
Dejan Mijić
@mijicd
Oct 01 15:25
Left(a)
toxicafunk
@toxicafunk
Oct 01 15:29
or (Unit, A)
Oleksandra Holubitska
@Vilkina
Oct 01 15:32

trait Identifier {
  var num: Int     
  var string: String  
}

class Test extends Identifier {
  var num = 0   
  var string = "test"  
}

Muhammad Farag
@MuhammadFarag
Oct 01 15:34
Is it possible to represent sum types if the language doesn’t support sum types 🤔
Dejan Mijić
@mijicd
Oct 01 15:34
sum
Muhammad Farag
@MuhammadFarag
Oct 01 15:34
Sum, I think
product of characters?
toxicafunk
@toxicafunk
Oct 01 15:35
mmm in Java you can get some way by using Enum @MuhammadFarag
Arbër Shabhasa
@ashabhasa
Oct 01 15:35
probably ccan be modeled as both
toxicafunk
@toxicafunk
Oct 01 15:35
but its not exactly the same
Muhammad Farag
@MuhammadFarag
Oct 01 15:36
Thanks @toxicafunk
Phong Nguyen
@phongngtuan
Oct 01 15:38
@MuhammadFarag you can use a "tag" e.g. a class implement hasLeft, hasRight, getLeft and getRight but only 1 get can return non-null value
Muhammad Farag
@MuhammadFarag
Oct 01 15:39
Thank you @phongngtuan that makes sense :)
Luke
@lukejknight
Oct 01 15:43
you can church encode them but it's hard :p
toxicafunk
@toxicafunk
Oct 01 15:43
Map
Muhammad Farag
@MuhammadFarag
Oct 01 15:43
thanks
Dmitry Ivanov
@diminou
Oct 01 15:45
type CreditCard = (Int, Int, Int)
Even though Ints are too large
Calvin Lee Fernandes
@calvinlfer
Oct 01 15:45

  case class SecurityCode(code: Int)
  case class CreditCard0(number: Long, expirationDate: ZonedDateTime, securityCode: SecurityCode)

Alex Salguero
@hasumedic
Oct 01 15:45

case class CreditCard(number: CreditCardNumber, expirationDate: java.time.LocalDate, securityCode: SecurityCode)

Fabian Page
@fabianpage
Oct 01 15:45
type CreditCard = (CreditCardNumber, Date, Code)
Yuriy Susuk
@ysusuk
Oct 01 15:45
type CreditCard = case class (number: Number, expirationDate: Date, securityCode: SecurityCode)
Ahmad Ragab
@ASRagab
Oct 01 15:46

case class(number: CardNumber, expiration: Date, code: String)

Calvin Lee Fernandes
@calvinlfer
Oct 01 15:47
Use refined types :wink: as well
Tim Steinbach
@NeQuissimus
Oct 01 15:47
@calvinlfer My man!
Calvin Lee Fernandes
@calvinlfer
Oct 01 15:47
:love_letter:
Dmitry Ivanov
@diminou
Oct 01 15:47
Sum
Muhammad Farag
@MuhammadFarag
Oct 01 15:47
So, if SecurityCode is three integer between 100 and 800 for an example. Can you represent that in the type? Because that is logic (business logic)?
Ahmad Ragab
@ASRagab
Oct 01 15:47
sum type
Fabian Page
@fabianpage
Oct 01 15:48
sealed trait
Calvin Lee Fernandes
@calvinlfer
Oct 01 15:48
you can @MuhammadFarag
Luke
@lukejknight
Oct 01 15:48

  sealed trait PaymentMethod
  case object CreditCard extends PaymentMethod
  case object BankAccount extends PaymentMethod
  case object CryptoCurrency extends PaymentMethod

Calvin Lee Fernandes
@calvinlfer
Oct 01 15:48
you need https://github.com/fthomas/refined to encode constraints at the type level
Muhammad Farag
@MuhammadFarag
Oct 01 15:48
How @calvinlfer, like do you add conditionals/assertions when you create the type
satya
@satya23k
Oct 01 15:48
product
Ahmad Ragab
@ASRagab
Oct 01 15:49
product
Dmitry Ivanov
@diminou
Oct 01 15:49
type Employee = (String, Double, String, Int)
Ahmad Ragab
@ASRagab
Oct 01 15:49
Chess Board Sum
type
toxicafunk
@toxicafunk
Oct 01 15:49
@calvinlfer but u could instead use smart constructors
Muhammad Farag
@MuhammadFarag
Oct 01 15:50
Thanks @calvinlfer ❤️
Calvin Lee Fernandes
@calvinlfer
Oct 01 15:51
@toxicafunk yeah that's another approach, but you end up having a lot of Eithers and Options
toxicafunk
@toxicafunk
Oct 01 15:52
i actually meant that for @MuhammadFarag :smile:
and yeah, I agree, but its still an option
Calvin Lee Fernandes
@calvinlfer
Oct 01 15:52
i see what u did there :wink:
Muhammad Farag
@MuhammadFarag
Oct 01 15:53
Thank you guys :D
Mmmm! let me go back a bit, by smart constructors… do you mean constructors that provide assertions on the value constraints? @toxicafunk
toxicafunk
@toxicafunk
Oct 01 15:57
https://github.com/davegurnell/smartypants
basically as u say
Muhammad Farag
@MuhammadFarag
Oct 01 15:58
Thanks :)
Luke
@lukejknight
Oct 01 15:58
I don't think smart constructors are a great idea since most people throw exceptions from them. Solutions can be validation functions - e.g. If you're validating input from a user over wire, then you might accept integers, and then use some validation functions like scalaz validation to determine whether the int you received was a credit card number (for example) and return appropriate errors to the user... you end up with a Left (not valid) or Right (valid) ... and then of course that Right can be your more precise type
Dmitry Ivanov
@diminou
Oct 01 16:02

case class GameMap()
case class Player()

sealed abstract class NPC
case object Gnome extends NPC
case object Orc extends NPC

sealed abstract class Item
case object Axe extends Item
case object Shield extends Item
case object Horse extends Item

type Health = Double
type Mana = Double
type XP = Int
type Level = Int

case class CharStats(health: Health, mana: Mana, xp: XP, level: Level)
case class GameWorld(gm: GameMap, p: Player, npcs: List[NPC], items: List[Item], stats: CharStats)
Oleksandra Holubitska
@Vilkina
Oct 01 16:02
case class GameWorld(player: Player, map: GameMap, non-player: ??) {

}
case class Character(){

}

Luke
@lukejknight
Oct 01 16:02
Here's my basic attempt

  case class GameWorld(map: GameMap, player: GameCharacter, npcs: List[GameCharacter], items: List[Item])

  case class GameCharacter(name: String, stats: List[Stat])

  sealed trait GameMap {
    val name: String
  }

  sealed trait Item
  sealed trait Stat {
    val name: String
    val value: Int
  }

satya
@satya23k
Oct 01 16:02

 class Map

  sealed trait PlayerCharacter
  case object Player extends PlayerCharacter
  case object NonPlayer extends PlayerCharacter

  class Item

  sealed trait CharacterStats
  case object PlayerStats extends CharacterStats
  case object NonPlayerStats extends CharacterStats

  case class GameWorld(map: Map, PlayerType: PlayerCharacter, item: Item, stats: CharacterStats)

Thiago Pereira
@iamthiago
Oct 01 16:03

case class Position(lat: Double, lng: Double)
  case class Stats(health: Int, strength: Int)

  sealed trait Weapon
  case object Sword extends Weapon
  case object Axe extends Weapon
  case object Mace extends Weapon

  sealed trait Armor
  case object Plate extends Armor
  case object Mail extends Armor
  case object Leather extends Armor
  case object Cloth extends Armor

  sealed trait Character
  case class Player(name: String, stats: Stats, armor: Armor, weapon: Weapon, position: Position) extends Character
  case class Npc(name: String, stats: Stats, armor: Armor, weapon: Weapon, position: Position) extends Character

Damian Albrun
@insdami
Oct 01 16:04

case class GameWorld(players: List[Location])
  case class Location(player: Player, location: (Latitude, Longitude))

  case class Player(playerType: PlayerType, items: List[Item], stats: Stats)

  sealed abstract class PlayerType
  case object Human extends PlayerType
  case object NPC   extends PlayerType

  sealed abstract class Item {
    val value: Int
  }
  case class Sword(value: Int, damage: Int) extends Item
  case class HorsePet(value: Int, speed: Int) extends Item
  case class Stats(agility: Int, strength: Int, speed: Int, life: Int)

Ahmad Ragab
@ASRagab
Oct 01 16:04

  sealed trait Character{
    def hp: Long
    def health: Int
    def coin: Long
  }
  case class Player(hp: Long, health: Int, coin: Long) extends Character
  case class NonPlayable(hp: Long, health: Int, coin: Long = 0) extends Character

  sealed trait Item
  sealed trait Weapon extends Item
  case object Sword extends Weapon
  case object Axe extends Weapon

  sealed trait Armor extends Item
  case object Shield extends Armor
  case object Helmet extends Armor

  sealed trait MagicItem extends Item
  case object Potion extends MagicItem
  case object Spell extends MagicItem

  sealed trait GameMap

  case class GameWorld(characters: List[Character], items: List[Item], map: GameMap)

toxicafunk
@toxicafunk
Oct 01 16:04
@lukejknight you're 100% right, type safety is preferrable
Josip Grgurica
@josipgrgurica
Oct 01 16:06

 sealed abstract class MapElement
    case object Stone extends MapElement
    case object Water extends MapElement
    case object Grass extends MapElement

    case class Map(map: List[List[MapElement]])

    case class CharacterStats(stamina: Int, health: Int, attack: Int, defense: Int)

    sealed abstract class Player
    case class Human(name: String, stats: CharacterStats) extends Player
    case class Elf(name: String, stats: CharacterStats) extends Player
    case class Dwarf(name: String, stats: CharacterStats) extends Player

    sealed abstract class Monster
    case class Orc(name: String, stats: CharacterStats) extends Monster
    case class Witch(name: String, stats: CharacterStats) extends Monster


    sealed abstract class Item
    case object Sword extends Item
    case object Hammer extends Item

    case class GameWorld(map: Map, players: List[Player], monsters: List[Monster], items: List[Item])

neocastro
@neocastro
Oct 01 16:07
function.png
Alex
@Fruzenshtein
Oct 01 16:07
It should make 1 to 1 relation?
hardlianotion
@hardlianotion
Oct 01 16:08
It just can't be 1 - many
can be many - 1
Alex
@Fruzenshtein
Oct 01 16:09
https://en.wikipedia.org/wiki/Injective_function#/media/File:Injection.svg
Fabian Page
@fabianpage
Oct 01 16:10
no
Muhammad Farag
@MuhammadFarag
Oct 01 16:10
No
Dejan Mijić
@mijicd
Oct 01 16:10
nope
Muhammad Farag
@MuhammadFarag
Oct 01 16:12
If it returns a random value for Troll, I guess!
Ahmad Ragab
@ASRagab
Oct 01 16:14
@jdegoes is it right to suggest that if you had that strength function return Random.nextInt() or whatever, it wouldn't be a function?
Fabian Page
@fabianpage
Oct 01 16:18
My sound quality got very bad. Do you have the same problem?
Igal Tabachnik
@hmemcpy
Oct 01 16:18
Am I the only one who gets garbled sound?
Dmitry Ivanov
@diminou
Oct 01 16:18
Sound quality is deteriorating
Ahmad Ragab
@ASRagab
Oct 01 16:18
yup
Muhammad Farag
@MuhammadFarag
Oct 01 16:18
same here
Alex Salguero
@hasumedic
Oct 01 16:18
Same here
satya
@satya23k
Oct 01 16:18
@hmemcpy not just you
Igal Tabachnik
@hmemcpy
Oct 01 16:18
Better!
Dmitry Ivanov
@diminou
Oct 01 16:18
Much better.
Muhammad Farag
@MuhammadFarag
Oct 01 16:19
Maybe someone needs to mute?
Igal Tabachnik
@hmemcpy
Oct 01 16:19
Still a bit choppy
But ok
Damian Albrun
@insdami
Oct 01 16:27
@jdegoes is this considered a function? def f(x: Int): Int = Nothing. If so what about this? def f(x: Int): Int = new Exception("boom") (Just looking for arguments in an on going discussion :sweat_smile: )
satya
@satya23k
Oct 01 16:28
Exception has a side effect right?
Yuriy Susuk
@ysusuk
Oct 01 16:29
both are not computing the result and second has a side effect?
toxicafunk
@toxicafunk
Oct 01 16:29
you cannot compile the first I think
and yes, the second has side effect
Yuriy Susuk
@ysusuk
Oct 01 16:30
Nothing is everything as i understood
Damian Albrun
@insdami
Oct 01 16:30
Cool, thanks :thumbsup:
Yuriy Susuk
@ysusuk
Oct 01 16:30
so it should compile, or
toxicafunk
@toxicafunk
Oct 01 16:30
nothing is everything ... very deep
satya
@satya23k
Oct 01 16:30
def f(x: Int): Int = Nothing seems fine to me
Muhammad Farag
@MuhammadFarag
Oct 01 16:31
undefined at 0
toxicafunk
@toxicafunk
Oct 01 16:32

not found: value Nothing
[error]   def f(x: Int): Int = Nothing

Calvin Lee Fernandes
@calvinlfer
Oct 01 16:32
Nothing is a type not a value
so as @toxicafunk mentioned, you cannot write that
Yuriy Susuk
@ysusuk
Oct 01 16:32
because it’s empty =) it doesn’t have value
but there is way to bring it into context
Muhammad Farag
@MuhammadFarag
Oct 01 16:35
If Int set have had a value ∞ or NaN that would have been a function
Arbër Shabhasa
@ashabhasa
Oct 01 16:35
What about java checked exceptions do they make a function total?
Calvin Lee Fernandes
@calvinlfer
Oct 01 16:36
no, exceptions remove totality
Ahmad Ragab
@ASRagab
Oct 01 16:37
no unnecessary defensiveness
toxicafunk
@toxicafunk
Oct 01 16:42
code is predictable
Ahmad Ragab
@ASRagab
Oct 01 16:42
reasoning about performance
is easier
Damian Albrun
@insdami
Oct 01 16:43
I guess, you can have things like memoization
Ahmad Ragab
@ASRagab
Oct 01 16:43
Refactoring
Muhammad Farag
@MuhammadFarag
Oct 01 16:44
decrease cost of code naintenance, testing, etc.
toxicafunk
@toxicafunk
Oct 01 16:45
a null pointer in a println or log.debug
that's a classic, activate debug and boom! NPE
Muhammad Farag
@MuhammadFarag
Oct 01 16:52
not total
Ahmad Ragab
@ASRagab
Oct 01 16:53
NumberFormatException
Alex Salguero
@hasumedic
Oct 01 16:54

  def parseInt2(s: String): Option[Int] = Try(s.toInt).toOption

Damian Albrun
@insdami
Oct 01 16:54

  def parseInt2(s: String): Option[Int] = scala.util.Try(s.toInt).toOption

Ahmad Ragab
@ASRagab
Oct 01 16:54
def parseInt2(s: String): Try[Int] = Try(s.toInt)
Calvin Lee Fernandes
@calvinlfer
Oct 01 16:54

def parseInt2(s: String): Try[Int] = Try {
    s.toInt
  }

Muhammad Farag
@MuhammadFarag
Oct 01 16:54
side effect
Alex Salguero
@hasumedic
Oct 01 16:54
IndexOutOfBoundsException too
Muhammad Farag
@MuhammadFarag
Oct 01 16:56
mmm! does updated mutate or create copy?
Alex Salguero
@hasumedic
Oct 01 16:57
update is the one that returns Unit
Muhammad Farag
@MuhammadFarag
Oct 01 16:57
yes
Calvin Lee Fernandes
@calvinlfer
Oct 01 16:58

def arrayUpdate2[A](arr: Array[A], i: Int, f: A => A): Try[Array[A]] = Try {
    arr.updated(i, f(arr(i)))
  }

Muhammad Farag
@MuhammadFarag
Oct 01 16:59
totality, b might be 0
Alex Salguero
@hasumedic
Oct 01 17:00

def divide2(a: Int, b: Int): Try[Int] = Try(a / b)

sasiharan
@sasiharan
Oct 01 17:00
def divide2(a: Int, b: Int): Try[Int] = Try{ a / b }
Ahmad Ragab
@ASRagab
Oct 01 17:00

  def arrayUpdate2[A](arr: Array[A], i: Int, f: A => A): Either[String, Array[A]] =
    i match {
      case outOfBounds if outOfBounds < 0 || outOfBounds >= arr.length => Left("OutOfBounds")
      case okay => Right(arr.updated(okay, f(arr(okay))))
    }

sken
@floreslorca
Oct 01 17:01

def divide2(a: Int, b: Int): Either[String, Int] = if (b == 0) Left("divide by zero error") else Right(a/b)

Dmitry Ivanov
@diminou
Oct 01 17:01

  def divide2(a: Int, b: Int): Option[Int] = b match {
    case 0 => None
    case _ => Some(a / b)
  }

Muhammad Farag
@MuhammadFarag
Oct 01 17:01
Either, Option and Try… I know intuitively when to use each. But, is there more insights on making the decision?
Thiago Pereira
@iamthiago
Oct 01 17:03

def divide2(a: Int, b: Int): Option[Int] = Try(a / b).toOption

Muhammad Farag
@MuhammadFarag
Oct 01 17:06
not deterministic
Calvin Lee Fernandes
@calvinlfer
Oct 01 17:07

def freshId2(currentAvailableId: Int): (Int, Int) =
    (currentAvailableId, currentAvailableId + 1 /* next available id */)

Pavel Khamutou
@pkhamutou
Oct 01 17:07
def freshId3(id: Int): (Int, Int) = (id, id + 1)
Josip Grgurica
@josipgrgurica
Oct 01 17:07

def freshId2(id: Int): (Int, Int) =
    (id, id + 1)

Alex Salguero
@hasumedic
Oct 01 17:07

def freshId2(seedId: Int): (Int, Int) = (id, id+1)

Muhammad Farag
@MuhammadFarag
Oct 01 17:08
It depends on now thus non-deterministic
Calvin Lee Fernandes
@calvinlfer
Oct 01 17:08

def afterOneHour2(currentTime: LocalDateTime): LocalDateTime = currentTime.plusHours(1)

head of empty list = boomn
Thiago Pereira
@iamthiago
Oct 01 17:08
println
Muhammad Farag
@MuhammadFarag
Oct 01 17:08
sideeffect + exception
Pavel Khamutou
@pkhamutou
Oct 01 17:09

  def head2[A](as: List[A]): Option[A] = as match {
    case Nil => None
    case h :: xs => Some(h)
  }

Calvin Lee Fernandes
@calvinlfer
Oct 01 17:09

def head2[A](as: List[A]): Option[A] = as.headOption

sken
@floreslorca
Oct 01 17:09

def head2[A](as: List[A]): Option[A] = as.headOption

Muhammad Farag
@MuhammadFarag
Oct 01 17:09
def head2[A](as: List[A]): Option[A] = as.headOption
John A. De Goes
@jdegoes
Oct 01 17:10
http://www.lihaoyi.com/post/StrategicScalaStylePracticalTypeSafety.html
Igal Tabachnik
@hmemcpy
Oct 01 17:10
Hah, so happy the Scalazzi subset made an appearance :D
John A. De Goes
@jdegoes
Oct 01 17:11
https://github.com/scalaz/scalazzi
Calvin Lee Fernandes
@calvinlfer
Oct 01 17:12

def printLine(line: String): Unit = ()

Igal Tabachnik
@hmemcpy
Oct 01 17:12
def printLine(line: String): Unit = ()
Muhammad Farag
@MuhammadFarag
Oct 01 17:12
Nice :D
Josip Grgurica
@josipgrgurica
Oct 01 17:13
def printLine(line: String): Unit = ()
def readLine: String = “”
Muhammad Farag
@MuhammadFarag
Oct 01 17:13
def readLine: String = “”
Josip Grgurica
@josipgrgurica
Oct 01 17:14
def systemExit(code: Int): Unit = ()
Muhammad Farag
@MuhammadFarag
Oct 01 17:14

def systemExit(code: Int): Unit = ()

Calvin Lee Fernandes
@calvinlfer
Oct 01 17:17

  def printer2[A](println: String => A, combine: (A, A) => A): A = 
      combine(
        combine(println("Welcome to the help page!"), println("To list commands, type `commands`.")),
        combine(println("For help on a command, type `help <command>`"), println("To exit the help page, type `exit`.")),
      )

Dmitry Ivanov
@diminou
Oct 01 17:17
def printer2[A](println: String => A, combine: (A, A) => A): A = List("Welcome ...", "...").map(println).reduce(combine)
Calvin Lee Fernandes
@calvinlfer
Oct 01 17:20
image.png
Muhammad Farag
@MuhammadFarag
Oct 01 17:21
can reduce be considered as “functional” if we know that our domain can only have lists that have more than two elements?
Yuriy Susuk
@ysusuk
Oct 01 17:21
do we meet in an hour? =)
Muhammad Farag
@MuhammadFarag
Oct 01 17:22
or divide if we know it only can have positive integers
@ysusuk , I believe so
Yuriy Susuk
@ysusuk
Oct 01 17:22
cool =)
John A. De Goes
@jdegoes
Oct 01 17:23
@MuhammadFarag If you know your list always has two elements or more, then you should prove that to the compiler, too.
Ahmad Ragab
@ASRagab
Oct 01 17:24
@jdegoes sorry, you lost me a little on why reduce isn't a function, could you maybe just explain it once more.
John A. De Goes
@jdegoes
Oct 01 17:24
e.g. case class List2[A](first: A, second: A, remainder: List[A]) { def reduce(f: (A, A) => A): A = remainder.foldLeft(f(first, second))(f) }
Thomas Boeglin
@tboeglin
Oct 01 17:25
@jdegoes what will be covered after the lunch break ? It's getting late here but there are some things I don't want to miss
John A. De Goes
@jdegoes
Oct 01 17:26
@ASRagab List[Int]().reduce(_ + _)
Jens Hoffmann
@jchoffmann
Oct 01 17:26
@tboeglin higher kinded types, type classes
John A. De Goes
@jdegoes
Oct 01 17:26
^^^ If it's a function, then reduce must return an Int. What Int will it return?
Thomas Boeglin
@tboeglin
Oct 01 17:27
thanks @jchoffmann
Ahmad Ragab
@ASRagab
Oct 01 17:28
@jdegoes Got it! Thanks.
satya
@satya23k
Oct 01 17:33
Can I change the trait Draw as well or should I be working solely inside the function draw2?
hardlianotion
@hardlianotion
Oct 01 17:35
Going back to the arrayUpdate example, my solution is
def arrayUpdate2[A](arr: Array[A], i: Int, f: A => A): Try[Array[A]] = Try{arr.updated(i, f(arr(i)))}
but it has error
type mismatch; [error] found : scala.collection.mutable.ArraySeq[A] [error] required: Array[A] [error] Try{arr.updated(i, f(arr(i)))} [error] ^
Does anyone know what is going on
?
Phong Nguyen
@phongngtuan
Oct 01 17:42
@hardlianotion i think you'd want to use update instead of updated
hardlianotion
@hardlianotion
Oct 01 17:44
Thanks @phongngtuan, but according to Scala docs, update maps to Unit, whereas updated maps to Array and should be what I want
I don't want to map to Unit
Ahmad Ragab
@ASRagab
Oct 01 17:46

@hardlianotion I think what is happening is that updated is a method
on the SeqLike trait, not on array and so when the implicit
CanBuildFrom tries to recover the type, it doesn't "see" that the
original collection was was Array[A]

Phong Nguyen
@phongngtuan
Oct 01 17:46
@hardlianotion updated is defined on SeqLike which doesn't know about the mutability
hardlianotion
@hardlianotion
Oct 01 17:47
Thanks both. So how to convey this information?
toxicafunk
@toxicafunk
Oct 01 17:47
U want array
Look at your return type
Muhammad Farag
@MuhammadFarag
Oct 01 17:48
Thank you @jdegoes that makes a lot of sense :)
hardlianotion
@hardlianotion
Oct 01 17:50
@toxicafunk so I give up on my Array dream sigh
Thanks
Ahmad Ragab
@ASRagab
Oct 01 17:56
I think the second problem is that because A is a generic type, you can't just do .toArray you have to do something like this potentially:

 def arrayUpdate3[A: ClassTag](arr: Array[A], i: Int, f: A => A): Try[Array[A]] =
    Try {
      arr.updated(i, f(arr(i))).toArray 
    }

hardlianotion
@hardlianotion
Oct 01 18:05
@ASRagab @phongngtuan thanks both.
In the end, I had to do
def arrayUpdate2[A:ClassTag](arr: Array[A], i: Int, f: A => A): Try[Array[A]] = Try{ arr.updated(i, f(arr(i))).toArray
Calvin Lee Fernandes
@calvinlfer
Oct 01 18:08

here's an attempt at Exercise 12

case class Position(x: Int, y: Int)
  sealed trait Canvas
  case class DrawingCanvas private (currentPosition: Position, canvas: List[List[Boolean]]) extends Canvas
  case class RenderedCanvas private (canvas: List[List[Boolean]]) extends Canvas

  trait DrawF {
    def goLeft(d: DrawingCanvas): DrawingCanvas
    def goRight(d: DrawingCanvas): DrawingCanvas
    def goUp(d: DrawingCanvas): DrawingCanvas
    def goDown(d: DrawingCanvas): DrawingCanvas
    def draw(d: DrawingCanvas): DrawingCanvas
    def finish(d: DrawingCanvas): RenderedCanvas
  }

  def draw2(canvasSize: Int): (DrawF, DrawingCanvas) = {
    val drawF = new DrawF {
      private def adjustPosition(x: Int, y: Int, d: DrawingCanvas): DrawingCanvas = {
        val oldPosition = d.currentPosition
        val newX = oldPosition.x + x
        val newY = oldPosition.y + y
        val newPosition = oldPosition.copy(x = newX, y = newY)
        d.copy(currentPosition = newPosition)
      }

      override def goLeft(d: DrawingCanvas): DrawingCanvas = adjustPosition(x = -1, y = 0, d = d)

      override def goRight(d: DrawingCanvas): DrawingCanvas = adjustPosition(x = 1, y = 0, d = d)

      override def goUp(d: DrawingCanvas): DrawingCanvas = adjustPosition(x = 0, y = 1, d = d)

      override def goDown(d: DrawingCanvas): DrawingCanvas = adjustPosition(x = 0, y = -1, d = d)

      override def draw(d: DrawingCanvas): DrawingCanvas = {
        def wrap(x: Int): Int =
          if (x < 0) (canvasSize - 1) + ((x + 1) % canvasSize)
          else x % canvasSize

        val adjustedPosition: Position = Position(x = wrap(d.currentPosition.x), y = wrap(d.currentPosition.y))
        val Position(x, y) = adjustedPosition
        val updatedCanvas = d.canvas.updated(x, d.canvas(x).updated(y, true))
        d.copy(canvas = updatedCanvas)
      }

      override def finish(d: DrawingCanvas): RenderedCanvas =
        RenderedCanvas(d.canvas)
    }
    val drawingCanvas = DrawingCanvas(currentPosition = Position(x = 0, y = 0), List.fill(canvasSize, canvasSize)(false))
    (drawF, drawingCanvas)
  }

You could use it like this:

  val (api, canvas) = draw2(10)
  import api._
  val drawing: RenderedCanvas =
    (goLeft _ andThen goUp andThen draw andThen goDown andThen goRight andThen finish)(canvas)

Jens Hoffmann
@jchoffmann
Oct 01 18:16
@hardlianotion @ASRagab however it's not Scalazzi-compliant (tm) :)
sken
@floreslorca
Oct 01 18:20
is it streaming right now?
Phong Nguyen
@phongngtuan
Oct 01 18:20
@calvinlfer here's my take, wondering if it's better to extract to an trait if I have only 1 implementation

  case class Draww(x: Int, y: Int, size: Int, canvas: Array[Array[Boolean]]) {
    def goLeft = Draww(x - 1, y, size, canvas.clone)
    def goRight = Draww(x + 1, y, size, canvas.clone)
    def goUp = Draww(x, y + 1, size, canvas.clone)
    def goDown = Draww(x, y - 1, size, canvas.clone)
    def draw = {
      def wrap(x: Int): Int =
        if (x < 0) (size - 1) + ((x + 1) % size) else x % size
      val x2 = wrap(x)
      val y2 = wrap(y)
      val updatedCanvas = canvas.clone.updated(x2, canvas(x2).updated(y2, true))
      Draww(x2, y2, size, updatedCanvas)
    }
  }

  def draw2(size: Int): Draww =
    Draww(0, 0, size, Array.fill(size, size)(false))

sken
@floreslorca
Oct 01 18:20
or still in coffee break?
Ahmad Ragab
@ASRagab
Oct 01 18:20
still in break I think
Calvin Lee Fernandes
@calvinlfer
Oct 01 18:21
@phongngtuan nice :D, very succinct
sken
@floreslorca
Oct 01 18:22
is this mulitple days
or just one?
Calvin Lee Fernandes
@calvinlfer
Oct 01 18:22
multiple :)
Thiago Pereira
@iamthiago
Oct 01 18:29
If I’m not wrong, multiple for those who joined the full program… one day for those who intent to help the scalaz
Calvin Lee Fernandes
@calvinlfer
Oct 01 18:32

def fanout[A, B, C](f: A => B, g: A => C): A => (B, C) = a => (f(a), g(a))

Oleksandra Holubitska
@Vilkina
Oct 01 18:34
I’m
Pavel Khamutou
@pkhamutou
Oct 01 18:38

  def cross[A, B, C, D](f: A => B, g: C => D): (A, C) => (B, D) = (a, c) => (f(a), g(c))

Muhammad Farag
@MuhammadFarag
Oct 01 18:38

def cross[A, B, C, D](f: A => B, g: C => D): (A, C) => (B, D) = (a, c) => (f(a), g(c))

Pavel Khamutou
@pkhamutou
Oct 01 18:39

  def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B = _.fold(f, g)

Thiago Pereira
@iamthiago
Oct 01 18:39

def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B = {
    case Left(a) => f(a)
    case Right(c) => g(c)
  }

Ahmad Ragab
@ASRagab
Oct 01 18:39

def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B = e => e.fold(a => f(a), a => g(a))

hardlianotion
@hardlianotion
Oct 01 18:39
This gives me a warning
about type erasure
Thiago Pereira
@iamthiago
Oct 01 18:39

def choice[A, B, C, D](f: A => B, g: C => D): Either[A, C] => Either[B, D] = {
    case Left(a) => Left(f(a))
    case Right(c) => Right(g(c))
  }

Ahmad Ragab
@ASRagab
Oct 01 18:39

def choice[A, B, C, D](f: A => B, g: C => D): Either[A, C] => Either[B, D] = e => e.fold(a => Left(f(a)), c => Right(g(c)))

Pavel Khamutou
@pkhamutou
Oct 01 18:39

  def choice[A, B, C, D](f: A => B, g: C => D): Either[A, C] => Either[B, D] = _.right.map(g).left.map(f)

:D
Calvin Lee Fernandes
@calvinlfer
Oct 01 18:40

  def compose[A, B, C](f: B => C, g: A => B): A => C =
    a => f(g(a))

Pavel Khamutou
@pkhamutou
Oct 01 18:40

  def compose[A, B, C](f: B => C, g: A => B): A => C = g.andThen(f)

Phong Nguyen
@phongngtuan
Oct 01 18:46
Either[E1, (String, A)]
Igal Tabachnik
@hmemcpy
Oct 01 18:48
No, they are different types
Should be E2
(aside: doesn't the inner input parameter shadows the outer?)
Phong Nguyen
@phongngtuan
Oct 01 18:50
Left(e2)?
toxicafunk
@toxicafunk
Oct 01 18:54
a thing of beauty :)
Calvin Lee Fernandes
@calvinlfer
Oct 01 19:01
someone put annotations by mistake, can anyone clear them?
view options -> annotate -> clear
Yuriy Susuk
@ysusuk
Oct 01 19:04

  object snd {
     def apply(fst: Int, snd: String) = snd
   }

Calvin Lee Fernandes
@calvinlfer
Oct 01 19:04
thanks :D
Igal Tabachnik
@hmemcpy
Oct 01 19:05
hard mode: implement identity with a pencil
Ahmad Ragab
@ASRagab
Oct 01 19:06
did he disappear?
sken
@floreslorca
Oct 01 19:06
no audio?
Calvin Lee Fernandes
@calvinlfer
Oct 01 19:06
nothing :(
Thiago Pereira
@iamthiago
Oct 01 19:07
it’s a break?
Alex
@Fruzenshtein
Oct 01 19:07
yep
Igal Tabachnik
@hmemcpy
Oct 01 19:07
john has left the game
sken
@floreslorca
Oct 01 19:07
@jdegoes
yep
Alex
@Fruzenshtein
Oct 01 19:07
John has won the game :D
Muhammad Farag
@MuhammadFarag
Oct 01 19:07
:joy:
Calvin Lee Fernandes
@calvinlfer
Oct 01 19:07
he used the ultimate card
Ahmad Ragab
@ASRagab
Oct 01 19:07
@jdegoes => Unit
Muhammad Farag
@MuhammadFarag
Oct 01 19:07
yes, you are back
Alex Salguero
@hasumedic
Oct 01 19:07
:thumbsup:
Yuriy Susuk
@ysusuk
Oct 01 19:10
@ASRagab well played =)
Pavel Khamutou
@pkhamutou
Oct 01 19:17

  object snd {
    def apply[A, B](a: A, b: B): B = b
  }

Arbër Shabhasa
@ashabhasa
Oct 01 19:17

  object snd {
    def apply[A, B](a:A, b:B): B = b
  }

Pavel Khamutou
@pkhamutou
Oct 01 19:17

  object repeat {
    def apply[A](cnt: Int)(init: A, f: A => A): A =
      if (cnt <= 0) init else apply(cnt - 1)(f(init), f)
  }

Damian Albrun
@insdami
Oct 01 19:17

object repeat {
    def apply[A](times: Int)(seed: A, f: A => A): A =
      if(times == 0) seed
      else repeat(times - 1)(f(seed), f)
  }

Pavel Khamutou
@pkhamutou
Oct 01 19:17
2
hardlianotion
@hardlianotion
Oct 01 19:17
2
2
Muhammad Farag
@MuhammadFarag
Oct 01 19:23

 def groupBy1(
    l: List[String],
    by: String => String)(
      reducer: (String, List[String]) => String):
      Map[String, String] = Map(by(l) -> reducer(by(l), l))

Phong Nguyen
@phongngtuan
Oct 01 19:24

  def groupBy1(
    l: List[String],
    by: String => String)(
      reducer: (String, List[String]) => String):
      Map[String, String] = {
        l.groupBy(by).map { case (k, v) =>
          (k, reducer(k, v))
        }
      }

Ahmad Ragab
@ASRagab
Oct 01 19:29

 def groupBy1(
    l: List[String],
    by: String => String)(
      reducer: (String, List[String]) => String):
      Map[String, String] = l.map(s => (by(s), reducer(s))).toMap

sken
@floreslorca
Oct 01 19:32

def apply[A, B, C](l: List[A], by: A => B)(reducer: (B, List[A]) => C): Map[B, C] = 
      l.groupBy(by).map(kv => (kv._1, reducer(kv)))

Dmitry Ivanov
@diminou
Oct 01 19:33

  object groupBy2 {
    def apply[A, B, C](
      l: List[A],
      by: A => B)(
        reducer: (B, List[A]) => C): Map[B, C] =
          l.groupBy(by).map { case (k, v) => (k, reducer(k, v)) }.toMap
  }

Pavel Khamutou
@pkhamutou
Oct 01 19:35

  object groupBy2 {
    def apply[A, B, C](xs: List[A], by: A => B)(reducer: (B, List[A]) => C): Map[B, C] = {
      xs.groupBy(by)
        .map {
          case (b, as) => (b, reducer(b, as))
        }
    }
  }

Damian Albrun
@insdami
Oct 01 19:36

object groupBy2 {
    def apply[A, B, C](
    l: List[A],
    by: A => B)(
      reducer: (B, List[A]) => C): Map[B, C] = l.groupBy(by).map{ case(k, v) => k -> reducer(k, v) }
  }

sken
@floreslorca
Oct 01 19:36
to make it more generic i.e F[A] you would require an implicit or a type constraint to indicate is 'groupable' isnt?
Dmitry Ivanov
@diminou
Oct 01 19:38
@floreslorca to avoid committing to List?
sken
@floreslorca
Oct 01 19:38
yes
so you have a signature like

apply[A,B,C,F[_], G[_]](l: F[A], by: A => B, r: (B, F[A]) => C)(implicit f: Groupable[F], m: Mappable[G]): G[B, C]

because you cant really od anything with just an F
Ahmad Ragab
@ASRagab
Oct 01 19:44

do you have to use groupby?

  object groupBy2 {
    def apply[A, B, C](l: List[A], by: A => B)(reducer: (B, List[A]) => C): Map[B, C] = {
      l.map(s => (by(s), reducer(by(s), l))).toMap
    }
  }
}

This works for me
Not saying the implementation is optimal
sken
@floreslorca
Oct 01 19:45
toMap <uses> groupBy
Ahmad Ragab
@ASRagab
Oct 01 19:45
@floreslorca thanks!
Phong Nguyen
@phongngtuan
Oct 01 19:45
toMap will just take the last appearance of key
Daniel Reverri
@dreverri
Oct 01 19:46
doesn’t that group all elements of l into every key?
Alex Salguero
@hasumedic
Oct 01 19:47
Interesting @floreslorca. Wouldn’t it have to be a G[_, _] though?
sken
@floreslorca
Oct 01 19:52
true :)
Ahmad Ragab
@ASRagab
Oct 01 19:52
yup
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:01
Tree[Int] = { Leaf(1), ... } would be valid though right?
Arbër Shabhasa
@ashabhasa
Oct 01 20:13
*
Muhammad Farag
@MuhammadFarag
Oct 01 20:13
*
Alex
@Fruzenshtein
Oct 01 20:13
*
Muhammad Farag
@MuhammadFarag
Oct 01 20:13
*
Alex
@Fruzenshtein
Oct 01 20:13
*
Muhammad Farag
@MuhammadFarag
Oct 01 20:13
*
Alex
@Fruzenshtein
Oct 01 20:13
* => *
Alex Salguero
@hasumedic
Oct 01 20:13
* => *
Muhammad Farag
@MuhammadFarag
Oct 01 20:13

    => *

*=>*
Arbër Shabhasa
@ashabhasa
Oct 01 20:14
(, ) => *
Muhammad Farag
@MuhammadFarag
Oct 01 20:14
*, *=>*
sken
@floreslorca
Oct 01 20:15
( , ) => *
gitter is not cooperating lmao
toxicafunk
@toxicafunk
Oct 01 20:15
* => * => *
John A. De Goes
@jdegoes
Oct 01 20:15
[*, *] => *
`
GrafBlutwurst
@GrafBlutwurst
Oct 01 20:17
wouldn't Map = {...} be the set of functions from (Set x Set) -> Set
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:17
[*, *] => *
sken
@floreslorca
Oct 01 20:17
is there a way to say [Int, *] -> * in scala?
Alex
@Fruzenshtein
Oct 01 20:18
[*,*] => *
Damian Albrun
@insdami
Oct 01 20:18
[*, *] => *
sken
@floreslorca
Oct 01 20:18
yep
toxicafunk
@toxicafunk
Oct 01 20:19
that would still be [*, *] => * @floreslorca
sken
@floreslorca
Oct 01 20:19
(y)
Muhammad Farag
@MuhammadFarag
Oct 01 20:20
[*, *, *] => *
Tuple3
Igal Tabachnik
@hmemcpy
Oct 01 20:23
CanBuildFrom? :D
Jens Hoffmann
@jchoffmann
Oct 01 20:23
hehe
toxicafunk
@toxicafunk
Oct 01 20:26
F[_]
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:26
type Answer1 = => [Option]
type Answer2 = `[*, *] => *`[Either]
Alex Salguero
@hasumedic
Oct 01 20:26

 type Answer2 = `* => *`[Map]

Alex
@Fruzenshtein
Oct 01 20:26

type Answer2 = `[*, *] => *`[Map]

Dmitry Ivanov
@diminou
Oct 01 20:26
Function1
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:26
type Answer3 = `(* => *) => *`[Monad]
toxicafunk
@toxicafunk
Oct 01 20:27
Function2
sasiharan
@sasiharan
Oct 01 20:27
type Answer3 = Option[List]
Pavel Khamutou
@pkhamutou
Oct 01 20:27
NewType[[]]
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:28

  type NewType1[_[_]]
  type Answer3 = `(* => *) => *`[NewType1]

just leave it right?
Alex
@Fruzenshtein
Oct 01 20:29
trait Answer4[A]
Jens Hoffmann
@jchoffmann
Oct 01 20:29
it is already a type, so nothing
Alex
@Fruzenshtein
Oct 01 20:30
hell
sken
@floreslorca
Oct 01 20:31
trait Answer6[A[_], B[_, _]] ??
Muhammad Farag
@MuhammadFarag
Oct 01 20:31
trait Answer6[A[_], B[_[_]]]
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:32
trait Answer6[A[_], B[C[_]]]
Pavel Khamutou
@pkhamutou
Oct 01 20:32
trait Answe6[F[_], F[_[_]]]
Muhammad Farag
@MuhammadFarag
Oct 01 20:32
2
no
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:37

val ListCollectionLike: CollectionLike[List] = new CollectionLike[List] {
    override def empty[A]: List[A] = List.empty[A]

    override def cons[A](a: A, as: List[A]): List[A] = a :: as

    override def uncons[A](as: List[A]): Option[(A, List[A])] = as match {
      case Nil => None
      case head :: tail => Option((head, tail))
    }
  }

Muhammad Farag
@MuhammadFarag
Oct 01 20:39

val ListSized: Sized[List] = new Sized[List] {
    override def size[A](fa: List[A]): Int = fa.length
  }

sken
@floreslorca
Oct 01 20:43
is this what -Ypartial-unification is for?
wont work
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:44
the function signature for map wont align
Pavel Khamutou
@pkhamutou
Oct 01 20:48
or use type lambdas :)
GrafBlutwurst
@GrafBlutwurst
Oct 01 20:50
couldn't you use _ existentially rather than String for the key? is this going to be dropped if _ becomes ? ?



trait Sized[F[_]] {
  def size[A](fa:F[A]):Int
}

type SomeMap[V] = Map[_, V]

val instance: Sized[SomeMap] = new Sized[SomeMap] {
  override def size[A](fa:SomeMap[A]) = fa.size
}

this i meant
sken
@floreslorca
Oct 01 20:50
whats the difference between existenital and unviersal?
toxicafunk
@toxicafunk
Oct 01 20:50
x exists vs forall x
sken
@floreslorca
Oct 01 20:53
(y)
GrafBlutwurst
@GrafBlutwurst
Oct 01 20:53
:+1:
toxicafunk
@toxicafunk
Oct 01 20:53
there exists an S vs forall A
sken
@floreslorca
Oct 01 20:54

  val MapSized1: Sized[Map[String, ?]] = new Sized[Map[String, ?]] {
    def size[A](fa: Map[String, A]): Int = fa.size
  }

Muhammad Farag
@MuhammadFarag
Oct 01 20:54

def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
    override def size[A](fa: Map[K, A]): Int = fa.size
  }

Alex
@Fruzenshtein
Oct 01 20:57
3
Pavel Khamutou
@pkhamutou
Oct 01 20:57
3
Calvin Lee Fernandes
@calvinlfer
Oct 01 20:57
3
1

  def Tuple3Sized[X, Y]: Sized[(X, Y, ?)] = {
    type Tuple3XY[C] = (X, Y, C)
    new Sized[Tuple3XY] {
      override def size[A](fa: (X, Y, A)): Int = 3
    }
  }

isn't it always 3?
GrafBlutwurst
@GrafBlutwurst
Oct 01 20:58
I gotta bolt (timezones) o/ enjoy the rest of the course everyone
Jens Hoffmann
@jchoffmann
Oct 01 20:58
bye @GrafBlutwurst
sken
@floreslorca
Oct 01 20:58
is always 3?
Ahmad Ragab
@ASRagab
Oct 01 20:58
productArity
?
Arbër Shabhasa
@ashabhasa
Oct 01 21:00
def Tuple3Sized[A, B]: Sized[Tuple3[A, B, ?]] = new Sized[Tuple3[A, B, ?]] {
override def sizeC): Int = 1
}
sken
@floreslorca
Oct 01 21:00
1
Pierangelo Cecchetto
@pierangeloc
Oct 01 21:00
1
Muhammad Farag
@MuhammadFarag
Oct 01 21:00

def Tuple3Sized[A, B]: Sized[Tuple3[A, B, ?]] = new Sized[(A, B, ?)] {
    override def size[C](fa: (A, B, C)): Int = 1
  }

Jens Hoffmann
@jchoffmann
Oct 01 21:00
1
sken
@floreslorca
Oct 01 21:00
thats a gotcha question ;)
Muhammad Farag
@MuhammadFarag
Oct 01 21:15
We can’t compare A
Arbër Shabhasa
@ashabhasa
Oct 01 21:18
@jdegoes does this mean that the A in sortAll is not a universal type?
toxicafunk
@toxicafunk
Oct 01 21:19
a constrained universal perhaps?
deff
toxicafunk
@toxicafunk
Oct 01 21:31
are there any cost in performance or heap btw the different ways to pass the implicit?
Thiago Pereira
@iamthiago
Oct 01 21:32
@toxicafunk compiler time I think
toxicafunk
@toxicafunk
Oct 01 21:32
compiler time doesn't worry me much hehe
Alex Salguero
@hasumedic
Oct 01 21:41
What’s the best way to ensure that laws are satisfied? Property based tests?
James Warren
@jameswarren
Oct 01 21:43
mind restating the two rules? my connection flaked out for the past couple minutes
:+1:
thx!
toxicafunk
@toxicafunk
Oct 01 21:48
can type classes also be abstract classes or only traits?
Phong Nguyen
@phongngtuan
Oct 01 21:48
is there any typeclass with more than 1 type parameter, or no type parameters?
toxicafunk
@toxicafunk
Oct 01 21:49
with more, sure
Muhammad Farag
@MuhammadFarag
Oct 01 21:49
Is it possible to copy in this code into the chat?
John A. De Goes
@jdegoes
Oct 01 21:50

object example {
  /**
   * Every type class is a set of three things:
   *
   *   - Types
   *   - Operations on values of those types
   *   - Laws governing the behavior of the operations
   *
   * Every type class instance (or instance, for short) is an implementation
   * of the type class for a set of given types.
   */
  abstract class LessThan[A] {
    // `lessThan` must satisfy transitivity law
    // `lessThan(a, b) && lessThan(b, c) ==> lessThan(a, c)`
    def lessThan(left: A, right: A): Boolean

    final def notLessThan(left: A, right: A): Boolean =
      !lessThan(left, right)
  }
  object LessThan {
    def apply[A](implicit A: LessThan[A]): LessThan[A] = A

    implicit val LessThanInt: LessThan[Int] = new LessThan[Int] {
      def lessThan(left: Int, right: Int): Boolean = left < right
    }
  }
  implicit class LessThanSyntax[A](val l: A) extends AnyVal {
    def < (r: A)(implicit A: LessThan[A]): Boolean =
      A.lessThan(l, r)

    def >= (r: A)(implicit A: LessThan[A]): Boolean =
      A.notLessThan(l, r)
  }
  case class Person(name: String, age: Int)
  object Person {
    implicit val PersonLessThan = new LessThan[Person] {
      def lessThan(left: Person, right: Person): Boolean =
        if (left.name < right.name) true
        else if (left.age < right.age) true
        else false
    }
  }

  def sortAll[A: LessThan](l: List[A]): List[A] = l match {
    case Nil => Nil
    case x :: xs =>
      val (lessThan, notLessThan) = xs.partition(_ < x)

      sortAll(lessThan) ++ List(x) ++ sortAll(notLessThan)
  }

  sortAll(1 :: 3 :: -1 :: 10 :: 45 :: 7 :: 2 :: Nil)
}

Muhammad Farag
@MuhammadFarag
Oct 01 21:50
Thanks :+1:
James Warren
@jameswarren
Oct 01 21:51
is it acceptable or poor form to have more than one instance of a type class for a data type? (i.e. a poor man's dependency injection?)
makes sense - thanks!
toxicafunk
@toxicafunk
Oct 01 21:55
what about type DescendingPerson[A] = Person[A]
Muhammad Farag
@MuhammadFarag
Oct 01 22:00
If we don’t control the type?
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:00
oops
:wink:
Muhammad Farag
@MuhammadFarag
Oct 01 22:01
Meetings… Noooo!
Alex Salguero
@hasumedic
Oct 01 22:01
:laughing:
Arbër Shabhasa
@ashabhasa
Oct 01 22:02
object algebras
Ahmad Ragab
@ASRagab
Oct 01 22:04
I've read that context bounds have been deprecated, though this looks very clean?
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:05
i believe that was view bounds

  def sort2[A: Ord](l: List[A]): List[A] = l match {
    case Nil => Nil
    case x :: xs =>
      // OrdSyntax gives your A's the ability to do <, >, etc.
      val (lessThanX, greaterThanX) = xs.partition(_ < x)
      sort2(lessThanX) ++ List(x) ++ sort2(greaterThanX)
  }

Alex Salguero
@hasumedic
Oct 01 22:05

def sort2[A: Ord](l: List[A]): List[A] = l match {
    case Nil => Nil
    case x :: xs =>
      val (lessThan, moreThan) = xs.partition(_ < x)
      sort2(lessThan) ++ List(x) ++ sort2(moreThan)
  }

Calvin Lee Fernandes
@calvinlfer
Oct 01 22:06
can you go over that scalaz 8 encoding?
:pray:
Igal Tabachnik
@hmemcpy
Oct 01 22:09
is this Scato encoding, or is it something else?
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:10
are there any links for further reading for v3?
ahh darn
sken
@floreslorca
Oct 01 22:10
whats the name of it?
ah scato encoding
nvm
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:11
https://www.slideshare.net/jdegoes/scalaz-8-a-whole-new-game
Dmitry Ivanov
@diminou
Oct 01 22:12
I ought to go (timezones). Thanks a lot for the workshop!
Damian Albrun
@insdami
Oct 01 22:14

implicit val OrdString: Ord[String] = new Ord[String] {
      def compare(l: String, r: String): Ordering =
        if (l < r) LT else if (l > r) GT else EQUAL
  }

Calvin Lee Fernandes
@calvinlfer
Oct 01 22:14

  implicit val OrdString: Ord[String] = new Ord[String] {
    override def compare(l: String, r: String): Ordering = 
      l.compareTo(r) match {
        case x < 0 => LT
        case x == 0 => EQUAL
        case _ => GT
      }
  }

Jens Hoffmann
@jchoffmann
Oct 01 22:14
same implementation as Ord[Int]
hardlianotion
@hardlianotion
Oct 01 22:15
I have to go as well. thanks a lot
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:16

  implicit val SemigroupInt: Semigroup[Int] = instanceOf {
    new SemigroupClass[Int] {
      override def append(l: => Int, r: => Int): Int = l + r
    }
  }

  implicit def SemigroupMap[K, V: Semigroup]: Semigroup[Map[K, V]] = instanceOf {
    new SemigroupClass[Map[K, V]] {
      override def append(l: => Map[K, V], r: => Map[K, V]): Map[K, V] = l ++ r
    }
  }

Would that work?
Pavel Khamutou
@pkhamutou
Oct 01 22:18
is it a convention to name implicit vals starting with capital latter?
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:18
ah darn, it discards - i get it
Pierangelo Cecchetto
@pierangeloc
Oct 01 22:19
types
Damian Albrun
@insdami
Oct 01 22:19
laws
Pierangelo Cecchetto
@pierangeloc
Oct 01 22:19
operations on types
Ahmad Ragab
@ASRagab
Oct 01 22:19
operations
toxicafunk
@toxicafunk
Oct 01 22:19
types, operation on types and laws
Ahmad Ragab
@ASRagab
Oct 01 22:19
laws
Alex Salguero
@hasumedic
Oct 01 22:19
Laws
Ahmad Ragab
@ASRagab
Oct 01 22:20

  implicit def SemigroupSet[A]: Semigroup[Set[A]] = instanceOf(new SemigroupClass[Set[A]] {
    override def append(l: => Set[A], r: => Set[A]): Set[A] = l.union(r)
  })

Igal Tabachnik
@hmemcpy
Oct 01 22:20
Are typeclasses "algebras"? What makes a capability into an algebra?
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:21

  implicit def SemigroupMap[K, V: Semigroup]: Semigroup[Map[K, V]] = instanceOf {
    new SemigroupClass[Map[K, V]] {
      override def append(l: => Map[K, V], r: => Map[K, V]): Map[K, V] =
        l.foldLeft(r) { case (acc, (key, value)) => 
            acc.get(key) match {
              case None => acc + (key -> value)
              case Some(kValue) => 
                val newValue = kValue <> value
                acc + (key -> newValue)
            }
        }
    }
  }

This shouldn't discard values anymore
Igal Tabachnik
@hmemcpy
Oct 01 22:21
Thanks :)
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:21
yay
Damian Albrun
@insdami
Oct 01 22:22
companion object of the type class
Alex Salguero
@hasumedic
Oct 01 22:22
companion type class
toxicafunk
@toxicafunk
Oct 01 22:22
companion object of my type class
Damian Albrun
@insdami
Oct 01 22:22
companion object of the data type
toxicafunk
@toxicafunk
Oct 01 22:22
companion object of data type
Igal Tabachnik
@hmemcpy
Oct 01 22:22
context bounds
implicit class
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:23
object syntax
Muhammad Farag
@MuhammadFarag
Oct 01 22:25
Go is likely to bring generics in v2.0
but still!
toxicafunk
@toxicafunk
Oct 01 22:25
as an afterthought...
Igal Tabachnik
@hmemcpy
Oct 01 22:26
Is there a name for the apply[F[_]](implicit F: ...) = F trick?
isn't this called "type tetris?" :)
Thanks very much, John!
toxicafunk
@toxicafunk
Oct 01 22:27
thanks a lot! learned a lot
Calvin Lee Fernandes
@calvinlfer
Oct 01 22:27
Thanks a lot John! this was amazing :smiley:
Arbër Shabhasa
@ashabhasa
Oct 01 22:27
Thank you John
toxicafunk
@toxicafunk
Oct 01 22:27
and solidified things I.. kinda knew
sasiharan
@sasiharan
Oct 01 22:27
Thanks John for the training.
Pierangelo Cecchetto
@pierangeloc
Oct 01 22:27
Thanks a lot, it was super!
Damian Albrun
@insdami
Oct 01 22:27
Thanks John, it was very helpful
Jens Hoffmann
@jchoffmann
Oct 01 22:27
thanks!
Alex Salguero
@hasumedic
Oct 01 22:27
Brain hurts. Thank you John!
Thiago Pereira
@iamthiago
Oct 01 22:27
thanks john!
Devesh Shetty
@devesh-shetty
Oct 01 22:27
Thnaks John!
Muhammad Farag
@MuhammadFarag
Oct 01 22:27
Thanks @jdegoes this is great :)
:thumbsup:
Sander Markies
@Doedels
Oct 01 22:28
Thanks and good evening
toxicafunk
@toxicafunk
Oct 01 22:28
good evening yall
Ahmad Ragab
@ASRagab
Oct 01 23:58
This question is less about FP and more general. What does it mean actually to add two Instants?
or more specifically append two instants
_

John A. De Goes/functional-scala

Calvin Lee Fernandes
@calvinlfer
Oct 02 03:35
earlier I was asking about how the Scalaz 8 encoding for typeclasses is done and @jdegoes mentioned Scato, Adelbert Chang wrote a paper and explains it quite well: https://adelbertc.github.io/publications/typeclasses-scala17.pdf (Section 4.1)
Álvaro Castellanos López
@AlvaroCaste
Oct 02 06:14
Hi! When will next training be if any?
Linh Nguyen
@tuleism
Oct 02 06:52
@AlvaroCaste https://twitter.com/lambda_conf/status/1042833112646987778
@jdegoes do we have recordings for these 5 days? I'm in UTC+8 :(
Álvaro Castellanos López
@AlvaroCaste
Oct 02 08:17
@tuleism thanks!
Pawel
@odwrotnie
Oct 02 11:47
Is there any screencast available? - I had an issue with my children :(...
Pawel
@odwrotnie
Oct 02 12:22
Maybe there is an article I could read?
toxicafunk
@toxicafunk
Oct 02 12:24
about what?
i.e. when did u leave?
Pawel
@odwrotnie
Oct 02 12:27
We were modeling the PaymentMethod and CreditCard...
John A. De Goes
@jdegoes
Oct 02 12:29
There are no recordings for these, they are only done live. If you're part of the Scalaz crew and couldn't attend all of Functional Essentials, you can attend a future one.
Pawel
@odwrotnie
Oct 02 12:31
OK :(
Alex
@Fruzenshtein
Oct 02 12:32
@odwrotnie regarding the PaymentMethod and CreditCard you can scroll up the gitter chat and find there some samples of these data types
toxicafunk
@toxicafunk
Oct 02 12:32

    Three properties of functions:
    1. Totality. For every single element in the domain, the function returns an element
       in the codomain.
    2. Determinism. If f(a) == b at onme time, then f(a) == b at all times.times
    3. No Side Effects. The *only* effect that applying a function has, is computing its return value.

for functions
Pawel
@odwrotnie
Oct 02 12:32
Are you able to send me some links I could read about the topics you mentioned?
toxicafunk
@toxicafunk
Oct 02 12:32
look at the motivating example for typeclasses up obejct exampl with LessThan
and work through the excercises
Muhammad Farag
@MuhammadFarag
Oct 02 12:34

These are my notes from yesterday, I hope they help:
There are three types of type composition:

    Sum composition
    Product composition
    ADT Algebraic data types (sum and product composition)

Product composition:

A: {a1, a2}
B: {b1}
A B = { {a1, b1}, {a2, b1}}
Cartesian product of the two sets.
|A| = 2
|B| = 1
|A B| = 2 1 = 3
A B * C // three way product composition. Need three values to find a unique point in that space
A is an Axis, and B is an axis and then the product is the points on the graph (a, b)
In Scala:

    Tuples
    case Classes
    Other notes
    Unit = {()}
    |Unit| = 1
    We sometimes use 1 to represent Unit
    A 1 ~= A (contains no more information than A) we can move from one side to the other
    Nothing = {}
    |Nothing| = 0
    A 0 ~= 0

Sum composition:

A: {a1, a2}
B: {b1}
A + B = {Left_a1, Left_a2, Right_b1} // It keeps track of where they come from
|A + B| = |A| + |B| = 3
A + A = {Left_a1, Left_a2, Right_a1, Right_a2}
|A + A| = 4
Two ways:

    Either
    Sealed Trait
    sum requires a finite number of terms (vs number of values which is ok to be infinite)

Notes:

    Using string to represent email/URL, etc. is not correct since it will have a lot of invalid values
    We need to tell the compiler what is valid and not valid, and in that case our code becomes a proof.

Morphisms (functions)

    Functions map things from a domain to a co-domain. Sqr() function domain could be int, but the result set is square numbers only.

Functions have three properties:

    Totality
    Determinism
    No Side Effects

More on functions

    Higher order functions: Functions that takes a function as one of its parameters
    Functional combinator: Functions that only takes functions as its parameters

Mono-morphic functions drawbacks:

    Not easy to reuse (copy/paste)
    Many cards to win the game (lots of things can go wrong). This means you have to pay attention, and paying attention is not reliable, we need the compiler to provide the proof.

Polymorphic functions:

    Scala doesn't have polymorphic functions and thus we fake them using traits/objects or using functions instead

Type Constructor

    Tree[A] is not a type, it is a type constructor
        F(when given one type) => Another Type
        F(A) => Tree[A]. That is a [*] => * (star to start) kind
        Either is [*, *] => *
        * = {x: x is a type in the scala type system}
    Partial type application
        To Turn [*, *] => * to [*] => * We use ? (which requires type projector compiler plugin)
        type newType[A] = Map[Int, A]
        trait Foo[A[_, _, _], B, C[_,_]]

Type Classes: Enough but not too much

    Monomorphic functions know too much
    Polymorphic functions throw away too much (no more knowledge of comparability for an example)
    Type classes provide a way to regain structure but as little as possible
    Passing in a function is an ad-hock alternative

Existential vs. Universal types

def foo[A] // Universal type

type Foo{
    type S // existential type
}

Notes:

In Scala, types and values don't exist in the same universe
Alex
@Fruzenshtein
Oct 02 12:35
Here is a useful article about functions: https://www.linkedin.com/pulse/know-scala-great-now-learn-functional-programming-john-de-goes
I'd say this is a brief text version of yesterday section about functions
toxicafunk
@toxicafunk
Oct 02 12:36
and don't forget John's own notes: https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc
@MuhammadFarag nice notes!
Muhammad Farag
@MuhammadFarag
Oct 02 12:37
@toxicafunk , thanks… I hope it helps!
Alex
@Fruzenshtein
Oct 02 12:37
At what time do we start today?
Muhammad Farag
@MuhammadFarag
Oct 02 12:37
In 23 minutes, I believe
Alex
@Fruzenshtein
Oct 02 12:38
21 :D
toxicafunk
@toxicafunk
Oct 02 12:39
no no, at 15
Pawel
@odwrotnie
Oct 02 12:39
@MuhammadFarag thanks!
@Fruzenshtein thank you!
Alex
@Fruzenshtein
Oct 02 12:39
No problem
Muhammad Farag
@MuhammadFarag
Oct 02 12:41
You’re very welcome :)
Calvin Lee Fernandes
@calvinlfer
Oct 02 12:58
@MuhammadFarag you should put that in a gist on Github :)
Yuriy Susuk
@ysusuk
Oct 02 13:00
guys, how about today?
i missed last hour from yesterday because of timezone
John A. De Goes
@jdegoes
Oct 02 13:03
https://zoom.us/j/637390466
Alex
@Fruzenshtein
Oct 02 13:04
Let's start brain explosion! :D
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:05
I tried to solve all of the exercises from yesterday and I put them here: https://gist.github.com/calvinlfer/ed7f70f44725deeb3393759e0583cdcd
Alex
@Fruzenshtein
Oct 02 13:05
Cool
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:06
pop quiz!
Muhammad Farag
@MuhammadFarag
Oct 02 13:09
@calvinlfer here you go https://gist.github.com/MuhammadFarag/1d8e2991f110e3717f413f0db1adf1ba
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:10
sweet, thanks @MuhammadFarag :D
Arbër Shabhasa
@ashabhasa
Oct 02 13:10
methods
Muhammad Farag
@MuhammadFarag
Oct 02 13:12
Can we use OOP to create sum types? Emulating Option for an example?
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:18
this resource helped me to understand HKTs really well and uses John's kind language: https://vimeo.com/28793245
Muhammad Farag
@MuhammadFarag
Oct 02 13:18
@calvinlfer :thumbsup:
Muhammad Farag
@MuhammadFarag
Oct 02 13:27
That makes a lot of sense… sealed give us the guarantee that we have limited number of terms.
thank you
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:30
:cry:
Muhammad Farag
@MuhammadFarag
Oct 02 13:32
operations on types
Arbër Shabhasa
@ashabhasa
Oct 02 13:32
laws
Is there a way to enforce the laws?
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:35
libraries usually use property based checks
Alex Salguero
@hasumedic
Oct 02 13:36
Can append function on Monoid be implemented in terms of an existing Semigroup? e.g.

new MonoidClass[Int] {
    override def append(l: => Int, r: => Int): Int = SemigroupClass[Int].append(l, r)
}

Arbër Shabhasa
@ashabhasa
Oct 02 13:36
Are properties based tests exhaustive enough to ensure that the laws hold?
So actually there is no way to prove that the laws hold automatically. thank you
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:38
what about things like TLA+ and Coq?
toxicafunk
@toxicafunk
Oct 02 13:38
or Idris
Arbër Shabhasa
@ashabhasa
Oct 02 13:39
thank you
Alex Salguero
@hasumedic
Oct 02 13:39
:thumbsup:
Luke
@lukejknight
Oct 02 13:39
Any comments on using/avoiding variance?
Thanks
toxicafunk
@toxicafunk
Oct 02 13:48
and monads are just monoids in the category of endofunctors :smile:
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:51
mind-blown
toxicafunk
@toxicafunk
Oct 02 13:55
can obj1.merge(obj2) be implemented as a semigroup?
Arbër Shabhasa
@ashabhasa
Oct 02 13:56
List[A]
toxicafunk
@toxicafunk
Oct 02 13:56
Java/Scala Objects
Damian Albrun
@insdami
Oct 02 13:56
NonEmptyList[A]
Calvin Lee Fernandes
@calvinlfer
Oct 02 13:57
trait linearization affects functionality though right? if you do that?
ah okay
Luke
@lukejknight
Oct 02 13:58
Have you ever run into a case where you had to choose what Semigroup instance you implemented for a type? e.g. choosing between multiplication and addition for integers?
Oh interesting
toxicafunk
@toxicafunk
Oct 02 14:00
but its bad form to have multiple typeclasses for the same type
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:01
its okay if you tag it properly
Muhammad Farag
@MuhammadFarag
Oct 02 14:01
Map is kind?
Arbër Shabhasa
@ashabhasa
Oct 02 14:01
depends on key and values
Alex Salguero
@hasumedic
Oct 02 14:02
We need semigroups for K and V?
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:02
doesn't V need to have a Semigroup
Luke
@lukejknight
Oct 02 14:02
It's not associative right?
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:04

implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] =
    new Semigroup[NotEmpty[A]] {
      override def append(f1: NotEmpty[A], f2: => NotEmpty[A]): NotEmpty[A] = f1 match {
        case NotEmpty(a, Some(at)) => NotEmpty(a, Some(append(at, f2)))
        case NotEmpty(a, None) => NotEmpty(a, Some(f2))
      }
    }

Can you do it tail-recursively?
Arbër Shabhasa
@ashabhasa
Oct 02 14:05

  implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] =
    new Semigroup[NotEmpty[A]] {
      override def append(l: => NotEmpty[A], r: => NotEmpty[A]): NotEmpty[A] = l

Thomas Boeglin
@tboeglin
Oct 02 14:05

implicit def NotEmptySemigroup[A : Semigroup]: Semigroup[NotEmpty[A]] = new Semigroup[NotEmpty[A]] {
    override def append(l: => NotEmpty[A], r: => NotEmpty[A]): NotEmpty[A] = {
      NotEmpty(l.head |+| r.head, l.tail |+| r.tail)
    }
  }

Calvin Lee Fernandes
@calvinlfer
Oct 02 14:06
ah okay
Dmitry Ivanov
@diminou
Oct 02 14:06

 implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] =
    new Semigroup[NotEmpty[A]] {    
      def append(l: NotEmpty[A], r: => NotEmpty[A]): NotEmpty[A] = l.tail match {
        case None => NotEmpty(l.head, Some(r))
        case Some(t) => NotEmpty(l.head, Some(append(t, r)))
      }
    }

Calvin Lee Fernandes
@calvinlfer
Oct 02 14:11
yes, zero = ""
Alex
@Fruzenshtein
Oct 02 14:11
yes
""
Muhammad Farag
@MuhammadFarag
Oct 02 14:11
empty string
empty list
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:11
yes, zero = Nil
Luke
@lukejknight
Oct 02 14:11
Nil
Alex
@Fruzenshtein
Oct 02 14:11
List(Nothing)
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:11
cant be
not a Monoid
Luke
@lukejknight
Oct 02 14:14
any reason you use def vs val for defining your instances?
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:14
because of the type parameter
Luke
@lukejknight
Oct 02 14:14
oh yeah
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:14
Option is * -> *
Monoid/Semigroup expects a *
Luke
@lukejknight
Oct 02 14:15
forgot you can't put them on vals :P
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:15
you can't do this and be associative :S
unless im missing something
Arbër Shabhasa
@ashabhasa
Oct 02 14:15

  implicit def OptionMonoid[A]: Monoid[Option[A]] = new Monoid[Option[A]]{
    override def zero: Option[A] = None

    override def append(f1: Option[A], f2: => Option[A]): Option[A] = f1 .orElse(f2)
  }

Calvin Lee Fernandes
@calvinlfer
Oct 02 14:15

  implicit def OptionMonoid[A] = new Monoid[Option[A]] {
    override def zero: Option[A] = None
    override def append(f1: Option[A], f2: => Option[A]): Option[A] =
      if (f1.nonEmpty) f1
      else f2
  }

but ^ is not associative
Dmitry Ivanov
@diminou
Oct 02 14:16

implicit def OptionMonoid[A]: Monoid[Option[A]] = new Monoid[Option[A]] {
def append(o1: Option[A], o2: => Option[A]): Option[A] = o1
def zero: Option[A] =None

Alex Salguero
@hasumedic
Oct 02 14:17

implicit def OptionMonoid[A: Semigroup]: Monoid[Option[A]] = new Monoid[Option[A]] {
    override def zero: Option[A] = None

    override def append(f1: Option[A], f2: => Option[A]): Option[A] = (f1, f2) match {
      case (Some(a), Some(b)) => Some(Semigroup[A].append(a, b))
      case _ => None
    }
  }

Thomas Boeglin
@tboeglin
Oct 02 14:17

  implicit def OptionMonoid[A]: Monoid[Option[A]] = new Monoid[Option[A]] {
    override def zero: Option[A] = None
    override def append(f1: => Option[A], f2: => Option[A]): Option[A] = (f1, f2) match {
      case (None, None) => None
      case (Some(a), None) => Some(a)
      case (None, Some(b)) => Some(b)
      case (Some(a), Some(b)) => Some(a |+| b)
    }
  }

Alex
@Fruzenshtein
Oct 02 14:18
Remind what does this form of argument means f2: => Option[A]?
Oh God!
It's from Scala Coursera course :D
Alex Salguero
@hasumedic
Oct 02 14:24

case class Permission(canView: Boolean, canEdit: Boolean)
implicit val MonoidPermission: Monoid[Permission] = new Monoid[Permission] {
  override def zero: Permission = Permission(false, false)

  override def append(f1: Permission, f2: => Permission): Permission = f2
}

Phong Nguyen
@phongngtuan
Oct 02 14:24
@Fruzenshtein that's called by-name parameter, make the evaluation lazy
Alex
@Fruzenshtein
Oct 02 14:24
Thanks
Dmitry Ivanov
@diminou
Oct 02 14:25

case class Resource(id: Int)
  case class Permission(owned: List[Resource], execAccess: List[Resource], writeAccess: List[Resource], readAccess: List[Resource])
  implicit val MonoidPermission: Monoid[Permission] = new Monoid[Permission] {
    def zero: Permission = Permission(Nil, Nil, Nil, Nil)
    def append(perm1: Permission, perm2: => Permission): Permission =
      Permission(
        perm1.owned |+| perm2.owned,
        perm1.execAccess |+| perm2.execAccess,
        perm1.writeAccess |+| perm2.writeAccess,
        perm1.readAccess |+| perm2.readAccess
      )
  }

  val example2 = mzero[Permission] |+| Permission(List(Resource(13)), Nil, Nil, Nil)

Yuriy Susuk
@ysusuk
Oct 02 14:25
@hasumedic it hsould combine them, not though one away
Alex Salguero
@hasumedic
Oct 02 14:26
Fair enough :)
James Warren
@jameswarren
Oct 02 14:29
could you please paste the code in gitter?
John A. De Goes
@jdegoes
Oct 02 14:29

sealed trait Capability
  case object Read extends Capability
  case object Write extends Capability
  case object Exec extends Capability
  case class AccountID(email: String)
  case class ResourceID(id: String)
  case class Permission(value: Map[AccountID, Map[ResourceID, Set[Capability]]])
  implicit val MonoidPermission: Monoid[Permission] =
    new Monoid[Permission] {
      def zero = Permission(mzero[Map[AccountID, Map[ResourceID, Set[Capability]]]])
      def append(l: Permission, r: => Permission): Permission =
        Permission(l.value |+| r.value)
    }
  val example2 = mzero[Permission] |+| Permission(Map())

Alex Salguero
@hasumedic
Oct 02 14:31

(l._1 |+| r._1) -> (l._2 |+| r._2)

Calvin Lee Fernandes
@calvinlfer
Oct 02 14:31

  implicit def SemigroupTuple2[A: Semigroup, B: Semigroup]:
    Semigroup[(A, B)] = new Semigroup[(A, B)] {
    override def append(f1: (A, B), f2: => (A, B)): (A, B) = {
      val (f1A, f1B) = f1
      val (f2A, f2B) = f2
      (f1A |+| f2A, f1B |+| f2B)
    }
  }

Alex Salguero
@hasumedic
Oct 02 14:39
Would this be a valid implementation for MonoidNotEmpty?

implicit def MonoidNotEmpty[A: Monoid]: Monoid[NotEmpty[A]] = new Monoid[NotEmpty[A]] {
    override def zero: NotEmpty[A] = NotEmpty(Monoid[A].zero, None)

    override def append(f1: NotEmpty[A], f2: => NotEmpty[A]): NotEmpty[A] = NotEmpty(f1.head |+| f2.head, (f1.tail, f2.tail) match {
      case (Some(a), Some(b)) => Some(a |+| b) 
      case (Some(a), None) => Some(a)
      case (None, Some(b)) => Some(b)
      case _ => None
    })
  }

Calvin Lee Fernandes
@calvinlfer
Oct 02 14:40
you can actually relax the typeclass constraint on A to be a Semigroup
but yeah that's valid
Alex Salguero
@hasumedic
Oct 02 14:41
How would you get the A.zero being a Semigroup?
Calvin Lee Fernandes
@calvinlfer
Oct 02 14:41
oh true, did not see that
so A would need a Monoid in that case
Alex Salguero
@hasumedic
Oct 02 14:42
Cool!
Alex Salguero
@hasumedic
Oct 02 14:50
abstracts over a HKT
Arbër Shabhasa
@ashabhasa
Oct 02 14:50
It takes a type constructor
Alex
@Fruzenshtein
Oct 02 14:55
None
Damian Albrun
@insdami
Oct 02 14:55
Some(f(a))
Alex Salguero
@hasumedic
Oct 02 14:55
Some(f(a))
Alex
@Fruzenshtein
Oct 02 14:55
Some(f(a))
toxicafunk
@toxicafunk
Oct 02 14:55
Some(f(a))
Alex Salguero
@hasumedic
Oct 02 15:00
case Some(a) => None
if(f(a)) == a) None else Some(f(a))
Muhammad Farag
@MuhammadFarag
Oct 02 15:09
if we break it for identity, we break it for all!
correctness in identity means correctness for all?
Arbër Shabhasa
@ashabhasa
Oct 02 15:16
yes
toxicafunk
@toxicafunk
Oct 02 15:16
structure preserving
that time is constant :)
Alex Salguero
@hasumedic
Oct 02 15:20
computed value doesn’t change?
Phong Nguyen
@phongngtuan
Oct 02 15:21
if it's completed, it stays completed?
Calvin Lee Fernandes
@calvinlfer
Oct 02 15:23

  implicit val BTreeFunctor: Functor[BTree] =
    new Functor[BTree] {
      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] = fa match {
        case Leaf(a) => Leaf(f(a))
        case Fork(left, right) => Fork(map(left)(f), map(right)(f))
      }
    }

Dmitry Ivanov
@diminou
Oct 02 15:24

  implicit val BTreeFunctor: Functor[BTree] =
    new Functor[BTree] {
      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] =
        fa match {
          case Leaf(a) => Leaf(f(a))      
          case Fork(l, r) => Fork(map(l)(f), map(r)(f))
        }
    }

Calvin Lee Fernandes
@calvinlfer
Oct 02 15:25
Use ```scala```
no
Dmitry Ivanov
@diminou
Oct 02 15:28

  implicit val NothingFunctor: Functor[Nothing] = new Functor[Nothing] {
    def map[A, B](fa: Nothing)(f: A => B) = fa 
  }

Calvin Lee Fernandes
@calvinlfer
Oct 02 15:28
I get this
[error] /Users/calvinlfer/IdeaProjects/functional-scala/src/main/scala/net/degoes/02-abstractions/exercises.scala:118:32: Nothing does not take type parameters
[error] override def mapA, B(f: A => B): Nothing[B] = fa
[error] ^
Muhammad Farag
@MuhammadFarag
Oct 02 15:28
This message was deleted
Calvin Lee Fernandes
@calvinlfer
Oct 02 15:28
ahh
Muhammad Farag
@MuhammadFarag
Oct 02 15:33
:+1:
Ahmad Ragab
@ASRagab
Oct 02 15:33
:thumbsup:
Alex Salguero
@hasumedic
Oct 02 15:36
Left(e)
sken
@floreslorca
Oct 02 15:37
does someone have the zoom link?
got it nvm
Dmitry Ivanov
@diminou
Oct 02 15:39
It cannot exist, as we have no way of getting from B to A to form the argument of the function.
Calvin Lee Fernandes
@calvinlfer
Oct 02 15:42

  implicit def FunctorProductFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorProduct[F, G, ?]] = new Functor[FunctorProduct[F, G, ?]] {
    override def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] =
      FunctorProduct(fa.l.map(f), fa.r.map(f))
  }

  implicit def FunctorSumFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorSum[F, G, ?]] = new Functor[FunctorSum[F, G, ?]] {
    override def map[A, B](fa: FunctorSum[F, G, A])(f: A => B): FunctorSum[F, G, B] =
      FunctorSum[F, G, B](fa.run match {
        case Left(ffa) => Left(ffa.map(f))
        case Right(ga) => Right(ga.map(f))
      })
  }

Calvin Lee Fernandes
@calvinlfer
Oct 02 15:47

  implicit def FunctorNestFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorNest[F, G, ?]] = new Functor[FunctorNest[F, G, ?]] {
    override def map[A, B](fa: FunctorNest[F, G, A])(f: A => B): FunctorNest[F, G, B] =
      FunctorNest(fa.run.map(_.map(f)): F[G[B]])
  }

intelliJ is crying so i used a type ascription :P
@jdegoes will u also cover recursion schemes?
yeah i can post it
Alex Salguero
@hasumedic
Oct 02 15:49

implicit def ParserFunctor[E]: Functor[Parser[E, ?]] =
    new Functor[Parser[E, ?]] {
      def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] = Parser[E, B]((input: String) =>
        fa.run(input) match {
          case Left(value) => Left(value)
          case Right(value) => Right(value._1 -> f(value._2))
        }
      )
    }

Calvin Lee Fernandes
@calvinlfer
Oct 02 15:49

  //
  // EXERCISE 3
  //
  // Define an instance of `Functor` for Parser[E, ?].
  //
  case class Parser[+E, +A](run: String => Either[E, (String, A)])
  implicit def ParserFunctor[E]: Functor[Parser[E, ?]] =
    new Functor[Parser[E, ?]] {
      // need a Parser[E, B] which represents String => Either[E, (String, B)]
      def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] = Parser(str => {
        val res: Either[E, (String, A)] = fa.run(str)
        res match {
          case Left(e) => Left(e)
          case Right((resString, a)) => Right((resString, f(a)))
        }
      })
    }

Petar Djurkovic
@petar_djurkovic_twitter
Oct 02 15:49
Thank you @calvinlfer
Calvin Lee Fernandes
@calvinlfer
Oct 02 15:50
np :)
i will post all of my stuff at the end in a gist and link it too
Arbër Shabhasa
@ashabhasa
Oct 02 16:00
@calvinlfer for the FunctorNest I actually have to do it this way other wise it won't compile

  case class FunctorNest[F[_], G[_], A](run: F[G[A]])
  implicit def FunctorNestFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorNest[F, G, ?]] = new Functor[FunctorNest[F, G, ?]] {
    override def map[A, B](fga: FunctorNest[F, G, A])(f: A => B): FunctorNest[F, G, B] = 
      FunctorNest[F,G,B](fga.run.map(_.map(f)))
  }

Ahmad Ragab
@ASRagab
Oct 02 16:17

    implicit def NotEmptySemigroup[A : Semigroup]: Semigroup[NotEmpty[A]] = new Semigroup[NotEmpty[A]] {
        override def append(l: => NotEmpty[A], r: => NotEmpty[A]): NotEmpty[A] = {
          NotEmpty(l.head |+| r.head, l.tail |+| r.tail)
        }
      }

For this implementation, we are restricting ourselves to A's which have a semigroup defined, is that right?
Calvin Lee Fernandes
@calvinlfer
Oct 02 16:25
@ASRagab yeah, that's right
Muhammad Farag
@MuhammadFarag
Oct 02 17:01
Hey
Alex Salguero
@hasumedic
Oct 02 17:02
Kind
Phong Nguyen
@phongngtuan
Oct 02 17:02
1 type hole
hardlianotion
@hardlianotion
Oct 02 17:03
I have to leave - look forward to picking this up later this evening.
@calvinlfer thanks for offer to post your gist...
Calvin Lee Fernandes
@calvinlfer
Oct 02 17:08
np :)
Muhammad Farag
@MuhammadFarag
Oct 02 17:18
Is there a business example for a program in the sense of functors?
Alex
@Fruzenshtein
Oct 02 17:18
+1
John A. De Goes
@jdegoes
Oct 02 17:23

sealed trait BankTransaction[A]
  case class Return[A](value: A) extends BankTransaction[A]
  case class Deposit[A](amount: BigDecimal, next: BigDecimal => BankTransaction[A]) extends BankTransaction[A]
  case class Withdraw[A](amount: BigDecimal, next: BigDecimal => BankTransaction[A]) extends BankTransaction[A]
  object BankTransaction {

  }

John A. De Goes
@jdegoes
Oct 02 17:35

  sealed trait BankTransaction[+A]
  case class Return[A](value: A) extends BankTransaction[A]
  case class Deposit[A](amount: BigDecimal, next: BigDecimal => BankTransaction[A]) extends BankTransaction[A]
  case class Withdraw[A](amount: BigDecimal, next: BigDecimal => BankTransaction[A]) extends BankTransaction[A]
  object BankTransaction {
    implicit val FunctorBankTransaction: Functor[BankTransaction] =
      new Functor[BankTransaction] with Zip[BankTransaction] {
        def map[A, B](fa: BankTransaction[A])(f: A => B): BankTransaction[B] =
          fa match {
            case Return(value) => Return(f(value))
            case Deposit(amount, next) => Deposit(amount, (b: BigDecimal) => next(b).map(f))
            case Withdraw(amount, next) => Withdraw(amount, (b: BigDecimal) => next(b).map(f))
          }

        def zip[A, B](l: BankTransaction[A], r: BankTransaction[B]): BankTransaction[(A, B)] = ???
      }
  }

Arbër Shabhasa
@ashabhasa
Oct 02 17:45
Aren't we in this way loosing the "effect" of the outer Transaction?
thanks
John A. De Goes
@jdegoes
Oct 02 17:49
def zip[E, A, B](l: Parser[E, A], r: Parser[E, B]): Parser[E, (A, B)] = ???
Phong Nguyen
@phongngtuan
Oct 02 17:51

  def zip[E, A, B](l: Parser[E, A], r: Parser[E, B]): Parser[E, (A,B)] = Parser((input: String) => {
    l.run(input) match {
      case Left(e) => Left(e)
      case Right((input, a)) =>
        r.run(input) match {
          case Left(e) => Left(e)
          case Right((input, b)) => Right((input, (a,b)))
        }
    }
  })

Calvin Lee Fernandes
@calvinlfer
Oct 02 17:51

  def zip[E, A, B](l: Parser[E, A], r: Parser[E, B]): Parser[E, (A, B)] = Parser(input => {
    l.run(input) match {
      case Left(e) => Left(e)
      case Right((restInput, a)) =>
        r.run(restInput) match {
          case Left(e2) => Left(e2)
          case Right((restInput2, b)) => Right((restInput2, (a, b)))
        }
    }
  })

Arbër Shabhasa
@ashabhasa
Oct 02 17:56
Success
Thomas Boeglin
@tboeglin
Oct 02 17:56
Future.successful
sken
@floreslorca
Oct 02 17:58
cos =>
Damian Albrun
@insdami
Oct 02 18:01

implicit val OptionApplicative: Applicative[Option] =
    new Applicative[Option] {
      def point[A](a: => A): Option[A] = Some(a)

      def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] =
        (fa, f) match {
          case (_, None)            => None
          case (None, _)            => None
          case (Some(a), Some(fun)) => Some(fun(a))
        }
    }

Alex Salguero
@hasumedic
Oct 02 18:01
Some(a)
Phong Nguyen
@phongngtuan
Oct 02 18:04

  def zip[F[_]: Applicative, A, B](l: F[A], r: F[B]): F[(A, B)] =
    (l |@| r)((_,_))

Calvin Lee Fernandes
@calvinlfer
Oct 02 18:04

def zip[F[_]: Applicative, A, B](l: F[A], r: F[B]): F[(A, B)] =
    Applicative[F].apply2(l, r)((a, b) => Tuple2(a, b))

  def ap2[F[_]: Applicative, A, B](fa: F[A], fab: F[A => B]): F[B] =
    Applicative[F].apply2(fa, fab)((a, ab) => ab(a))

ah will fix
sken
@floreslorca
Oct 02 18:05

 def zip[F[_]: Applicative, A, B](l: F[A], r: F[B]): F[(A, B)] = (l |@| r)((_,_))

Calvin Lee Fernandes
@calvinlfer
Oct 02 18:08
@jdegoes can u do ap2 just using ScalaZ's Zip typeclass?
sken
@floreslorca
Oct 02 18:09
where do you get the E in the point i mplementation
Calvin Lee Fernandes
@calvinlfer
Oct 02 18:09
oh lol :P

def point[A](a: => A): Parser[E,A] = Parser(input => Right((input, a)))

Pierangelo Cecchetto
@pierangeloc
Oct 02 18:11
def point[A](a: => A): List[A] = List(a)
Thomas Boeglin
@tboeglin
Oct 02 18:11

    def point[A](a: => A): List[A] = a :: Nil

Pierangelo Cecchetto
@pierangeloc
Oct 02 18:12
is this the only applicative for list we can think of?
Arbër Shabhasa
@ashabhasa
Oct 02 18:12
Aren't you using flatMAp in the last example?
Calvin Lee Fernandes
@calvinlfer
Oct 02 18:12

  //
  // EXERCISE 10
  //
  // Define an instance of `Applicative` for `Parser[E, ?]`.
  //
  implicit def ApplicativeParser[E]: Applicative[Parser[E, ?]] =
    new Applicative[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] = Parser(input => Right((input, a)))

      def ap[A, B](fa: => Parser[E,A])(f: => Parser[E, A => B]): Parser[E,B] = Parser( (input: String) => {
        val resA: Either[E, (String, A)] = fa.run(input)
        resA match {
          case Left(e) =>
            Left(e)

          case Right((remainingInput, a)) =>
            val resF: Either[E, (String, A => B)] = f.run(remainingInput)
            resF match {
              case Left(e) => Left(e)
              case Right((finalRemainingInput, aTob)) => Right((finalRemainingInput, aTob(a)))
            }
        }
      } : Either[E, (String, B)])
    }

@ashabhasa yeah its kinda cheating :P
Damian Albrun
@insdami
Oct 02 18:13

implicit def ApplicativeList: Applicative[List] =
    new Applicative[List] {
      def point[A](a: => A): List[A] =
        List(a)

      def ap[A, B](fa: => List[A])(
        f: => List[A => B]): List[B] =
          (fa, f) match {
            case (Nil, _) => Nil
            case (_, Nil) => Nil
            case (x :: xs, y :: ys) => y(x) :: ap(xs)(ys)
            }
    }

Ahmad Ragab
@ASRagab
Oct 02 18:21
does this work for Applicative Parser:

  implicit def ApplicativeParser[E]: Applicative[Parser[E, ?]] =
    new Applicative[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] = Parser(input => Right((input, a)))

      def ap[A, B](fa: => Parser[E,A])(f: => Parser[E, A => B]): Parser[E,B] = Parser[E, B] { input =>
        fa.run(input) match {
          case Left(e) => Left(e)
          case Right((str, a)) =>
            f.run(str) match {
              case Left(e) => Left(e)
              case Right((str2, b)) => Right((str2, b(a)))
            }
        }
      }
    }

Calvin Lee Fernandes
@calvinlfer
Oct 02 18:24
yeah
sken
@floreslorca
Oct 02 18:26
you could probably make that one recursive
Muhammad Farag
@MuhammadFarag
Oct 02 18:39
I believe I have read somewhere that Monad has a unit and a flatMap, if I remember correctly, how does that map to our definition of Monad here?
Calvin Lee Fernandes
@calvinlfer
Oct 02 18:40
unit = point
Muhammad Farag
@MuhammadFarag
Oct 02 18:42
Thanks :) That makes sense :+1:
Devesh Shetty
@devesh-shetty
Oct 02 18:48
So any form of chain operation is a monad?
Damian Albrun
@insdami
Oct 02 18:53

implicit val MonadBTree: Monad[BTree] =
    new Monad[BTree] {
      def point[A](a: => A): BTree[A] =
        Leaf(a)

      def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => Fork(bind(l)(f), bind(r)(f))
        }
    }

sken
@floreslorca
Oct 02 18:53

  implicit val MonadBTree: Monad[BTree] =
    new Monad[BTree] {
      def point[A](a: => A): BTree[A] = new Leaf(a)

      def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] = fa match {
        case Leaf(a) => f(a)
        case Fork(a, b) =>  Fork[B](bind(a)(f), bind(b)(f))
      }
    }

Damian Albrun
@insdami
Oct 02 18:55

implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] = Parser(input => Right((input, a)))

      def bind[A, B](fa: Parser[E,A])(f: A => Parser[E,B]): Parser[E,B] =
        Parser(input =>
            fa.run(input) match {
              case Left(e) => Left(e)
              case Right((in, a)) => f(a).run(in)
            })
    }

Calvin Lee Fernandes
@calvinlfer
Oct 02 18:55

  implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] =
        Parser(input => Right((input, a)))

      def bind[A, B](fa: Parser[E,A])(f: A => Parser[E,B]): Parser[E,B] =
        Parser(input => {
          fa.run(input) match {
            case Left(e) =>
              Left(e)

            case Right((remainingInput, a)) =>
              f(a).run(remainingInput)
          }
        })
    }

sken
@floreslorca
Oct 02 19:02
are there shorthands in scalazio to parallelize applicatives?
cool

  implicit val MonadList: Monad[Option] =
    new Monad[Option] {
      def point[A](a: => A): Option[A] = Option(a)

      def bind[A, B](fa: Option[A])(f: A => Option[B]): Option[B] = fa match {
        case None => None
        case Some(e) => f(e)
      }
    }

Ahmad Ragab
@ASRagab
Oct 02 19:05
@jdegoes point of clarification, that Monad is coming from scalaz, and not a homegrown one?
:thumbsup:
Ahmad Ragab
@ASRagab
Oct 02 19:16
@jdegoes when you are done can you explain the need for the constraint.
John A. De Goes
@jdegoes
Oct 02 19:16

  case class Parser[+E, +A](run: String => Either[E, (String, A)]) { self =>
    def ~ [E1 >: E, B](that: Parser[E1, B]): Parser[E1, (A, B)] = ???

    def ~> [E1 >: E, B](that: Parser[E1, B]): Parser[E1, B] = ???

    def <~ [E1 >: E, B](that: Parser[E1, B]): Parser[E1, A] = ???

    def map[B](f: A => B): Parser[E, B] = ???

    def flatMap[E1 >: E, B](f: A => Parser[E1, B]): Parser[E1, B] = ???

    def orElse[E1 >: E, B](that: Parser[E1, B]): Parser[E1, Either[A, B]] = ???

    def | [E1 >: E, A1 >: A](that: Parser[E1, A1]): Parser[E1, A1] =
      (self orElse (that)).map(_.merge)
  }
  object Parser {
    def fail[E](e: E): Parser[E, Nothing] =
      Parser(input => Left(e))

    def point[A](a: => A): Parser[Nothing, A] =
      Parser(input => Right((input, a)))

    def char[E](e: E): Parser[E, Char] =
      Parser(input =>
        if (input.length == 0) Left(e)
        else Right((input.drop(1), input.charAt(0))))
  }

Ahmad Ragab
@ASRagab
Oct 02 19:29

  case class Parser[+E, +A](run: String => Either[E, (String, A)]) { self =>
    def ~[E1 >: E, B](that: Parser[E1, B]): Parser[E1, (A, B)] =
      for {
        a <- self
        b <- that
      } yield (a, b)

    def ~>[E1 >: E, B](that: Parser[E1, B]): Parser[E1, B] =
      self ~ that map (_._2)

    def <~[E1 >: E, B](that: Parser[E1, B]): Parser[E1, A] =
      self ~ that map (_._1)

    def map[B](f: A => B): Parser[E, B] = Parser[E, B]{ input =>
      self.run(input) match {
        case Left(e) => Left(e)
        case Right((str, a)) => Right((str, f(a)))
      }
    }

    def flatMap[E1 >: E, B](f: A => Parser[E1, B]): Parser[E1, B] = Parser[E1, B] { input =>
      self.run(input) match {
        case Left(e) => Left(e)
        case Right((str, a)) => f(a).run(str)
      }
    }

    def orElse[E1 >: E, B](that: Parser[E1, B]): Parser[E1, Either[A, B]] = {
      val self1 = self.map(Left(_))
      val that1 = that.map(Right(_))

      type Return = Either[E1, (String, Either[A, B])]

      Parser(i => self1.run(i).fold[Return](_ => that1.run(i), Right(_)))
    }


    def |[E1 >: E, A1 >: A](that: Parser[E1, A1]): Parser[E1, A1] =
      (self orElse that).map(_.merge)
  }

John A. De Goes
@jdegoes
Oct 02 19:51

object parser {
  //
  // EXERCISE 1
  //
  // Implement all missing methods for parser.
  //
  case class Parser[+E, +A](run: String => Either[E, (String, A)]) { self =>
    def ~ [E1 >: E, B](that: Parser[E1, B]): Parser[E1, (A, B)] =
      self.flatMap(a => that.map(b => (a, b)))

    def ~> [E1 >: E, B](that: Parser[E1, B]): Parser[E1, B] =
      (self ~ that).map(_._2)

    def <~ [E1 >: E, B](that: Parser[E1, B]): Parser[E1, A] =
      (self ~ that).map(_._1)

    def map[B](f: A => B): Parser[E, B] =
      flatMap(f.andThen(Parser.point[B](_)))

    def flatMap[E1 >: E, B](f: A => Parser[E1, B]): Parser[E1, B] =
      Parser[E1, B](input =>
        self.run(input) match {
          case Left(e) => Left(e)
          case Right((input, a)) => f(a).run(input)
        })

    def orElse[E1 >: E, B](that: Parser[E1, B]): Parser[E1, Either[A, B]] = {
      val self1 = self.map(Left(_))
      val that1 = that.map(Right(_))

      type Return = Either[E1, (String, Either[A, B])]

      Parser(i => self1.run(i).fold[Return](_ => that1.run(i), Right(_)))
    }

    def filter[E1 >: E](e0: E1)(f: A => Boolean): Parser[E1, A] =
      Parser(input =>
        self.run(input) match {
          case Left(e) => Left(e)
          case Right((input, a)) => if (f(a)) Right((input, a)) else Left(e0)
        })

    def | [E1 >: E, A1 >: A](that: Parser[E1, A1]): Parser[E1, A1] =
      (self orElse (that)).map(_.merge)

    def rep: Parser[E, List[A]] =
      ((self.map(List(_)) | Parser.point[List[A]](Nil)) ~ rep).map(t => t._1 ++ t._2)

    def ? : Parser[E, Option[A]] = self.map(Some(_)) | Parser.point(None)
  }
  object Parser {
    def fail[E](e: E): Parser[E, Nothing] =
      Parser(input => Left(e))

    def point[A](a: => A): Parser[Nothing, A] =
      Parser(input => Right((input, a)))

    def maybeChar: Parser[Nothing, Option[Char]] =
      Parser(input =>
        if (input.length == 0) Right((input, None))
        else Right((input.drop(1), Some(input.charAt(0)))))

    def char[E](e: E): Parser[E, Char] =
      Parser(input =>
        if (input.length == 0) Left(e)
        else Right((input.drop(1), input.charAt(0))))

    def digit[E](e: E): Parser[E, Int] =
      for {
        c <- char(e)
        option = scala.util.Try(c.toString.toInt).toOption
        d <- option.fold[Parser[E, Int]](Parser.fail(e))(point(_))
      } yield d

    def literal[E](f: Char => E)(c0: Char): Parser[E, Char] =
      for {
        c <- char(f(c0))
        _ <- if (c != c0) Parser.point(f(0)) else Parser.point(())
      } yield c

    def whitespace: Parser[Nothing, Unit] =
      Parser(input => Right((input.dropWhile(_ == ' '), ())))
  }

  // [1,2,3,]
  sealed trait Error
  case class ExpectedLit(char: Char) extends Error
  case object ExpectedDigit extends Error

  val parser: Parser[Error, List[Int]] =
    for {
      _       <- Parser.literal(ExpectedLit)('[')
      digits  <- (Parser.digit(ExpectedDigit) <~ Parser.literal(ExpectedLit)(',')).rep
      _       <- Parser.literal(ExpectedLit)(']')
    } yield digits
}

Ahmad Ragab
@ASRagab
Oct 02 19:55
it feels like you could have used filter for the whitespace, is it possible?
Calvin Lee Fernandes
@calvinlfer
Oct 02 19:55
would it be possible to support [1, 2, 3] and [1, 2, 3,]

((Parser.digit(ExpectedDigit) <~ Parser.literal(ExpectedLit)(',')) | Parser.digit(ExpectedDigit)).rep

Would that work?
Ahmad Ragab
@ASRagab
Oct 02 19:57
tbf, I don't understand why the return type of whitespace is Parser[Nothing, Unit]
Calvin Lee Fernandes
@calvinlfer
Oct 02 19:57
it just takes the input and drops spaces and does not add anything to the Parser result
Alex Salguero
@hasumedic
Oct 02 19:57
I believe it’s a way do indicate that it’s discarding them, without affecting the resulting Parser
Ahmad Ragab
@ASRagab
Oct 02 19:57
shouldn't return the remaining input?
Calvin Lee Fernandes
@calvinlfer
Oct 02 19:57
like the others take the input and then additionally add something to the parser result (like literal)
it does
the remaining input is returned

Parser(input => Right((input.dropWhile(_ == ' ') /* this is the remaining input */, ())))

Jens Hoffmann
@jchoffmann
Oct 02 19:59
plus it can't fail, hence Nothing
Ahmad Ragab
@ASRagab
Oct 02 20:00
thanks all, got it.
toxicafunk
@toxicafunk
Oct 02 20:07
List[Char]
John A. De Goes
@jdegoes
Oct 02 20:07
https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Foldable.scala
sken
@floreslorca
Oct 02 20:12
is tihs equivalent?

      def foldRight[A, B](fa: List[A], z: => B)(f: (A, => B) => B): B = fa match {
        case Nil => z
        case h :: l => foldRight(l, f(h, z))(f)
      }

Calvin Lee Fernandes
@calvinlfer
Oct 02 20:14

  sealed trait BTree[+A]
  case class Leaf[A](a: A) extends BTree[A]
  case class Fork[A](left: BTree[A], right: BTree[A]) extends BTree[A]
  implicit val FoldableBTree: Foldable[BTree] =
    new Foldable[BTree] {
      def foldMap[A, B](fa: BTree[A])(f: A => B)(
          implicit F: Monoid[B]): B =
        fa match {
          case Leaf(a) => f(a)
          case Fork(left, right) => foldMap(left)(f) |+| foldMap(right)(f)
        }

      def foldRight[A, B](fa: BTree[A], z: => B)(f: (A, => B) => B): B =
        fa match {
          case Leaf(a) => f(a, z)
          case Fork(left, right) =>
            val newZero = foldRight(right, z)(f)
            foldRight(left, newZero)(f)
        }
    }

sken
@floreslorca
Oct 02 20:14
ah right thanks
Ahmad Ragab
@ASRagab
Oct 02 20:17
invoke fa
I don't think so
Jens Hoffmann
@jchoffmann
Oct 02 20:17
only option left is then mzero
sken
@floreslorca
Oct 02 20:28
A => Btree[B]
toxicafunk
@toxicafunk
Oct 02 20:34
running it
Jens Hoffmann
@jchoffmann
Oct 02 20:34
run it
sken
@floreslorca
Oct 02 20:46
mind posting a gist with the code?
Calvin Lee Fernandes
@calvinlfer
Oct 02 20:47
https://gist.github.com/calvinlfer/437c4fcca1e009e317cf44fa5860bb5d
i'll update it when we finish today
sken
@floreslorca
Oct 02 20:49
thanks
toxicafunk
@toxicafunk
Oct 02 20:49
@calvinlfer da tru mvp
Jens Hoffmann
@jchoffmann
Oct 02 21:01
yep
toxicafunk
@toxicafunk
Oct 02 21:01
unless its Nothing
Jens Hoffmann
@jchoffmann
Oct 02 21:01
:D
Muhammad Farag
@MuhammadFarag
Oct 02 21:03
why is it a final case class?
toxicafunk
@toxicafunk
Oct 02 21:04
why case class? couldn't it be a type class?
yes
Calvin Lee Fernandes
@calvinlfer
Oct 02 21:08
get andThen that.get
Arbër Shabhasa
@ashabhasa
Oct 02 21:08
self.get.andThen(that.get)
sken
@floreslorca
Oct 02 21:12

def >>> [B](that: Lens[A, B]): Lens[S, B] = Lens[S, B](s => that.get(self.get(s)), b => self.set(self.get(b)))

Muhammad Farag
@MuhammadFarag
Oct 02 21:17
should update be named updated by convention?
sken
@floreslorca
Oct 02 21:18
name it dot
Jens Hoffmann
@jchoffmann
Oct 02 21:19

def `🔎`[B](that: Lens[A, B]): Lens[S, B]

Calvin Lee Fernandes
@calvinlfer
Oct 02 21:19
☢
Muhammad Farag
@MuhammadFarag
Oct 02 21:19
hahaha :D
sken
@floreslorca
Oct 02 21:19

 · 

Calvin Lee Fernandes
@calvinlfer
Oct 02 21:19
hurray
Muhammad Farag
@MuhammadFarag
Oct 02 21:20
⎉
Jens Hoffmann
@jchoffmann
Oct 02 21:20
excellent
Alex Salguero
@hasumedic
Oct 02 21:20
:heart_eyes:
sken
@floreslorca
Oct 02 21:20
·
Muhammad Farag
@MuhammadFarag
Oct 02 21:21
no
Jens Hoffmann
@jchoffmann
Oct 02 21:31
What is the ev doing in Prism's select?
toxicafunk
@toxicafunk
Oct 02 21:32
making sure A is Unit?
Jens Hoffmann
@jchoffmann
Oct 02 21:33
so you can only select on Prism's whose substructure is a Unit, just like the USA example?
Phong Nguyen
@phongngtuan
Oct 02 21:34
is there a rule of thumb what should be a data & what should be a typeclass?
toxicafunk
@toxicafunk
Oct 02 21:34
typeclass have operations on data types
Alex Salguero
@hasumedic
Oct 02 21:36
typeclass or type class? :trollface:
toxicafunk
@toxicafunk
Oct 02 21:37
type-class :smile:
Jens Hoffmann
@jchoffmann
Oct 02 21:37
type☢class
Damian Albrun
@insdami
Oct 02 21:37
Is it show a lawless type class?
Muhammad Farag
@MuhammadFarag
Oct 02 21:38
Thank you @jdegoes and all :)
Calvin Lee Fernandes
@calvinlfer
Oct 02 21:38
wooo!
sken
@floreslorca
Oct 02 21:38
at what itme tomorrow?
Calvin Lee Fernandes
@calvinlfer
Oct 02 21:38
9 AM EST
Yuriy Susuk
@ysusuk
Oct 02 21:38
bye bye ^_^
Jens Hoffmann
@jchoffmann
Oct 02 21:38
Thanks @jdegoes!
sken
@floreslorca
Oct 02 21:38
thanks
Alex Salguero
@hasumedic
Oct 02 21:39
Looking forward to tomorrow! Thank you again @jdegoes!
Calvin Lee Fernandes
@calvinlfer
Oct 02 21:39
bye, thanks @jdegoes
Ahmad Ragab
@ASRagab
Oct 02 21:39
thank you
toxicafunk
@toxicafunk
Oct 02 21:39
thanks
Damian Albrun
@insdami
Oct 02 21:39
Thanks!
Arbër Shabhasa
@ashabhasa
Oct 02 21:39
thanks
Pontus Svenson
@xpontus
Oct 02 21:39
thanks!
Devesh Shetty
@devesh-shetty
Oct 02 21:39
Thanks John!
Pierangelo Cecchetto
@pierangeloc
Oct 02 21:39
Thanks, always great stuff!
Ahmad Ragab
@ASRagab
Oct 02 21:43
could I see that implementation of the method formerly known as >>> for Lens?
Jens Hoffmann
@jchoffmann
Oct 02 21:43

    def >>>[B](that: Lens[A, B]): Lens[S, B] = // Compose lenses
      Lens[S, B](
        get = (s: S) => self.get.andThen(that.get)(s),
        set = (b: B) => (s: S) => self.set(that.set(b)(self.get(s)))(s)
      )

Ahmad Ragab
@ASRagab
Oct 02 21:43
thank you!
Jens Hoffmann
@jchoffmann
Oct 02 21:44
somehow it looks like it shouldn't compile
with error "make your mind up, set or get or what" or something
Ahmad Ragab
@ASRagab
Oct 02 21:47
yeah, this Optics section was pretty challenging. This is my first formal exposure to it.
Ahmad Ragab
@ASRagab
Oct 02 22:03

  final case class Lens[S, A](
    get: S => A,
    set: A => S => S
  ) { self =>
    def >>> [B](that: Lens[A, B]): Lens[S, B] = Lens[S, B](
      s => that.get(self.get(s)),
      b => s => {
        lazy val `A => A` = that.set(b)
        lazy val a = self.get(s)
        lazy val `S => S` = self.set(`A => A`(a))

        `S => S`(s)
      }
    )

Not that you should ever write code this way, heh, but I found tearing it apart this way instructive.
_

John A. De Goes/functional-scala

Calvin Lee Fernandes
@calvinlfer
Oct 03 01:51
^that's actually a nice way to break it down :+1:
Jens Hoffmann
@jchoffmann
Oct 03 10:13
yeah i've done it similarly to understand the second part, just reading the line doesn't parse well for me
Arbër Shabhasa
@ashabhasa
Oct 03 10:43
@jdegoes what setup are you using to develop in scala?
Muhammad Farag
@MuhammadFarag
Oct 03 11:50
Good morning guys, just finished my notes for Semigroup, Monoid and Functors: https://mfarag.com
toxicafunk
@toxicafunk
Oct 03 11:52
nice
John A. De Goes
@jdegoes
Oct 03 12:36
@ashabhasa Currently Atom
toxicafunk
@toxicafunk
Oct 03 12:41
Atom + Ensime?
Jens Hoffmann
@jchoffmann
Oct 03 12:49

From an earlier discussion:

    I think Ensime development has/will stop
    Sam is not working with Scala anymore

someone mentioned this, not sure if true
toxicafunk
@toxicafunk
Oct 03 12:50
it is true, but ensime still works
i'm using it with spacemacs
Jens Hoffmann
@jchoffmann
Oct 03 12:54
@jdegoes In today's recap, could you quickly explain Newtype?
John A. De Goes
@jdegoes
Oct 03 12:54
@jchoffmann Yes, will do!
John A. De Goes
@jdegoes
Oct 03 13:00
https://zoom.us/j/514955339
We'll get started in 5 or so minutes, waiting on a couple people.
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:02
check out Monocle's docs if you want to read up more on optics: http://julien-truffaut.github.io/Monocle/optics.html
Alex Salguero
@hasumedic
Oct 03 13:06
:wave:
Muhammad Farag
@MuhammadFarag
Oct 03 13:06
Good morning :)
Ahmad Ragab
@ASRagab
Oct 03 13:10
List
Arbër Shabhasa
@ashabhasa
Oct 03 13:10
List
Ahmad Ragab
@ASRagab
Oct 03 13:12
Is there a relationship between zip and ap
Arbër Shabhasa
@ashabhasa
Oct 03 13:13
@jdegoes Yesterday we implemented Semigroup/Monoid for List. But list is a type constructor.
Why doesn't Semigroup/Monoid have a type constructor like the Functor?
What i mean is why isn't Semigroup defined as

  trait Semigroup[F[_]] {
    ....
  }

Ahmad Ragab
@ASRagab
Oct 03 13:14
You need the runtime value of the first
Jens Hoffmann
@jchoffmann
Oct 03 13:15
@ASRagab you can express one in terms of the other, so they are slightly different but equivalent ways to look at Apply
Ahmad Ragab
@ASRagab
Oct 03 13:15
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:16
no
Damian Albrun
@insdami
Oct 03 13:16
No, sorry
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:16
List has kind * -> *
toxicafunk
@toxicafunk
Oct 03 13:16
*
Arbër Shabhasa
@ashabhasa
Oct 03 13:16
**
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:16
Semigroup expects *
@jdegoes its like applying parameters at the type level right?
Arbër Shabhasa
@ashabhasa
Oct 03 13:17
But does it make sense to have a Semigroup for higher kinded types?
Jens Hoffmann
@jchoffmann
Oct 03 13:17
@ASRagab From my notes:

    // About ap / zip I think ap is the traditional operation for Apply, except it is harder to grasp than zip but one can be written thanks to the other, I guess thats why we saw zip
    // zip is more general: combine two Fs into 1 (2 Options, Parsers, ...), then you can decide what to do with the combination (map)
    // ap/ap2 is about applying a function within an F; can be implemented in terms of zip

Calvin Lee Fernandes
@calvinlfer
Oct 03 13:17
we feed A: * to List: * -> * to get back a * which is a List[A]
Damian Albrun
@insdami
Oct 03 13:18
would be ok to say that everything that is * => * can have Functor?
Ahmad Ragab
@ASRagab
Oct 03 13:18
@jchoffmann thank you, that's helpful
Arbër Shabhasa
@ashabhasa
Oct 03 13:21
thank you
John A. De Goes
@jdegoes
Oct 03 13:27
https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc#optic-composition-table
Jens Hoffmann
@jchoffmann
Oct 03 13:34
@jdegoes yes, thanks!
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:40
()
Muhammad Farag
@MuhammadFarag
Oct 03 13:40
()
Alex Salguero
@hasumedic
Oct 03 13:40
()
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:40
""
Muhammad Farag
@MuhammadFarag
Oct 03 13:40
“Hello John!”
Arbër Shabhasa
@ashabhasa
Oct 03 13:47
it's a function
Muhammad Farag
@MuhammadFarag
Oct 03 13:48
yes
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:51
Return(() => f(thunk))
next.map(f)
Muhammad Farag
@MuhammadFarag
Oct 03 13:52
map it over f?
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:52
ReadLine(str => inputToNext(str).map(f))
Ahmad Ragab
@ASRagab
Oct 03 13:55
@jdegoes when you say we are cheating, what exactly do you mean?
Calvin Lee Fernandes
@calvinlfer
Oct 03 13:56
are zip and map derived combinators?
point?
Phong Nguyen
@phongngtuan
Oct 03 13:57
f
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:01
nothing
it's just a description
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:07

  val yourName2: Program[Unit] = for {
    _     <- writeLine("What is your name?")
    name  <- readLine
    _     <- writeLine(s"Hello $name, good to meet you")
    u     <- point(())
  } yield u

Damian Albrun
@insdami
Oct 03 14:08

val yourName2: Program[Unit] =
    for {
      _     <- writeLine("What is your name?")
      name  <- readLine
      _     <- writeLine("Hello, " + name + ", good to meet you!")
    } yield ()

Calvin Lee Fernandes
@calvinlfer
Oct 03 14:08

  def yourName3: Program[Unit] = for {
    name  <- getName
    _     <- writeLine(s"Hello $name, good to meet you")
    u     <- point(())
  } yield u

Literal translation again :P
Arbër Shabhasa
@ashabhasa
Oct 03 14:09

 def yourName3: Program[Unit] = for {
    name <- getName
    _    <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

return the value
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:11
We're done our program so return it
Damian Albrun
@insdami
Oct 03 14:11
thunk()
Phong Nguyen
@phongngtuan
Oct 03 14:12
interpret that
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:12
interpret
Muhammad Farag
@MuhammadFarag
Oct 03 14:12
interpret it?
:point_up:
Phong Nguyen
@phongngtuan
Oct 03 14:15
point
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:15
Program.point(Nil)
Muhammad Farag
@MuhammadFarag
Oct 03 14:18
Unless I want to confuse @calvinlfer :wink:
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:18
:P

  def ageExplainer2: Program[Unit] = {
    def askForAge: Program[Int] = for {
      _               <- writeLine("What is your age?")
      potentialAge    <- readLine
      optAge          =  scala.util.Try(potentialAge.toInt).toOption
      age             <- optAge.fold(
                            ifEmpty = writeLine("That's not an age, try again") *> askForAge)(
                            f = age => Program.point(age)
                         )
    } yield age

    def printAge(age: Int): Program[Unit] =
      if (age < 12)       writeLine("You are a kid")
      else if (age < 20)  writeLine("You are a teenager")
      else if (age < 30)  writeLine("You are a grownup")
      else if (age < 50)  writeLine("You are an adult")
      else if (age < 80)  writeLine("You are a mature adult")
      else if (age < 100) writeLine("You are elderly")
      else                writeLine("You are probably lying.")

    for {
      age <- askForAge
      _   <- printAge(age)
    } yield ()
  }

I broke it into two parts and combined them
Damian Albrun
@insdami
Oct 03 14:23

def ageExplainer2: Program[Unit] =
    for {
      _   <- writeLine("What is your age?")
      maybeAge <- readLine.map(ageStr => scala.util.Try(ageStr.toInt).toOption)
      _ <- maybeAge match {
        case None => writeLine("That's not an age, try again")
        case Some(age) =>
          if (age < 12) writeLine("You are a kid")
        else if (age < 20) writeLine("You are a teenager")
        else if (age < 30) writeLine("You are a grownup")
        else if (age < 50) writeLine("You are an adult")
        else if (age < 80) writeLine("You are a mature adult")
        else if (age < 100) writeLine("You are elderly")
        else writeLine("You are probably lying.")
      }
    } yield ()

Calvin Lee Fernandes
@calvinlfer
Oct 03 14:23
@insdami you need to repeat on the None case
Damian Albrun
@insdami
Oct 03 14:23
Ops
Thanks!
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:24

writeLine("That's not an age, try again") *>  ageExplainer2

Damian Albrun
@insdami
Oct 03 14:48

type Exceptional[A] = IO[Exception, A]

Alex Salguero
@hasumedic
Oct 03 14:48
type Exceptional[A] = IO[Exception, A]
Damian Albrun
@insdami
Oct 03 14:48

type Task[A] = IO[Throwable, A]

Muhammad Farag
@MuhammadFarag
Oct 03 14:49
throwable is not a checked exception?
Damian Albrun
@insdami
Oct 03 14:49
Throwable includes fatal exceptions?
Arbër Shabhasa
@ashabhasa
Oct 03 14:49
RuntimeException
type Infallible[A] = IO[Nothing, A]
Ahmad Ragab
@ASRagab
Oct 03 14:50
type Infallible[A] = IO[Unit, A]
Thomas Boeglin
@tboeglin
Oct 03 14:50
type Infallible[A] = IO[Nothing, A]
Jens Hoffmann
@jchoffmann
Oct 03 14:50
type Infallible[A] = IO[Nothing, A]
Damian Albrun
@insdami
Oct 03 14:52

type Unproductive[E] = IO[E, Nothing]

Ahmad Ragab
@ASRagab
Oct 03 14:52
type Unproductive[E] = IO[E, Nothing]
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:52

type Unending = IO[Nothing, Nothing]

Muhammad Farag
@MuhammadFarag
Oct 03 14:52
type Unending = IO[Nothing, Nothing]
Calvin Lee Fernandes
@calvinlfer
Oct 03 14:52
can't do nothin!
Alex Salguero
@hasumedic
Oct 03 14:54
:thumbsup:
Jens Hoffmann
@jchoffmann
Oct 03 14:58
what's the difference again between IO.now and IO.point ?
Damian Albrun
@insdami
Oct 03 14:59
when would you prefer to use now over point?
Jens Hoffmann
@jchoffmann
Oct 03 14:59
cool thanks
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:03

  def ifThenElse[E, A](bool: IO[E, Boolean])(
    ifTrue: IO[E, A], ifFalse: IO[E, A]): IO[E, A] =
    for {
      b <- bool
      res <- if (b) ifTrue else ifFalse
    } yield res

@jdegoes what's the FixMeat the top?
ah okay!

  def decode2[E](read: IO[E, Byte]): IO[E, Either[Byte, Int]] =
    for {
      b   <-  read
      res <-  if (b < 0) IO.point(Left(b))
              else for {
                shift8  <- read.map(_.toInt << 8)
                shift16 <- read.map(_.toInt << 16)
                shift24 <- read.map(_.toInt << 24)
              } yield Right(b.toInt + shift8 + shift16 + shift24)
    } yield res

Calvin Lee Fernandes
@calvinlfer
Oct 03 15:08

  def repeatN2[E](n: Int, action: IO[E, Unit]): IO[E, Unit] =
    if (n <= 0) IO.now(())
    else action.flatMap(_ => repeatN2(n - 1, action))

no
io1 <* io2 is not the same as io1
Arbër Shabhasa
@ashabhasa
Oct 03 15:10
no it evalueate io2 effect
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:10
you execute both programs and take the return value of io1
Jens Hoffmann
@jchoffmann
Oct 03 15:12
can someone c/p Ex 10?
Damian Albrun
@insdami
Oct 03 15:13

def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if(i < 0 || i >= a.length) IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")"))
    else IO.point(a(i))

Calvin Lee Fernandes
@calvinlfer
Oct 03 15:13

  def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if (i < 0 || i >= a.length) IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")"))
    else IO.point(a(i))

@jchoffmann which section?
Jens Hoffmann
@jchoffmann
Oct 03 15:14
@calvinlfer the solution for Exercise 10, left fish
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:14

  //
  // EXERCISE 10
  //
  // Translate the following expression into its `flatMap` equivalent.
  //
  IO.point(42) *> IO.point(19)

  IO.point(42).flatMap(_ => IO.point(19))

Jens Hoffmann
@jchoffmann
Oct 03 15:14
hm yeah should be simple but somehow see an error, maybe it's just IntelliJ
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:17
just make sure it compiles (I'm using ./sbt and ~compile)

  //
  // EXERCISE 6
  //
  // Recover from a division by zero error by returning `-1`.
  //
  val recovered1: IO[Nothing, Int] =
  divide1(100, 0).attempt.map {
    case Left(error) => -1
    case Right(value) => value
  }

Damian Albrun
@insdami
Oct 03 15:17
@jdegoes Is it possible to do this? Meaning when you have different errors

for {
x  <- doX : IO[String, Int]
y <- doY(x) : IO[Int, String]
} yield y

Jens Hoffmann
@jchoffmann
Oct 03 15:18
@calvinlfer yeah also seeing it in sbt
Damian Albrun
@insdami
Oct 03 15:18
:thumbsup:

  val combined: IO[Nothing, Int] = firstChoice orElse secondChoice

Calvin Lee Fernandes
@calvinlfer
Oct 03 15:21

val combined: IO[Nothing, Int] = firstChoice orElse secondChoice

try - catch - flip table
Jens Hoffmann
@jchoffmann
Oct 03 15:22
:)
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:22
:wink:
nope
it cant
E= Nothing
Alex Salguero
@hasumedic
Oct 03 15:23
Nope, the return type is Nothing
Damian Albrun
@insdami
Oct 03 15:23
secondChoice is the fallback
Alex Salguero
@hasumedic
Oct 03 15:23
orElse is handling the failure of the first program
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:27

def putStrLn(line: String): IO[Nothing, Unit] = IO.sync(println(line))
val getStrLn: IO[Nothing, String] = IO.sync(readLine())

Ahmad Ragab
@ASRagab
Oct 03 15:28
no
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:28
nope
no
throwing exceptions break totality
Arbër Shabhasa
@ashabhasa
Oct 03 15:30
does scalazi help avoid this kind of programming?
Phong Nguyen
@phongngtuan
Oct 03 15:32
is IO.sync and IO.point interchangable?
Jens Hoffmann
@jchoffmann
Oct 03 15:34

  def readFile(file: File): IO[Exception, List[String]] =
    IO.syncException(Source.fromFile(file).getLines.toList)

Ahmad Ragab
@ASRagab
Oct 03 15:39

def nanoTime: IO[Nothing, Long] = IO.sync(System.nanoTime())

Damian Albrun
@insdami
Oct 03 15:40

  def sysExit(code: Int): IO[Exception, Unit] = IO.syncException(System.exit(code))

Alex Salguero
@hasumedic
Oct 03 15:41

def sysExit(code: Int): IO[SecurityException, Unit] = IO.syncCatch(System.exit(code)) {
    case e : SecurityException => e
  }

John A. De Goes
@jdegoes
Oct 03 15:41
https://docs.oracle.com/javase/7/docs/api/java/lang/System.html#exit(int)
Damian Albrun
@insdami
Oct 03 15:43

def arrayUpdate[A](a: Array[A], i: Int, f: A => A): IO[ArrayIndexOutOfBoundsException, Unit] =
    IO.syncCatch(a.update(i, f(a(i)))) {
      case e : ArrayIndexOutOfBoundsException => e
    }

Thomas Boeglin
@tboeglin
Oct 03 15:43
why not IO[SecurityException, Nothing] for sysExit ?
Arbër Shabhasa
@ashabhasa
Oct 03 15:44
Does it even compile with that type signature?
Alex Salguero
@hasumedic
Oct 03 15:44
It doesn’t compile with Nothing
Jens Hoffmann
@jchoffmann
Oct 03 15:44
but how do you make sysExit compile with nothing?
Thomas Boeglin
@tboeglin
Oct 03 15:44
is there an IO.never like in cats ?
Arbër Shabhasa
@ashabhasa
Oct 03 15:44

def sysExit(code: Int): IO[Throwable, Nothing] = IO.syncCatch(System.exit(code)){case e: SecurityException => e}.map(_ => Nothing)

Damian Albrun
@insdami
Oct 03 15:46
What does IO.terminate do?
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:46
@jdegoes what's the diff between terminate and never?
they both have the same type signature which was why i was getting confused
ah makes sense :+1:
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:52

  def sleep(l: Long, u: TimeUnit): IO[???, Unit] = IO.async { callback: Callback[Nothing, Unit] =>
    scheduledExecutor.schedule(
      new Runnable {
        def run(): Unit = callback(ExitResult.Completed(()))
      }, l, u
    )
  }

ops

  def sleep(l: Long, u: TimeUnit): IO[Nothing, Unit] = IO.async { callback: Callback[Nothing, Unit] =>
    scheduledExecutor.schedule(
      new Runnable {
        def run(): Unit = callback(ExitResult.Completed(()))
      }, l, u
    )
  }

Damian Albrun
@insdami
Oct 03 15:56
is it necessary to fix the Callback type?
callback: Callback[Nothing, Unit] that bit
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 03 15:57
:P
Damian Albrun
@insdami
Oct 03 16:00

def playGame2: IO[Exception, Unit] =
    for {
      number <- IO.syncException(scala.util.Random.nextInt(5))
      maybeGuess <- IO.point(scala.util.Try(scala.io.StdIn.readLine().toInt).toOption)
      _ <- maybeGuess match {
        case None => IO.sync(println("You didn't enter an integer!")) *> playGame2
        case Some(guess) if (guess == number) => IO.sync(println("You guessed right! The number was " + number))
        case _ => IO.sync(println("You guessed wrong! The number was " + number))
      }
    } yield ()

Ahmad Ragab
@ASRagab
Oct 03 16:01

  def playGame2(seed: Int): IO[Exception, Unit] =
    for {
      number <- IO.sync(scala.util.Random.nextInt(seed))
      _      <- putStrLn("Enter a number between 0 - 5: ")
      line   <- getStrLn
      _      <- scala.util.Try(scala.io.StdIn.readLine().toInt).toOption match {
                  case None =>
                    println("You didn't enter an integer!")
                    playGame1
                  case Some(guess) if (guess == number) =>
                    println("You guessed right! The number was " + number)
                  case _ =>
                    println("You guessed wrong! The number was " + number)
                }

    } yield ()

Damian Albrun
@insdami
Oct 03 16:01
:thumbsup:
Ahmad Ragab
@ASRagab
Oct 03 16:02
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 03 16:04

  def playGame2: IO[Exception, Unit] = {
    def guess(providedGuess: Int, randomNumber: Int): IO[Nothing, Unit] =
      if (providedGuess == randomNumber) IO.sync(s"You guessed right! The number was $randomNumber")
      else IO.sync(s"You guessed wrong! The number was $randomNumber")

    for {
      randomNumber <- IO.sync(scala.util.Random.nextInt(5))
      _            <- IO.sync(println("Enter a number between 0 - 5: "))
      stringInt    <- IO.sync(readLine())
      optInt       =  scala.util.Try(stringInt.toInt).toOption
      _            <- optInt.fold(
                        IO.sync(println("You didn't enter an integer!")) *> playGame2)(
                        validInt => guess(validInt, randomNumber)
                      )
    } yield ()
  }

damn i lost :(
haha
Jens Hoffmann
@jchoffmann
Oct 03 16:10
@ASRagab you're missing a fish where you recurse (and use playGame2 instead of playGame1)
Ahmad Ragab
@ASRagab
Oct 03 16:16
@jchoffmann yup, yup...many thanks!
Ahmad Ragab
@ASRagab
Oct 03 16:21

  def playGame2(seed: Int): IO[Exception, Unit] =
    for {
      number <- IO.sync(scala.util.Random.nextInt(seed))
      _      <- putStrLn(s"Enter a number between 0 - $seed: ")
      line   <- getStrLn
      _      <- scala.util.Try(line.toInt).toOption match {
                  case None =>
                    putStrLn("You didn't enter an integer!") *> playGame2(seed)
                  case Some(guess) if guess == number =>
                    putStrLn("You guessed right! The number was " + number)
                  case _ =>
                    putStrLn("You guessed wrong! The number was " + number)
                }
    } yield ()

Ahmad Ragab
@ASRagab
Oct 03 16:29
@jdegoes maybe when we get back from lunch, I saw your talk about Scalaz 8, which was really informative actually, how much (as a potential consumer of the library) will change syntactically or semantically?
Muhammad Farag
@MuhammadFarag
Oct 03 17:11
Do you think that things will change much for Scalaz with the next iteration of Scala?
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:11
+1 for changes to ap :D
Ahmad Ragab
@ASRagab
Oct 03 17:11
good to know
sken
@floreslorca
Oct 03 17:11
whats the ETA for scalaz8?
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:12
Soon (TM)
James Warren
@jameswarren
Oct 03 17:17
which failure is returned if both fail?
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:17
what's that Fiber thing :eyes:
:+1:
sken
@floreslorca
Oct 03 17:20
so fiber != green thread?
oh ok
i see
Muhammad Farag
@MuhammadFarag
Oct 03 17:21
is green threads like go routines?
sken
@floreslorca
Oct 03 17:21
so go
yes
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:21
cool :D
Ahmad Ragab
@ASRagab
Oct 03 17:23
interesting it returns

res13: Either[Unit,Unit] = Right(())

John A. De Goes
@jdegoes
Oct 03 17:24
https://www.scala-lang.org/api/2.12.3/scala/concurrent/Future$.html
Thomas Boeglin
@tboeglin
Oct 03 17:27
use attempt ?
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:31
Is it because of the Fiber model that you can do this interruption?
can you elaborate more
is it correct to say the following:
A Fiber is essentially interpreting a data structure and interrupting a fiber effectively means that it will stop interpreting that data structure.
:+1:
sken
@floreslorca
Oct 03 17:35
is it idiomatic to call interrupts that way or is there a short hand for that use case?
sken
@floreslorca
Oct 03 17:42
that flatMap respects the monad law where A happens before B?
yes
Arbër Shabhasa
@ashabhasa
Oct 03 17:44
In that case if you do join you will block right?
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:44
semantically
Alex Salguero
@hasumedic
Oct 03 17:49
Are there any recommended reads for this Fiber concurrency model?
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:49

  //
  // EXERCISE 1
  //
  // Race `leftContestent1` and `rightContestent1` using the `race` method of
  // `IO` to see which one finishes first with a successful value.
  //
  val leftContestent1 = IO.never
  val rightContestent1 = putStrLn("Hello World")
  val raced1 = leftContestent1 race rightContestent1

right contestent1
Damian Albrun
@insdami
Oct 03 17:50

  val raced2: IO[Exception, Unit] = leftContestent2 race rightContestent2

Calvin Lee Fernandes
@calvinlfer
Oct 03 17:50

  val leftContestent2: IO[Exception, Nothing] = IO.fail(new Exception("Uh oh!"))
  val rightContestent2: IO[Exception, Unit] = IO.sleep(10.milliseconds) *> putStrLn("Hello World")
  val raced2: IO[Exception, Unit] = leftContestent2 race rightContestent2

right
Damian Albrun
@insdami
Oct 03 17:51

  val par1: IO[Nothing, (Int, Int)] = leftWork1 par rightWork1

Calvin Lee Fernandes
@calvinlfer
Oct 03 17:52

val workersInParallel: IO[Nothing, List[Int]] = IO.parAll(workers)

sken
@floreslorca
Oct 03 17:52
im finding this more intuitive than cats effect
very nice
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:53

  def myPar[E, A, B](left: IO[E, A], right: IO[E, B]): IO[E, (A, B)] =
    for {
      lFiber <- left.fork
      rFiber <- right.fork
      l      <- lFiber.join
      r      <- rFiber.join
    } yield (l, r)

you can also use seqWith right?
ahh
we dont interrupt?
sken
@floreslorca
Oct 03 17:55

    for {
      left <- left.fork
      right <- right.fork
      v <- left.zip(right)
    } yield v

Damian Albrun
@insdami
Oct 03 17:55
nice!
sken
@floreslorca
Oct 03 17:55
oh ok
Calvin Lee Fernandes
@calvinlfer
Oct 03 17:55
how do you fix the drawback?
ah okay
Ref as in single mutable cell?
Ahmad Ragab
@ASRagab
Oct 03 18:01
it is Atomic?
woo!
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:04
that doesnt compile :(
i think the type is wrong
it's just Fiber[Nothing, Int]
do you need to wrap it in an IO?
Thomas Boeglin
@tboeglin
Oct 03 18:04

  val interrupted2: IO[Nothing, Unit] =
    for {
      fiber1 <- fibonacci(10).fork
      fiber2 <- fibonacci(20).fork
      both   <- IO.sync(fiber1.zipWith(fiber2)((x,y) => (x + y)))
      _      <- both.interrupt
    } yield ()

Calvin Lee Fernandes
@calvinlfer
Oct 03 18:05
why do we need the IO.now?
ah okay
John A. De Goes
@jdegoes
Oct 03 18:06
val timedout: IO[Nothing, Option[Int]] = fibonacci(100) ?
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:08

def fibonacci(n: Int): IO[Nothing, Int] =
    if (n <= 1) IO.now(n)
    else fibonacci(n - 1).seqWith(fibonacci(n - 2))(_ + _)
                         .timeout[Int](z = -1)(f = identity)(duration = 60.seconds)

Ahmad Ragab
@ASRagab
Oct 03 18:08
So are there enough primitives to do a lot of things that you might use Akka for?
toxicafunk
@toxicafunk
Oct 03 18:09
go routines used to be called co-routines before go was a thing
Devesh Shetty
@devesh-shetty
Oct 03 18:10
in kotlin, it is still called co-routines
toxicafunk
@toxicafunk
Oct 03 18:10
good to know
Phong Nguyen
@phongngtuan
Oct 03 18:10
is there something similar to race but let me decide what to do with the loser e.g. i want to look at the return value (not exception)
toxicafunk
@toxicafunk
Oct 03 18:11
doesn't raceBoth do that?
Phong Nguyen
@phongngtuan
Oct 03 18:11
wouldn't raceBoth terminate the loser?
only i know which side won
sken
@floreslorca
Oct 03 18:12
is there something as zio-io?
Muhammad Farag
@MuhammadFarag
Oct 03 18:12
:open_mouth: no more Akka
Ahmad Ragab
@ASRagab
Oct 03 18:12
Any => Unit!
sken
@floreslorca
Oct 03 18:12
i,e reading from tcp or file
Damian Albrun
@insdami
Oct 03 18:12
is it production ready? I really want to use this
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:12
the only thing ZIO is missing is distributed computations across JVMs
Phong Nguyen
@phongngtuan
Oct 03 18:13
ah, cool (y)
toxicafunk
@toxicafunk
Oct 03 18:13
but they're coming (scalaz-distributed)
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:13
something like Haskell's transient
I'm eagerly awaiting that :D
Muhammad Farag
@MuhammadFarag
Oct 03 18:13
Oh! yes… you are probably right @calvinlfer , it is not just the actor system it is the transperant disturbted system concept
Jens Hoffmann
@jchoffmann
Oct 03 18:16
what's the difference between race and raceBoth? is it that with the latter you know who won?
Ahmad Ragab
@ASRagab
Oct 03 18:16
in raceBoth you get back both results
I believe
toxicafunk
@toxicafunk
Oct 03 18:17
i've mostly listening until now (for various reasons), I'll try to do the excercises by myself but if someone has a gist or something of what has been discussed so far, i'd appreciate u sharing them for comparison
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:17

final def race[E1 >: E, A1 >: A](that: IO[E1, A1]): IO[E1, A1] = ???
final def raceBoth[E1 >: E, B](that: IO[E1, B]): IO[E1, Either[A, B]] = ???

I'll post my solutions in a gist as soon as it's done and send it here
sken
@floreslorca
Oct 03 18:18
does zio has stacks/buffers/queues and atomic vars and so on? are we going to see how to use those?
toxicafunk
@toxicafunk
Oct 03 18:18
thx
there is zio-queue for sure
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:18
I know there's a Ref from looking at the docs
so you have atomics
Jens Hoffmann
@jchoffmann
Oct 03 18:19
so race means that types are related and it returns the first value that wins
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:19
yeah that's right
race allows homogenous computations to be raced
Jens Hoffmann
@jchoffmann
Oct 03 18:19
and raceBoth means that types can be unrelated, and it returns the first value that wins in the Either
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:19
raceBoth allows hetrogenous computations to be raced
Jens Hoffmann
@jchoffmann
Oct 03 18:19
nice summary, thanks @calvinlfer
got it
toxicafunk
@toxicafunk
Oct 03 18:19
https://www.signifytechnology.com/blog/2018/09/zio-queue-by-wiem-zine-el-abidine
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:19
:beers:
toxicafunk
@toxicafunk
Oct 03 18:20
ah i thought raceBoth returned both results
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:21
you would have to use par or parAll for that
Jens Hoffmann
@jchoffmann
Oct 03 18:21
yeah was thinking about the difference between race* and par*
toxicafunk
@toxicafunk
Oct 03 18:21
btw: the slides posted from wiem-zine are for zio-queue but are also a nice intro to ZIO
hardlianotion
@hardlianotion
Oct 03 18:21
nice
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:21
is there a video for that presentation?
John A. De Goes
@jdegoes
Oct 03 18:22
l.race(r) == l.raceBoth(r).map(_.merge)
Possibly raceBoth should be called raceEither. The both comes from the fact that both types appear in the output, whereas just one type does for race.
Jens Hoffmann
@jchoffmann
Oct 03 18:23
yes that's what confused me
crystal clear now
toxicafunk
@toxicafunk
Oct 03 18:24
def raceEither = raceBoth and all is well :smile:
Phong Nguyen
@phongngtuan
Oct 03 18:24
l.race(r) == l.raceBoth(r).map(_.merge)not exactly right? RHS seems to always return r...
toxicafunk
@toxicafunk
Oct 03 18:25
is that what LHS does?
Phong Nguyen
@phongngtuan
Oct 03 18:25
LHS could either give an A from l or from r
RHS will have both A from l and A from r but throw l away
sken
@floreslorca
Oct 03 18:26
@jdegoes when it comes to interop between monix/cats/zio how does that go?
does the types from cat theory give you guarantees that they will work the same when used by other higher libraries like fs2?
Jens Hoffmann
@jchoffmann
Oct 03 18:27
@phongngtuan no it's correct. raceBoth yields a IO[E1, Either[A, B]
race implies that A == B, so you have an IO[E1, Either[A, A]]
And you just map and merge the Either since types are the same
Phong Nguyen
@phongngtuan
Oct 03 18:28
yeah but the A in Left and Right could have different value, no?
Ahmad Ragab
@ASRagab
Oct 03 18:28
and if A != B it does a dangerous upcast thing, which the compiler helpfully warns you about
toxicafunk
@toxicafunk
Oct 03 18:29
but u can't ise race if A != B
Ahmad Ragab
@ASRagab
Oct 03 18:30
@toxicafunk you shouldn't, but you can technically.
Jens Hoffmann
@jchoffmann
Oct 03 18:30
raceBoth yields either a Left(a) or Right(a)
merge just picks the a in both cases and returns it
Ahmad Ragab
@ASRagab
Oct 03 18:31

 IO.point((Math.pow(4, 2) % 10)) race IO.point(5 + 10)
<console>:29: warning: a type was inferred to be `AnyVal`; this may indicate a programming error.
       IO.point((Math.pow(4, 2) % 10)) race IO.point(5 + 10)

Calvin Lee Fernandes
@calvinlfer
Oct 03 18:32
is it correct to say that something like cats effect abstracts over the effect system?
sken
@floreslorca
Oct 03 18:33
thats really nice. i imagine that must be hard on OOP
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:33
haha fair enough :P
Phong Nguyen
@phongngtuan
Oct 03 18:33
@ASRagab @toxicafunk @jchoffmann you're all right, i was thinking par
sken
@floreslorca
Oct 03 18:34
is it more gentle with intellisense?
Ahmad Ragab
@ASRagab
Oct 03 18:34
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:42
:scream:
runs-away
sken
@floreslorca
Oct 03 18:43
you are get sec error?
toxicafunk
@toxicafunk
Oct 03 18:43
what if we add a second finally?
John A. De Goes
@jdegoes
Oct 03 18:43

  {
    println("Started")
    try {
      try throw new Error("Primary error")
      finally throw new Error("Secondary error")
    } catch {
      case e : Error => println(e)
    }
    println("Ended")
  }

Ahmad Ragab
@ASRagab
Oct 03 18:44
"Secondary Error"
sken
@floreslorca
Oct 03 18:44
secondary
Ahmad Ragab
@ASRagab
Oct 03 18:44
Endeded
yes
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:44
2
Ahmad Ragab
@ASRagab
Oct 03 18:44
2
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:44
1
Ahmad Ragab
@ASRagab
Oct 03 18:44
1
2 > 1
sken
@floreslorca
Oct 03 18:45
on the side effects planet
Pierangelo Cecchetto
@pierangeloc
Oct 03 18:45
suppressed
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:45
eaten
sken
@floreslorca
Oct 03 18:45
wondering arround
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:49
Nothing
Alex Salguero
@hasumedic
Oct 03 18:49
Nothing?
Pierangelo Cecchetto
@pierangeloc
Oct 03 18:49
Nothing
sken
@floreslorca
Oct 03 18:54
wheres the FileHandle type coming from?
Phong Nguyen
@phongngtuan
Oct 03 18:55
how can one tell if an IO is interuptible or not?
Arbër Shabhasa
@ashabhasa
Oct 03 18:55
what happens if your program yields the fileHandle. and you flatMap over it?
Calvin Lee Fernandes
@calvinlfer
Oct 03 18:56
file handle to a closed file though
Arbër Shabhasa
@ashabhasa
Oct 03 18:57
thanks
Damian Albrun
@insdami
Oct 03 18:58

val tryCatch2: IO[Exception, Unit] =
    IO.fail(new Exception("Uh oh"))
      .bracket(_ => IO.sync(println("On the way out...")))(IO.now)

  def readFile2(file: File): IO[Exception, List[Byte]] =
    InputStream.openFile(file).bracket(_.close)(readAll(_, Nil))

trying to fix

[error]  found   : scalaz.zio.IO[Exception,Unit]
[error]  required: scalaz.zio.IO[Nothing,Unit]
[error]     InputStream.openFile(file).bracket(_.close)(readAll(_, Nil))

:D
Nice! It compiles!
Ahmad Ragab
@ASRagab
Oct 03 19:06
hmmm
how to make a partial function total
IT DOES!
toxicafunk
@toxicafunk
Oct 03 19:09
so fold is basically pattern matching
sken
@floreslorca
Oct 03 19:11
so ensuring is returing IO[E, A] but it will always be an E?
thanks
Calvin Lee Fernandes
@calvinlfer
Oct 03 19:14
nope
E=Nothing

  val incrementedBy10: IO[Nothing, Int] = for {
    ref       <- makeZero
    value     <- ref.get
    newValue  = value + 10
    _         <- ref.set(newValue)
  } yield newValue

Damian Albrun
@insdami
Oct 03 19:19

val incrementedBy102: IO[Nothing, Int] =
    for {
      ref   <- zero
      v     <- ref.update(_ + 10)
    } yield v

Alex Salguero
@hasumedic
Oct 03 19:19

val atomicallyIncrementedBy10: IO[Nothing, Int] = for {
    ref <- zero
    newValue <- ref.update(_ + 10)
  } yield newValue

Calvin Lee Fernandes
@calvinlfer
Oct 03 19:19

  // EXERCISE 3
  // Use update instead of get and set
  val atomicallyIncrementedBy10: IO[Nothing, Int] = for {
    ref       <- makeZero
    newValue  <- ref.update(existing => existing + 10): IO[Nothing, Int]
  } yield newValue

sken
@floreslorca
Oct 03 19:19
this is getting me a bit too excited
:D
Calvin Lee Fernandes
@calvinlfer
Oct 03 19:21

  // EXERCISE 4
  // Use modify to atomically increment the value but return the old value
  val atomicallyIncrementedBy10: IO[Nothing, Int] = for {
    ref       <- makeZero
    newValue  <- ref.modify(existing => (existing /*old*/, existing + 10 /*new*/)): IO[Nothing, Int]
  } yield newValue

Ahmad Ragab
@ASRagab
Oct 03 19:22
this is very similar to Clojure STM implementation
ooooh!
toxicafunk
@toxicafunk
Oct 03 19:23
Software Transaction Management
Muhammad Farag
@MuhammadFarag
Oct 03 19:23
Thank you :)
sken
@floreslorca
Oct 03 19:23
does zio implement queue with Ref?
is there such thing as queue in zio
Ahmad Ragab
@ASRagab
Oct 03 19:23
hot.
Jens Hoffmann
@jchoffmann
Oct 03 19:23
software transactional memory
toxicafunk
@toxicafunk
Oct 03 19:24
memory!!!
@floreslorca I put a link to a talk on scalaz-queue
aka zio-queue
https://www.signifytechnology.com/blog/2018/09/zio-queue-by-wiem-zine-el-abidine
sken
@floreslorca
Oct 03 19:25
thanks
Calvin Lee Fernandes
@calvinlfer
Oct 03 19:28

  // EXERCISE 2 use the `complete` method of `Promise` to complete a Promise constructed with `makeIntPromise`
  val completed1: IO[Nothing, Boolean] = for {
    promise               <- makeIntPromise
    completedSuccessfully <- promise.complete(42): IO[Nothing, Boolean]
  } yield completedSuccessfully

sken
@floreslorca
Oct 03 19:28

  val e: IO[Nothing, Boolean] = for {
    promise <- makeIntPromise
    completed <- promise.complete(5) 
  } yield completed

Damian Albrun
@insdami
Oct 03 19:28
once it's completed, can be changed?
sken
@floreslorca
Oct 03 19:28
what are use cases for promises?
Calvin Lee Fernandes
@calvinlfer
Oct 03 19:31


  // EXERCISE 3
  // use the error of Promise, try to complete a Promise with makeIntPromise. Explain your findings.
  val errored1: IO[Nothing, Boolean] =
    for {
      promise <- makeIntPromise
      completed <- promise.error(/* you don't have values of type Nothing so you cannot construct this program */)
    } yield completed

sken
@floreslorca
Oct 03 19:31

  val completed1: IO[Nothing, Boolean] =
    for {
      promise <- makeIntPromise
      completed <- promise.error(new Error("sorry"))
    } yield completed

intelli complains but this is correct right?
oh so intellij was right!
Calvin Lee Fernandes
@calvinlfer
Oct 03 19:32
hahaha
Alex Salguero
@hasumedic
Oct 03 19:32
:laughing:
Ahmad Ragab
@ASRagab
Oct 03 19:32
scala doesn't make it easy for them...
sken
@floreslorca
Oct 03 19:32
so when you create a promise, you have to tell it on the types that your promise can err?
very nice
Jens Hoffmann
@jchoffmann
Oct 03 19:33

    for {
      promise   <- Promise.make[Error, String]
      completed <- (promise.error(new Error) : IO[Nothing, Boolean])
    } yield completed

Calvin Lee Fernandes
@calvinlfer
Oct 03 19:33

  val errored2: IO[Nothing, Boolean] =
   for {
      promise <- Promise.make[Error, String]
      completed <- promise.error(new Error("boom!")): IO[Nothing, Boolean]
    } yield completed

sken
@floreslorca
Oct 03 19:35
so intterupt returns Nothing instead of Error?
toxicafunk
@toxicafunk
Oct 03 19:36
interrupt can return boolean or an exception
Calvin Lee Fernandes
@calvinlfer
Oct 03 19:36
the promise.interrupt will return a false?
toxicafunk
@toxicafunk
Oct 03 19:37
def interrupt(t: Throwable, ts: Throwable*)
what does this do?
toxicafunk
@toxicafunk
Oct 03 19:42
Promise sounds awesome!
sken
@floreslorca
Oct 03 19:43
So it allow do other things while you wait for the promise to be completed?
whats the difference between that and calling flatmap on an IO
ahh right
makes sense
i get it now :)
Ahmad Ragab
@ASRagab
Oct 03 19:57

  val handoff2: IO[Error, Int] =
    for {
      promise <- Promise.make[Error, Int]
      _       <- promise.error(new Error("Bad!")).delay(10 millis).fork
      v       <- promise.get
    } yield v

  val handoff3: IO[Error, Int] =
    for {
      promise <- Promise.make[Error, Int]
      _       <- promise.interrupt(new Error("Bad!")).delay(10 millis).fork
      v       <- promise.get
    } yield v

when I run these with handoff2.unsafeRun or handoff3.unsafeRun I get the error twice? I am doing something wrong
Ahmad Ragab
@ASRagab
Oct 03 20:02
yeah, I think it is just the log of the trace.
Jens Hoffmann
@jchoffmann
Oct 03 20:02
so akka-streams is obsolete, too? :D
sken
@floreslorca
Oct 03 20:02
isnt the second one throwing the error and then delaying 10 milli?
Damian Albrun
@insdami
Oct 03 20:03
can you have different strategies for back pressuring?
:thumbsup:
sken
@floreslorca
Oct 03 20:03
when suspended there are retries?
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:04

  val makeQueue: IO[Nothing, Queue[Int]] = Queue.bounded(10)

  val offered1: IO[Nothing, Unit] =
    for {
      queue <- makeQueue
      _     <- queue.offer(42)
    } yield ()

  val taken1: IO[Nothing, Int] =
  for {
    queue <- makeQueue
    _     <- queue.offer(42)
    value <- queue.take
  } yield value

Ahmad Ragab
@ASRagab
Oct 03 20:05
did you push this up? @jdegoes
lazy typer :(
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:06

  val offeredTaken1: IO[Nothing, (Int, Int)] =
    for {
      queue <- makeQueue
      _     <- queue.offer(42) *> queue.offer(42).fork
      v1    <- queue.take: IO[Nothing, Int]
      v2    <- queue.take: IO[Nothing, Int]
    } yield (v1, v2)

ah woops

  val offeredTaken1: IO[Nothing, (Int, Int)] =
    for {
      queue <- makeQueue
      _     <- (queue.offer(42) *> queue.offer(42)).fork
      v1    <- queue.take: IO[Nothing, Int]
      v2    <- queue.take: IO[Nothing, Int]
    } yield (v1, v2)

this was tricky :S

  val infiniteReader1: IO[Nothing, List[Int]] = {
    def repeatedlyOffer[A](element: A, times: Int, queue: Queue[A]): IO[Nothing, List[A]] =
      if (times == 0) IO.point(Nil)
      else for {
        _       <- queue.offer(element)
        listInt <- repeatedlyOffer(element, times - 1, queue)
      } yield listInt :+ element

    for {
      queue <- makeQueue
      _     <- (queue.take.forever: IO[Nothing, Nothing]).fork
      vs    <- repeatedlyOffer(element = 42, times = 100, queue = queue): IO[Nothing, List[Int]]
    } yield vs
  }

i didnt take muy lunch break
ahaha
sorry i couldnt resist
Arbër Shabhasa
@ashabhasa
Oct 03 20:10
Range.inclusive(1, 100).map(q.offer(_))
Damian Albrun
@insdami
Oct 03 20:11
Isn't it take?
:thumbsup:
sken
@floreslorca
Oct 03 20:12
wait
what was the solution for infinite
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:13
nope
Arbër Shabhasa
@ashabhasa
Oct 03 20:13
No because it will suspend
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:22

  val makeCounter: IO[Nothing, Int => IO[Nothing, Int]] =
    for {
      counter <- Ref(0)
      queue   <- Queue.bounded[(Int, Promise[Nothing, Int])](100)
                 // consume from the queue and update the counter and complete the promise to indicate
                 // we have finished with the element we have pulled from the queue
      _       <- queue.take
                      .flatMap{
                        case (completeWith, promise) =>
                          counter.update(existing => existing + completeWith) *> promise.complete(completeWith)
                      }
                      .forever
                      .fork: IO[Nothing, Fiber[Nothing, Nothing]]
    } yield { amount: Int =>
      for {
        promise <- Promise.make[Nothing, Int]
        _       <- queue.offer((amount, promise))
      } yield amount
    }

yay :D
Muhammad Farag
@MuhammadFarag
Oct 03 20:22
:clap:
sken
@floreslorca
Oct 03 20:26
i dont get the need of the promise
Ahmad Ragab
@ASRagab
Oct 03 20:26
@calvinlfer do you need promise.get in the yield for
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:27
the promise is used to indicate to the producer that the actor has processed the producer's work
sken
@floreslorca
Oct 03 20:27
i see, thanks
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:27
what you are yielding is a way for work to get into the purely functional actor
sken
@floreslorca
Oct 03 20:27
i thought the queue was doing it for me already
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:28
ah damn
my mistake

  val makeCounter: IO[Nothing, Int => IO[Nothing, Int]] =
    for {
      counter <- Ref(0)
      queue   <- Queue.bounded[(Int, Promise[Nothing, Int])](100)
                 // consume from the queue and update the counter and then complete the promise to indicate
                 // we have finished with the element we have pulled from the queue
      _       <- queue.take
                      .flatMap{
                        case (completeWith: Int, promise: Promise[Nothing, Int]) =>
                          counter.update(existing => existing + completeWith) *> promise.complete(completeWith)
                      }
                      .forever
                      .fork: IO[Nothing, Fiber[Nothing, Nothing]]
    } yield { amount: Int =>
      for {
        promise <- Promise.make[Nothing, Int]
        _       <- queue.offer((amount, promise))
        newValue <- promise.get
      } yield newValue
    }

good catch @ASRagab
sken
@floreslorca
Oct 03 20:29
wow thats such an elaborate thing that is doing in such small code
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:30
:smiley_cat:
Damian Albrun
@insdami
Oct 03 20:37
what about fatal exceptions?
Phong Nguyen
@phongngtuan
Oct 03 20:39
why do monix and future require an ExecutionContext but ZIO doesn't?
toxicafunk
@toxicafunk
Oct 03 20:39
ZIO requires an RTS
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:40
RTS = RunTime System?
toxicafunk
@toxicafunk
Oct 03 20:40
yes, we extend it directly or via App
how do we make MyRTS?
thx :)
i usually extend the object with RTS
sken
@floreslorca
Oct 03 20:44
i dont get unsafeRUnSync in RTS.
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:44
@jdegoes is it MyRTS.unsafeRunSync(putStrLn("Hello world")): ExitResult[java.io.IOException, Unit]
sken
@floreslorca
Oct 03 20:45
oh its myrts
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:45
thanks :)
sken
@floreslorca
Oct 03 20:45
so this should be something that is run only once in an entire application
and that you should define once?
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:45
end-of-the-world!
scala.zio.App?
sken
@floreslorca
Oct 03 20:46
ZioApp nice
toxicafunk
@toxicafunk
Oct 03 20:47
Zapp
the runtime stops
sken
@floreslorca
Oct 03 20:48
1
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:48
non-zero
sken
@floreslorca
Oct 03 20:48
yea
toxicafunk
@toxicafunk
Oct 03 20:48
0 is everything is ok
anything else otherwise
Damian Albrun
@insdami
Oct 03 20:51
If I had ensuring that'd be run when my program is kill, right?
that's neat
Calvin Lee Fernandes
@calvinlfer
Oct 03 20:51

  // Exercise 4
  // Implement a purely functional application using ZIO's App
  object MyApp extends scalaz.zio.App {
    override def run(args: List[String]): IO[Nothing, MyApp.ExitStatus] = {
      val core = for {
        _     <- putStrLn("Hello there!")
        name  <- getStrLn
        _     <- putStrLn(s"Hello $name")
      } yield ()

      core.redeemPure(
        err = _ => ExitStatus.ExitNow(1),
        succ = _ => ExitStatus.ExitNow(0)
      )
    }
  }

sken
@floreslorca
Oct 03 20:52
this was probably explained already, whats the difference between IO.sync and IO.point?
Pierangelo Cecchetto
@pierangeloc
Oct 03 20:52
no need of shutdown hooks anymore :muscle:
sken
@floreslorca
Oct 03 20:53
is the console package actually in scala zio?
cool. i thought it was written somewhere
Damian Albrun
@insdami
Oct 03 21:04
wow && is mind blowing
toxicafunk
@toxicafunk
Oct 03 21:04
composition composition COMPOSITION!!!
sken
@floreslorca
Oct 03 21:05
i have seen implementations of pacers and they are ridiculously complicated
cant believe oyu get that this way so simple
Jens Hoffmann
@jchoffmann
Oct 03 21:07
what is the first type for again in the schedule?
Calvin Lee Fernandes
@calvinlfer
Oct 03 21:07
can you do 5 rapid, wait 1, 5 rapid, wait 1, ...?

def fiveTimesThenEverySecond = fiveTimes andThen everySecond andThen fiveTimesThenEverySecond

Does that encode my intended behavior?
ohhh
sken
@floreslorca
Oct 03 21:12
lmao scheduler could be a library on its own
Muhammad Farag
@MuhammadFarag
Oct 03 21:12
agree
Calvin Lee Fernandes
@calvinlfer
Oct 03 21:12
SCIO :wink:
sken
@floreslorca
Oct 03 21:12
@jdegoes is it posible to use DateTime from java?
Ahmad Ragab
@ASRagab
Oct 03 21:13
Parser using Chron!!
sken
@floreslorca
Oct 03 21:15
takes double
toxicafunk
@toxicafunk
Oct 03 21:18
it requires a factor?
sken
@floreslorca
Oct 03 21:20

  val jittered = 
    Schedule
      .exponential(10.milliseconds)
      .whileValue(_ == 60.second)
      .andThen(Schedule.spaced(60.seconds) && Schedule.recurs(100))
      .jittered

  /**
   * A schedule that always recurs, but will wait a certain amount between
   * repetitions, given by `base * factor.pow(n)`, where `n` is the number of
   * repetitions so far.
   */

ok
Damian Albrun
@insdami
Oct 03 21:22
def exponential(base: Duration, factor: Double = 2.0): Schedule[Any, Duration]
sken
@floreslorca
Oct 03 21:23
ok
Ahmad Ragab
@ASRagab
Oct 03 21:24
jittered take a min and Max
can that be helpful
Damian Albrun
@insdami
Oct 03 21:25

    ((Schedule.exponential(10.millis) && Schedule.duration(60.seconds)) andThen (Schedule.spaced(60.seconds) && Schedule.recurs(100))).jittered

sken
@floreslorca
Oct 03 21:25
that does more or liess tha same as mine
how do you retrevie de duration being used in expo
Alex Salguero
@hasumedic
Oct 03 21:26

(Schedule.exponential(10.milliseconds).untilValue(_.gt(60.seconds)) andThen
      (Schedule.spaced(60.seconds) && Schedule.recurs(100))
    ).jittered

sken
@floreslorca
Oct 03 21:27
so expo is not generating n schedulers.spaced(d+m)
toxicafunk
@toxicafunk
Oct 03 21:27
there's a reconsider :smile:
Calvin Lee Fernandes
@calvinlfer
Oct 03 21:29
60s
toxicafunk
@toxicafunk
Oct 03 21:29
Schedule.exponential(10.millisecond).whileValue(_ < 60.seconds)
sken
@floreslorca
Oct 03 21:29
that makes more sense
because you could do the other with &&
Either[Duration, (int, int)]
Calvin Lee Fernandes
@calvinlfer
Oct 03 21:32
collect
sken
@floreslorca
Oct 03 21:33
whats the*>?
toxicafunk
@toxicafunk
Oct 03 21:34
discard output and execute the thing to the right
Jens Hoffmann
@jchoffmann
Oct 03 21:34
fish operator
Alex Salguero
@hasumedic
Oct 03 21:34
a fish :) Or composition ditching the left result
Muhammad Farag
@MuhammadFarag
Oct 03 21:34
This is beautiful… Just crying tears of blood for the mess I went through to implement something simpler in Go :sob:
sken
@floreslorca
Oct 03 21:35
how is the second schedule
getting the results?
Pierangelo Cecchetto
@pierangeloc
Oct 03 21:37
are there ways to unit test them?
toxicafunk
@toxicafunk
Oct 03 21:38
the first sets the cadence but we ditch the results
the identity schedule just passes the A that goes into the schedule
Pierangelo Cecchetto
@pierangeloc
Oct 03 21:38
:thumbsup:
Muhammad Farag
@MuhammadFarag
Oct 03 21:39
polymorphic… You are really bringing all my Go pains… I am going to stop liking you now :joy:
Jens Hoffmann
@jchoffmann
Oct 03 21:39
could you quickly repeat what the difference is between retry and repeat?
Calvin Lee Fernandes
@calvinlfer
Oct 03 21:39

object zio_advanced {

}

:eyes:
hehe
Muhammad Farag
@MuhammadFarag
Oct 03 21:39
show off :D
Calvin Lee Fernandes
@calvinlfer
Oct 03 21:41
here's my work for today: https://gist.github.com/calvinlfer/197d3f4a7aa1365293946da93a24d484
toxicafunk
@toxicafunk
Oct 03 21:42
thx!
Jens Hoffmann
@jchoffmann
Oct 03 21:42
thanks a lot
Muhammad Farag
@MuhammadFarag
Oct 03 21:42
Thanks ::D
Jens Hoffmann
@jchoffmann
Oct 03 21:42
awesome
Arbër Shabhasa
@ashabhasa
Oct 03 21:42
thank you
Damian Albrun
@insdami
Oct 03 21:42
Thanks!
Calvin Lee Fernandes
@calvinlfer
Oct 03 21:42
thank you so much @jdegoes
Muhammad Farag
@MuhammadFarag
Oct 03 21:42
Awesome as usual @calvinlfer
sken
@floreslorca
Oct 03 21:42
does someone solved all the problems?
if so, can you please post a gist with them ;)
Devesh Shetty
@devesh-shetty
Oct 03 21:42
Thanks John!
Pontus Svenson
@xpontus
Oct 03 21:42
thanks!
Petar Djurkovic
@petar_djurkovic_twitter
Oct 03 21:43
Thanks!
Alex Salguero
@hasumedic
Oct 03 21:43
Amazing. Thank you @jdegoes!
Pierangelo Cecchetto
@pierangeloc
Oct 03 21:43
thank you @jdegoes , thank you guys!
John A. De Goes
@jdegoes
Oct 03 21:43
Go forth and spread the good news of ZIO. :wink:
Jens Hoffmann
@jchoffmann
Oct 03 21:53
regarding exercise 5 of zio_queue, i wasn't sure how to produce the List[Int] while at the same time offering them to the queue. Does this look alright?

  //
  // EXERCISE 5
  //
  // In a child fiber, read infinitely many values out of the queue and write
  // them to the console. In the main fiber, write 100 values into the queue.
  //
  val infiniteReader1: IO[Nothing, List[Int]] =
    for {
      queue <- makeQueue
      _     <- (queue.take.flatMap(i => putStrLn(i.toString).attempt.void).forever : IO[Nothing, Nothing]).fork
      vs    <- (IO.sequence((1 to 100).map(i => queue.offer(i).map(_ => i))) : IO[Nothing, List[Int]]) // <==
    } yield vs

(line with the vs)
_

John A. De Goes/functional-scala

toxicafunk
@toxicafunk
Oct 04 07:46
yes, it looks alright
I haven't noticed the second map
Jens Hoffmann
@jchoffmann
Oct 04 11:28
:thumbsup:
​∂t​​∂D​​=∇×H
cool didn't know gitter does latex :smile:
the things you learn in this course...
toxicafunk
@toxicafunk
Oct 04 11:50
2 questions about our build.sbt

    why are we targeting jdk 1.7?
    are we using the plugin for scalazzi? I don't see it there

This message was deleted
Jens Hoffmann
@jchoffmann
Oct 04 12:39
@jdegoes could we do a recap of zio_queue/Exercise 6 i.e. the actor construct? Both example and implementation?
John A. De Goes
@jdegoes
Oct 04 12:55
Yes, for sure.
@toxicafunk It could be improved. I tend to copy paste build files because I don't know SBT well. :laughing:
https://zoom.us/j/141207441
Jens Hoffmann
@jchoffmann
Oct 04 12:57
have you used mill?
toxicafunk
@toxicafunk
Oct 04 12:57
mostly I'm interested in setting up the plugin for scalazzi
:)
hardlianotion
@hardlianotion
Oct 04 13:01
mill seconded here. I feel I understand it better
Calvin Lee Fernandes
@calvinlfer
Oct 04 13:01
I updated my work from day 3: https://gist.github.com/calvinlfer/197d3f4a7aa1365293946da93a24d484
John A. De Goes
@jdegoes
Oct 04 13:01
We'll get started in a couple minutes.
Thanks for sharing Calvin!
Calvin Lee Fernandes
@calvinlfer
Oct 04 13:02
np happy to be of assistance :smile:
i also revisited schedules for my own understanding
@jchoffmann i tried to document exercise 6 so take a look at the comments to see if that helps
Jens Hoffmann
@jchoffmann
Oct 04 13:05
thanks @calvinlfer , great notes
Calvin Lee Fernandes
@calvinlfer
Oct 04 13:05
thank you :pray: :smiley_cat:
btw is there any scalaz apparel?
John A. De Goes
@jdegoes
Oct 04 13:08
Soon :)
There are stickers running around
Calvin Lee Fernandes
@calvinlfer
Oct 04 13:09
oooh
Alex Salguero
@hasumedic
Oct 04 13:09
:wave:
Calvin Lee Fernandes
@calvinlfer
Oct 04 13:14
oh that's pretty neat, the Promise is like a reference back to the sender (akka terms)
Jens Hoffmann
@jchoffmann
Oct 04 13:24
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 13:24
so elegant, impresses me everytime :D
Alex
@Fruzenshtein
Oct 04 13:25
I'm doing akka development exactly now
and it's horrible
that's exactly about me :D
toxicafunk
@toxicafunk
Oct 04 13:30
anyono can share the counterExample?
I get a weird error using IO.parAll
Jens Hoffmann
@jchoffmann
Oct 04 13:31

val counterExample: IO[Nothing, Int] =                                                                              
  for {                                                                                                             
    counter <- makeCounter                                                                                          
    _       <- IO.parAll(List.fill(100)(IO.traverse(0 to 100)(counter))) // 100 fibres in parallel calling increment
    value   <- counter(0)  // this is just for testing the counter and get the value out                            
  } yield value

toxicafunk
@toxicafunk
Oct 04 13:31
thx
Ahmad Ragab
@ASRagab
Oct 04 13:47
@jdegoes your note in Exercise 7 says to use seqWith but you mean zipWith, right?
no worries
Doesn't understand concurrency
Damian Albrun
@insdami
Oct 04 13:48
it can throw exceptions
Arbër Shabhasa
@ashabhasa
Oct 04 13:48
it doesn't handle async code
Alex Salguero
@hasumedic
Oct 04 13:53
is it normal for Schedules to receive types Any?
Calvin Lee Fernandes
@calvinlfer
Oct 04 13:54
ideally you should use a polymorphic function to constrain it
Alex Salguero
@hasumedic
Oct 04 13:55
:thumbsup:
toxicafunk
@toxicafunk
Oct 04 13:58
can u specify different backpressure strategies?
on zio-queue
Muhammad Farag
@MuhammadFarag
Oct 04 14:01
Can you check the size of the queue on the fly? Then you can allocate more consumers for an example if queues are filling up!
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:02
yeah
Queue has a size
Muhammad Farag
@MuhammadFarag
Oct 04 14:03
Thank you guys :)
Jens Hoffmann
@jchoffmann
Oct 04 14:05
so queue.sliding adds backpressure strategy (drop elems instead of blocking)
thanks :thumbsup:
Muhammad Farag
@MuhammadFarag
Oct 04 14:20
yes
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:20
hurray for :coffee:
Muhammad Farag
@MuhammadFarag
Oct 04 14:20
i thought I drink too much coffee :joy:
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:20
Amen
Muhammad Farag
@MuhammadFarag
Oct 04 14:21
Now, I feel good about my coffee consumption :D
:thumbsup:
Arbër Shabhasa
@ashabhasa
Oct 04 14:25
we want to combine them
Alex Salguero
@hasumedic
Oct 04 14:25
Aggregating errors?
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:28
crawlIO is finite no?
Dmitry Ivanov
@diminou
Oct 04 14:28
It depends on the interpreter.
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:29
you cannot
you'd have to use like a functional stream or something
you don't want users to be able to construct URL directly?
Thomas Boeglin
@tboeglin
Oct 04 14:30
so we cannot instantiate invalid URLs
Jens Hoffmann
@jchoffmann
Oct 04 14:31
use ADT
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:32
Java makes a call
when you define a URL
Thomas Boeglin
@tboeglin
Oct 04 14:32
reading from URL may fail, decoding utf8 may fail
Arbër Shabhasa
@ashabhasa
Oct 04 14:34
Why do you convert Try in Option in URL.apply() ?
Muhammad Farag
@MuhammadFarag
Oct 04 14:37
Yep
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:38
i think we need to accumulate results

    def inner(remSeeds: Set[URL], acc: IO[Exception, Crawl[E, A]]): IO[Exception, Crawl[E, A]] =
      if (remSeeds.isEmpty) acc
      else ???

because u have a monoid
Alex Salguero
@hasumedic
Oct 04 14:39
because it composes
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:39
for E, A
Thomas Boeglin
@tboeglin
Oct 04 14:40
mzero
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:40
if the seeds are empty then it means we are done crawling
Thomas Boeglin
@tboeglin
Oct 04 14:41
implement both empty / non empty seeds cases
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:41
IO.point
take the first seed
ah darn
fold?
each seed
URL
oh sorry the zero
Ahmad Ragab
@ASRagab
Oct 04 14:43
Set[URL]
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:43
we have to return an IO[Exception, Crawl[E, A]]
Muhammad Farag
@MuhammadFarag
Oct 04 14:45
IntelliJ is dying :disappointed:
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:46
we need to work with that seed
Muhammad Farag
@MuhammadFarag
Oct 04 14:46
Call router on the seed?
Alex Salguero
@hasumedic
Oct 04 14:46
router(seed)
Jens Hoffmann
@jchoffmann
Oct 04 14:46
invoke geturl with the seed, to make progress to get to a Crawl in order to combine with the acc
Phong Nguyen
@phongngtuan
Oct 04 14:48
zip with URL?
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:48
processor(<html>)
you can construct a crawl?
can you attempt on the IO?
then map over it
case Right => mzero the E of the crawl and populate the A
Crawl(e, mzero[A])
no
IO[Nothing, Crawl[E, A]]
E=Nothing = cannot fail
Calvin Lee Fernandes
@calvinlfer
Oct 04 14:55
crawlAcc <- acc
yield crawl |+| crawlAcc

          for {
            html      <- getURL(seed)
            crawl     <- processor(seed, html).redeemPure(e => Crawl(e, mzero[A]), a => Crawl(mzero[E], a)): IO[Nothing, Crawl[E, A]]
            crawlAcc  <- acc: IO[Exception, Crawl[E, A]]
          } yield crawl |+| crawlAcc

oops
yeah makes sense, i always get it reversed :laughing:
there's no real need for that inner function any more is there?
loop?
ah okay
no router calls
we need to call extractURLs
Thomas Boeglin
@tboeglin
Oct 04 14:59
recursive call to loop with the new set of parsed URLs ?
Alex Salguero
@hasumedic
Oct 04 15:00
in the yield?
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:01
router
Arbër Shabhasa
@ashabhasa
Oct 04 15:01
map with router
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:01
router(urls.toSet)
Ahmad Ragab
@ASRagab
Oct 04 15:02
you need to add them in somewhere
?
Yash Datta
@saucam
Oct 04 15:04
loop again on urls ?
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:04
loop(urls, crawl)?
Jens Hoffmann
@jchoffmann
Oct 04 15:04
loop with the routed URLs
Thomas Boeglin
@tboeglin
Oct 04 15:05
(we also need to lift extractURLs(seed, html).toSet.flatMap(router) in IO)
(or use = )
Damian Albrun
@insdami
Oct 04 15:06
base case?
how do you stop looping
oh, yeah
Ahmad Ragab
@ASRagab
Oct 04 15:08
is it possible that you might be unnecessarily crawling
Alex Salguero
@hasumedic
Oct 04 15:08
recursive URLs?
Thomas Boeglin
@tboeglin
Oct 04 15:08
we may recurse on the first url of seed without ever going to the next ones
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:08
yikes
Ahmad Ragab
@ASRagab
Oct 04 15:08
urls you have already crawled
Alex Salguero
@hasumedic
Oct 04 15:08
a URL contains another URL1 and then URL1 contains URL?
Ahmad Ragab
@ASRagab
Oct 04 15:08
cycles
Alex Salguero
@hasumedic
Oct 04 15:08
Keep a set of visited URLs
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:09
urls - visited?
Ahmad Ragab
@ASRagab
Oct 04 15:09
visited ++ urls
Phong Nguyen
@phongngtuan
Oct 04 15:10
return the visited url
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:13
lmao intellij had enough
Ahmad Ragab
@ASRagab
Oct 04 15:14
don't you need to still add visited
Jens Hoffmann
@jchoffmann
Oct 04 15:26
hm crawl0 isn't used, isn't that a red flag?
Phong Nguyen
@phongngtuan
Oct 04 15:26
it's in acc0
Jens Hoffmann
@jchoffmann
Oct 04 15:27
true
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:29
type Acc should change too?
last call
yeah we have handled errors
ah my bad
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:35
acc0 for err => ?
this doesnt ever fail right?
Jens Hoffmann
@jchoffmann
Oct 04 15:38
could someone copy/paste CrawlState monoid + the result crawlIO, I lost track of compiling code at some point :)
John A. De Goes
@jdegoes
Oct 04 15:39

  case class CrawlState[E, A](visited: Set[URL], crawl: Crawl[E, A])
  object CrawlState {
    def visited[E: Monoid, A: Monoid](visited: Set[URL]): CrawlState[E, A] =
      CrawlState(visited, mzero[Crawl[E, A]])
    def crawled[E, A](crawl: Crawl[E, A]): CrawlState[E, A] =
      CrawlState(mzero[Set[URL]], crawl)

    implicit def MonoidCrawlState[E: Monoid, A: Monoid]: Monoid[CrawlState[E, A]] =
      new Monoid[CrawlState[E, A]] {
        def zero = CrawlState(mzero[Set[URL]], mzero[Crawl[E, A]])
        def append(l: CrawlState[E, A], r: => CrawlState[E, A]) =
          CrawlState(l.visited |+| r.visited, l.crawl |+| r.crawl)
      }
  }
  //
  // EXERCISE 1
  //
  // Implement the `crawlIO` function.
  //
  def crawlIO[E: Monoid, A: Monoid](
    seeds     : Set[URL],
    router    : URL => Set[URL],
    processor : (URL, String) => IO[E, A]): IO[Nothing, Crawl[E, A]] = {
      type Acc = IO[Nothing, CrawlState[E, A]]

      def loop(seeds: Set[URL], acc: CrawlState[E, A]): Acc =
        seeds.foldLeft[Acc](IO.now(acc |+| CrawlState.visited(seeds))) {
          case (acc, seed) =>
            acc.flatMap(acc =>
              getURL(seed).redeem(
                err => IO.now(acc),
                html => {
                  val seeds2 = extractURLs(seed, html).toSet.flatMap(router) -- acc.visited

                  for {
                    crawl2  <-  processor(seed, html).redeemPure(Crawl(_, mzero[A]), Crawl(mzero[E], _))
                    acc     <-  loop(seeds2, acc |+| CrawlState.crawled(crawl2))
                  } yield acc
                }
              )
            )
        }

      loop(seeds, mzero[CrawlState[E, A]]).map(_.crawl)
    }

Jens Hoffmann
@jchoffmann
Oct 04 15:39
:thumbsup:
Arbër Shabhasa
@ashabhasa
Oct 04 15:39
traverse
Alex Salguero
@hasumedic
Oct 04 15:39
Traverse?
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:39
parTraverse?
IO[Nothing, List[Crawl[E, A]]
mappend?
from Monoid
_ |+| _
Ahmad Ragab
@ASRagab
Oct 04 15:43
BFS vs DFS
Phong Nguyen
@phongngtuan
Oct 04 15:44
branches out from same node could visit same URL
Ahmad Ragab
@ASRagab
Oct 04 15:44
but we are avoiding cycles, because they will be in visited, yeah?
even if we visit twice
Arbër Shabhasa
@ashabhasa
Oct 04 15:47
Is it possible to remove the explicit recursion?
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:47
using a Schedule?
toxicafunk
@toxicafunk
Oct 04 15:50
Instead of Set[URL]
Well could use zio-queue to avoid duplicates
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:51
retry(Schedule.spaced(10.seconds).jittered && recurs(5) *> Schedule.identity])
might be missing some brackets
Schedule.exponential would probably be more appropriate
Calvin Lee Fernandes
@calvinlfer
Oct 04 15:57
can u just use modify or update ?
so we don't get set?
ahh
Alex Salguero
@hasumedic
Oct 04 16:03
Could you please paste this last version?
Ahmad Ragab
@ASRagab
Oct 04 16:03
isn't seeds an IO.now not a Set[URL]
in the for comprehension
ahh
right <- not =

  def crawlIO[E: Monoid, A: Monoid](
    seeds     : Set[URL],
    router    : URL => Set[URL],
    processor : (URL, String) => IO[E, A]): IO[Exception, Crawl[E, A]] = {

    def loop(seeds: Set[URL], ref: Ref[CrawlState[E, A]]): IO[Nothing, Unit] = {
      ref.update(_ |+| CrawlState.visited(seeds)) *> IO.traverse(seeds) { seed =>
        getURL(seed).redeem(
          _ => IO.unit,
          html =>
            for {
              acc    <- ref.get
              seeds  <- IO.now(extractURLs(seed, html).toSet.flatMap(router) -- acc.visited)
              crawl  <- processor(seed, html).redeemPure(Crawl(_, mzero[A]), Crawl(mzero[E], _))
              _      <- ref.update(_ |+| CrawlState.crawled(crawl))
              _      <- loop(seeds, ref)
            } yield ()
        )
      }.void
    }

    for {
      ref   <- Ref(mzero[CrawlState[E, A]])
      _     <- loop(seeds, ref)
      state <- ref.get
    } yield state.crawl
  }

Alex Salguero
@hasumedic
Oct 04 16:05
Thanks
Jens Hoffmann
@jchoffmann
Oct 04 16:06
could you reiterate between traverse and the first soln?
Ahmad Ragab
@ASRagab
Oct 04 16:07
also nice you were able to make a lot of revisions without having to change the router or processor.
Jens Hoffmann
@jchoffmann
Oct 04 16:08
ok
:thumbsup:
@calvinlfer the retry was on getURL(seed) before redeem, right?
Ahmad Ragab
@ASRagab
Oct 04 16:18
I think so!
At least it compiles, when I added it there just now. @jchoffmann
Jens Hoffmann
@jchoffmann
Oct 04 16:19
so say with this:

  import scala.concurrent.duration._
  val retryStrategy = Schedule.spaced(10.seconds).jittered && Schedule.recurs(5)

the line would become

getURL(seed).retry(retryStrategy *> Schedule.identity[Exception]).redeem(...)

(which compiles)
thanks @ASRagab
Ahmad Ragab
@ASRagab
Oct 04 16:20
yup
Calvin Lee Fernandes
@calvinlfer
Oct 04 16:34
yeah it was, sorry for the delay (having lunch :P)
Ahmad Ragab
@ASRagab
Oct 04 16:38
So dumb question, if the type of loop is IO[Nothing, Unit] when can we recover those exceptions? Would it be dependent on the processor to handle them?
Jens Hoffmann
@jchoffmann
Oct 04 16:39
@calvinlfer no worries
Ahmad Ragab
@ASRagab
Oct 04 16:39
or are they actually in Crawl[E, A]
Jens Hoffmann
@jchoffmann
Oct 04 16:39
@ASRagab they are in the crawl
Ahmad Ragab
@ASRagab
Oct 04 16:39
ahh
yeah
thanks, right.
one more question, what action do we need the router to perform?
Ahmad Ragab
@ASRagab
Oct 04 16:45
I guess, if we want to canonicalize or filter certain urls out, a base impl could just return the Set[URL]?
Jens Hoffmann
@jchoffmann
Oct 04 17:02
re. router, you're free to choose any action you want, based on your requirements
so say if you want to just crawl any link that you encounter, you'd use Set(_) to just feed through the input url
or you return the empty set for urls you want to filter (e.g. john mentioned limit yourself to crawl a subdomain only)
is that what you were asking?
Ahmad Ragab
@ASRagab
Oct 04 17:07
yes, thank you @jchoffmann
Alex Salguero
@hasumedic
Oct 04 17:15
How testable is this code? i.e. which assertions could you make to prove it’s correctness beyond successful compilation?
toxicafunk
@toxicafunk
Oct 04 17:18
U could compare the resulting set with the one u expect
Alex Salguero
@hasumedic
Oct 04 17:18
But that would mean actually fetching real URLs by calling getURL and the like, right?
toxicafunk
@toxicafunk
Oct 04 17:20
Depend on extractUrl
Alex Salguero
@hasumedic
Oct 04 17:22
Great! :thumbsup:
Arbër Shabhasa
@ashabhasa
Oct 04 17:26
we can read stale values
Calvin Lee Fernandes
@calvinlfer
Oct 04 17:27
parTraverse :laughing:
image.png
oops
Ahmad Ragab
@ASRagab
Oct 04 17:40
why cant you use bracket here?
Phong Nguyen
@phongngtuan
Oct 04 17:43
why do we need to wrap IO.async in another layer of IO?
Phong Nguyen
@phongngtuan
Oct 04 17:50
what will happen if we don't use promise but only IO.async(...)? will it block the thread?
and it will continue with the block pool because k is called from the runnable, which is in the blocking pool?
got it
John A. De Goes
@jdegoes
Oct 04 17:57

  def getURL(url: URL): IO[Exception, String] =
    for {
      promise <-  Promise.make[Exception, String]
      _       <-  (for {
                    exitResult <- IO.async[Nothing, ExitResult[Exception, String]](k => blockingPool.submit(
                                    new Runnable () {
                                      def run: Unit =
                                        try {
                                          k(ExitResult.Completed(ExitResult.Completed(scala.io.Source.fromURL(url.url)(scala.io.Codec.UTF8).mkString)))
                                        } catch {
                                          case e : Exception => k(ExitResult.Completed(ExitResult.Failed(e)))
                                        }
                                    }
                                  )) : IO[Nothing, ExitResult[Exception, String]]
                    _          <- promise.done(exitResult)
                  } yield ()).fork
      html    <-  promise.get
    } yield html

Calvin Lee Fernandes
@calvinlfer
Oct 04 18:01
:laughing:
all the work went into 1 :P
Jens Hoffmann
@jchoffmann
Oct 04 18:01
geez
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:03
option
Alex Salguero
@hasumedic
Oct 04 18:04
:scream:
:laughing:
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:05
should we fix the URL case class to do better routing?
so we can do something like stay on the same domain
John A. De Goes
@jdegoes
Oct 04 18:05
"io.lemonlabs" %% "scala-uri" % "1.3.1",
"io.lemonlabs" %% "scala-uri" % "1.3.1",
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:13
page has to be a UrlPath
Jens Hoffmann
@jchoffmann
Oct 04 18:13
withPath expects UrlPath
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:13
:(
UrlPath.parse(page)
Ahmad Ragab
@ASRagab
Oct 04 18:15

val absoluteUrl = Url.parse("http://www.example.com/example?a=b")
absoluteUrl.toRelativeUrl // This is /example?a=b

John A. De Goes
@jdegoes
Oct 04 18:19
/foo/bar/
Arbër Shabhasa
@ashabhasa
Oct 04 18:19
what about RelativeUrl.parse("/index.html")
John A. De Goes
@jdegoes
Oct 04 18:19
/foo/bar/index.html
Damian Albrun
@insdami
Oct 04 18:20
Path has all its parts
it's a vector
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:20
https://github.com/lemonlabsuk/scala-uri#matching-paths
Alex Salguero
@hasumedic
Oct 04 18:22

val url = Url.parse("http://www.example.com/example/foo/bar”)
url.path.parts
Vector[String] = Vector(example, foo, bar)

val url = Url.parse("http://www.example.com/example/foo/bar.html”)
url.path.parts
Vector[String] = Vector(example, foo, bar.html)

we could drop last?
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:23
so init?
parts.init should work
Alex Salguero
@hasumedic
Oct 04 18:25
init throws Exception I believe. dropRight might do the trick
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:26
good point :+1:
could you please post the URL code and the test code once you are done?
John A. De Goes
@jdegoes
Oct 04 18:30

object test {
    val Home          = URL("http://scalaz.org").get
    val Index         = URL("http://scalaz.org/index.html").get
    val ScaladocIndex = URL("http://scalaz.org/scaladoc/index.html").get
    val About         = URL("http://scalaz.org/about").get

    val SiteIndex =
      Map(
        Home -> """<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>""",
        Index -> """<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>""",
        ScaladocIndex -> """<html><body><a href="index.html">Home</a><a href="/about.html">About</a></body></html>""",
        About -> """<html><body><a href="home.html">Home</a><a href="http://google.com">Google</a></body></html>"""
      )
  }

Calvin Lee Fernandes
@calvinlfer
Oct 04 18:30
ty
Ahmad Ragab
@ASRagab
Oct 04 18:35
just return the sdet
set
Jens Hoffmann
@jchoffmann
Oct 04 18:35
just pass it on?
ah
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:35
lock it down to scalaz?
Ahmad Ragab
@ASRagab
Oct 04 18:35
filter out urls that we don't already have accounted for
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:35
apexDomain
Alex Salguero
@hasumedic
Oct 04 18:36
hostOption
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:36
but its an Option[String]

val ScalazOnlyRouter: URL => Set[URL] = url => 
        if (url.parsed.apexDomain.contains("scalaz.org")) Set(url)
        else Set()

Ahmad Ragab
@ASRagab
Oct 04 18:38
val processor = (url: URL, content: String) => IO.now(url.url -> content.length) Is a potentially valid processor
but maybe something more interesting
IO.now() was a guess
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:42
The url bit
Ahmad Ragab
@ASRagab
Oct 04 18:42
a couple of seconds
Alex Salguero
@hasumedic
Oct 04 18:42
Url.apply()?
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:42
final case class URL private (parsed: io.lemonlabs.uri.Url) {
yeah!
John A. De Goes
@jdegoes
Oct 04 18:42

  final case class URL private (parsed: io.lemonlabs.uri.Url) {
    import io.lemonlabs.uri._

    final def relative(page: String): Option[URL] =
      scala.util.Try(parsed.path match {
        case Path(parts) =>
          val whole = parts.dropRight(1) :+ page

          parsed.withPath(UrlPath(whole))
      }).toOption.map(new URL(_))

    def url: String = parsed.toString
  }

  object URL {
    import io.lemonlabs.uri._

    def apply(url: String): Option[URL] =
      scala.util.Try(AbsoluteUrl.parse(url)).toOption match {
        case None => None
        case Some(parsed) => Some(new URL(parsed))
      }
  }

Calvin Lee Fernandes
@calvinlfer
Oct 04 18:42
ty!
Alex Salguero
@hasumedic
Oct 04 18:43
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:44
woo
it worked!
Jens Hoffmann
@jchoffmann
Oct 04 18:44
IntelliJ survived
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:44
it only visited scalaz.org and scalaz.org/index.html
Alex Salguero
@hasumedic
Oct 04 18:44
same here
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:45
didnt make it to the scaladocs page
John A. De Goes
@jdegoes
Oct 04 18:46

scala> test.SiteIndex.mapValues(extractURLs(test.Home, _))
res6: scala.collection.immutable.Map[net.degoes.applications.exercises.URL,List[net.degoes.applications.exercises.URL]] = Map(URL(http://scalaz.org) -> List(URL(http://scalaz.org/index.html), URL(http://scalaz.org//scaladoc/index.html)), URL(http://scalaz.org/index.html) -> List(URL(http://scalaz.org/index.html), URL(http://scalaz.org//scaladoc/index.html)), URL(http://scalaz.org/scaladoc/index.html) -> List(URL(http://scalaz.org/index.html), URL(http://scalaz.org//about.html)), URL(http://scalaz.org/about) -> List(URL(http://scalaz.org/home.html), URL(http://google.com), URL(http://scalaz.org/http://google.com)))

Jens Hoffmann
@jchoffmann
Oct 04 18:47
http://scalaz.org/http://google.com excellent

putStrLn(crawl.value.mkString("\n"))

is a bit easier to read I find
toxicafunk
@toxicafunk
Oct 04 18:48
Have we tested the regex?
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:50
its a lemon
Muhammad Farag
@MuhammadFarag
Oct 04 18:50
loOol
Calvin Lee Fernandes
@calvinlfer
Oct 04 18:50
trololo
John A. De Goes
@jdegoes
Oct 04 18:52

scala> test.SiteIndex.mapValues(extractURLs(test.Home, _))
res0: scala.collection.immutable.Map[net.degoes.applications.exercises.URL,List[net.degoes.applications.exercises.URL]] = Map(URL(http://scalaz.org) -> List(URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html)), URL(http://scalaz.org/index.html) -> List(URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html)), URL(http://scalaz.org/scaladoc/index.html) -> List(URL(http://scalaz.org/index.html), URL(http://scalaz.org/about.html)), URL(http://scalaz.org/about) -> List(URL(http://scalaz.org/home.html), URL(http://google.com), URL(http://scalaz.org/http://google.com)))

Ahmad Ragab
@ASRagab
Oct 04 18:54
I tested
it isn't
actually
John A. De Goes
@jdegoes
Oct 04 18:55
Set(URL(http://scalaz.org/home.html), URL(http://scalaz.org/index.html), URL(http://scalaz.org/about.html), URL(http://scalaz.org/scaladoc/index.html), URL(http://scalaz.org/http://google.com))
Ahmad Ragab
@ASRagab
Oct 04 18:56
How did you get that?
John A. De Goes
@jdegoes
Oct 04 18:56
test.SiteIndex.values.map(extractURLs(test.Home, _)).flatten.toSet.flatMap(test.ScalazRouter)
Ahmad Ragab
@ASRagab
Oct 04 18:56
thank you
John A. De Goes
@jdegoes
Oct 04 19:02

scala> run(Nil).unsafeRun
Getting content for: URL(http://scalaz.org)
Visited: Set(URL(http://scalaz.org))
New Seeds: Set(URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html))
Getting content for: URL(http://scalaz.org/index.html)
Getting content for: URL(http://scalaz.org/scaladoc/index.html)
Visited: Set(URL(http://scalaz.org), URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html))
New Seeds: Set()
(URL(http://scalaz.org),<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>)
(URL(http://scalaz.org/index.html),<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>)
res0: net.degoes.applications.exercises.ExitStatus = ExitNow(0)

scala> run(Nil).unsafeRun
Getting content for: URL(http://scalaz.org)
Visited: Set(URL(http://scalaz.org))
New Seeds: Set(URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html))
Getting content for: URL(http://scalaz.org/index.html)
Getting content for: URL(http://scalaz.org/scaladoc/index.html)
Visited: Set(URL(http://scalaz.org), URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html))
New Seeds: Set()
Failed getting content for URL(http://scalaz.org/scaladoc/index.html)
(URL(http://scalaz.org),<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>)
(URL(http://scalaz.org/index.html),<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>)
res0: net.degoes.applications.exercises.ExitStatus = ExitNow(0)

Alex Salguero
@hasumedic
Oct 04 19:08
:sweat_smile:
John A. De Goes
@jdegoes
Oct 04 19:08

scala> run(Nil).unsafeRun
Getting content for: URL(http://scalaz.org)
Visited: Set(URL(http://scalaz.org))
New Seeds: Set(URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html))
Getting content for: URL(http://scalaz.org/index.html)
Getting content for: URL(http://scalaz.org/scaladoc/index.html)
Visited: Set(URL(http://scalaz.org), URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html))
New Seeds: Set()
Visited: Set(URL(http://scalaz.org), URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html))
New Seeds: Set(URL(http://scalaz.org/about))
Getting content for: URL(http://scalaz.org/about)
Visited: Set(URL(http://scalaz.org), URL(http://scalaz.org/index.html), URL(http://scalaz.org/scaladoc/index.html), URL(http://scalaz.org/about))
New Seeds: Set(URL(http://scalaz.org/home.html), URL(http://scalaz.org/http://google.com))
Getting content for: URL(http://scalaz.org/home.html)
Getting content for: URL(http://scalaz.org/http://google.com)
Failed getting content for URL(http://scalaz.org/http://google.com)
Failed getting content for URL(http://scalaz.org/home.html)
(URL(http://scalaz.org),<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>)
(URL(http://scalaz.org/index.html),<html><body><a href="index.html">Home</a><a href="/scaladoc/index.html">Scaladocs</a></body></html>)
(URL(http://scalaz.org/scaladoc/index.html),<html><body><a href="index.html">Home</a><a href="/about">About</a></body></html>)
(URL(http://scalaz.org/about),<html><body><a href="home.html">Home</a><a href="http://google.com">Google</a></body></html>)
res0: net.degoes.applications.exercises.ExitStatus = ExitNow(0)

Jens Hoffmann
@jchoffmann
Oct 04 19:09
could you print out which fiber is executing this?
Muhammad Farag
@MuhammadFarag
Oct 04 19:09
:confetti_ball:
Jens Hoffmann
@jchoffmann
Oct 04 19:09
when doing putStrLn, add info which fiber this is running on?
toxicafunk
@toxicafunk
Oct 04 19:10
Code plz
I'm on mobile
Muhammad Farag
@MuhammadFarag
Oct 04 19:11
Please :pray:
Jens Hoffmann
@jchoffmann
Oct 04 19:11
Not using IntelliJ-Mobile?
Alex Salguero
@hasumedic
Oct 04 19:11
:laughing:
John A. De Goes
@jdegoes
Oct 04 19:11
https://gist.github.com/jdegoes/3f51612f8e3e3daa086902f7269721a0
Ahmad Ragab
@ASRagab
Oct 04 19:11
you are gonna need a bigger phone!
toxicafunk
@toxicafunk
Oct 04 19:11
Ensim
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:15

  trait Console[F[_]] {
    def getStrLn: F[String]
    def putStrLn(msg: String): F[Unit]
  }

  def printLine[F[_]: Console](line: String): F[Unit] = implicitly[Console[F]].printLine(line)
  def readLine[F[_]: Console](msg: String): F[String] = implicitly[Console[F]].readLine

oops
Yuriy Susuk
@ysusuk
Oct 04 19:19
Console[F].printLine(line)
Alex Salguero
@hasumedic
Oct 04 19:22

implicit def ConsoleIO[E]: Console[IO[E, ?]] = new Console[IO[E, ?]] {
    override def printLine(msg: String): IO[E, Unit] = IO.sync(println(msg))

    override def readLine: IO[E, String] = IO.sync(scala.io.StdIn.readLine())
  }

:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:22

  implicit def ConsoleIO[E]: Console[IO[E, ?]] =
    new Console[IO[E, ?]] {
      override def readLine: IO[E, String] = IO.sync(scala.io.StdIn.readLine())

      override def printLine(msg: String): IO[E, Unit] = IO.sync(println(msg))
    }

Yuriy Susuk
@ysusuk
Oct 04 19:24
shouldn’t we use syncException, i thought sync is having Nothing on the left?
ach =) ok
Muhammad Farag
@MuhammadFarag
Oct 04 19:26
I am not sure if there is coming back from that!
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:26

  implicit def RandomIO[E]: Random[IO[E, ?]] = new Random[IO[E, ?]] {
    override def nextInt(max: Int): IO[E, Int] = IO.sync(scala.util.Random.nextInt(max))
  }

Ahmad Ragab
@ASRagab
Oct 04 19:26

  implicit def RandomIO[E]: Random[IO[E, ?]] =
    new Random[IO[E, ?]] {
      def nextInt(max: Int): IO[E, Int] = IO.sync(scala.util.Random.nextInt(max))
    }

John A. De Goes
@jdegoes
Oct 04 19:26

trait Random[F[_]] {
    def nextInt(max: Int): F[Int]
  }
  object Random {
    def apply[F[_]](implicit F: Random[F]): Random[F] = F
  }
  def nextInt[F[_]: Random](max: Int): F[Int] = Random[F].nextInt(max)
  implicit def RandomIO[E]: Random[IO[E, ?]] =
    new Random[IO[E, ?]] {
      def nextInt(max: Int): IO[E, Int] = ???
    }

Calvin Lee Fernandes
@calvinlfer
Oct 04 19:30
ooh
Yuriy Susuk
@ysusuk
Oct 04 19:30
just a stupid question - how does tagless final differe from type class which has a type parameter * -> *, or maybe when type class becomes tagless final
Alex Salguero
@hasumedic
Oct 04 19:30
No idea, but up for it :)
Muhammad Farag
@MuhammadFarag
Oct 04 19:30
Yes…
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:30
i believe tagless final does not need to be coherent like typeclasses
ah laws
Muhammad Farag
@MuhammadFarag
Oct 04 19:31
image.png
Alex Salguero
@hasumedic
Oct 04 19:31
Oh! Yes I know that one actually
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:35
val Dictionary = List("scalaz", "monad", "typeclass", "tagless", "functor", "functional") :P
Jens Hoffmann
@jchoffmann
Oct 04 19:35
just trying to wrap my head around this - we're now abstracting over effects, right? what else could we choose apart from IO effects, i.e. what would other instances be for example?
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:36
^ yeah, Monix, cats Effect, even Monad Transformer stacks
Jens Hoffmann
@jchoffmann
Oct 04 19:36
thanks, got it
it's getting quite meta in here
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:36
meta programming :D
Jens Hoffmann
@jchoffmann
Oct 04 19:37
:laughing:
John A. De Goes
@jdegoes
Oct 04 19:37
https://gist.github.com/jdegoes/7e7013a8c14e5fcb28f7f00a8245f968
Yuriy Susuk
@ysusuk
Oct 04 19:39
it’s becoming interesting if effect id dsl which talk to http =) or reads something from db
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:39
F needs Random
Alex Salguero
@hasumedic
Oct 04 19:39
Random?
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:39
Functor
Set of chars?
also lives?
yeah true you can derive it
Console
Arbër Shabhasa
@ashabhasa
Oct 04 19:44
Functor
Calvin Lee Fernandes
@calvinlfer
Oct 04 19:44
oh you need sequencing?
then Monad
ooh Applicative?
think we need map for Functor
to do head on the String
oh for retries
Ahmad Ragab
@ASRagab
Oct 04 19:53
where is word coming from?
Jens Hoffmann
@jchoffmann
Oct 04 19:53
from state
Jens Hoffmann
@jchoffmann
Oct 04 20:00
we have getName for this right?
Alex Salguero
@hasumedic
Oct 04 20:00
don’t we use getName
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:00
yeah
Jens Hoffmann
@jchoffmann
Oct 04 20:00
instead of please enter your name
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:11
is that the right logic for playerWon?
:+1:
Ahmad Ragab
@ASRagab
Oct 04 20:13
:thumbsup:
Yuriy Susuk
@ysusuk
Oct 04 20:13
what are we trying to achive here with tagless final? 1. move desicion of which effect will be used, to the borders of our program or 2. move desicion of which implementation of dsls will be used (with effect backed in)? with typeclasses you still can decide on effect very late, but with dsl build like this you can have one dsl in tests and another in prod
not sure if it’s clear what i’m asking
=)
ach cool, makes total sense!
toxicafunk
@toxicafunk
Oct 04 20:14
Program to the interface made functional
Yuriy Susuk
@ysusuk
Oct 04 20:14
thanx
it looks like it’s always good idea to use tagless final, is it so? what are the weak points?
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:16

  // Exercise 9, implement the game for F=IO[Nothing, ?]
  val myNameIO: IO[Nothing, Unit] = myGame[IO[Nothing, ?]]

toxicafunk
@toxicafunk
Oct 04 20:17
but tagless final works nicely with domain driven design
Jens Hoffmann
@jchoffmann
Oct 04 20:17

val myGameIO: IO[Nothing, Unit] = myGame[IO[Nothing, ?]]

toxicafunk
@toxicafunk
Oct 04 20:17
1 algebra per domain
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:17
@toxicafunk Free Monads work as well
toxicafunk
@toxicafunk
Oct 04 20:17
yes, they're 2 implementations of the same idea
Ahmad Ragab
@ASRagab
Oct 04 20:18
I've got some kind of ambiguous implicit
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:18
eee

Exception in thread "main" java.lang.NoSuchMethodError: scalaz.ApplicativeParent.$init$(Lscalaz/ApplicativeParent;)V
    at scalaz.zio.interop.IOMonad.<init>(scalaz72.scala:34)
    at scalaz.zio.interop.IOMonadError.<init>(scalaz72.scala:42)
    at scalaz.zio.interop.IOInstances$$anon$3.<init>(scalaz72.scala:16)
    at scalaz.zio.interop.IOInstances.<init>(scalaz72.scala:16)
    at scalaz.zio.interop.scalaz72$.<init>(scalaz72.scala:8)
    at scalaz.zio.interop.scalaz72$.<clinit>(scalaz72.scala)
    at net.degoes.applications.exercises$.<init>(exercises.scala:371)
    at net.degoes.applications.exercises$.<clinit>(exercises.scala)
    at net.degoes.applications.exercises.main(exercises.scala)

Jens Hoffmann
@jchoffmann
Oct 04 20:19
how do you quickly run it? stick it in another run method?
ah right yes, forgot
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:19
I just did this
Jens Hoffmann
@jchoffmann
Oct 04 20:19
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:19

  def run(args: List[String]): IO[Nothing, ExitStatus] =
    (for {
      _   <- putStrLn("Hello World!")
      res <- crawlIO2(Set(testing.Home), testing.ScalazOnlyRouter, testing.Processor, testing.getURL)
      _   <- putStrLn(s"Obtained ${res.value.mkString("\n")}")
      _   <- myGameIO
    } yield ()).redeemPure(_ => ExitStatus.ExitNow(1), _ => ExitStatus.ExitNow(0))

Jens Hoffmann
@jchoffmann
Oct 04 20:19
nice one
John A. De Goes
@jdegoes
Oct 04 20:20

java.lang.NoSuchMethodError: scalaz.ApplicativeParent.$init$(Lscalaz/ApplicativeParent;)V
  at scalaz.zio.interop.IOMonad.<init>(scalaz72.scala:34)
  at scalaz.zio.interop.IOMonadError.<init>(scalaz72.scala:42)
  at scalaz.zio.interop.IOInstances$$anon$3.<init>(scalaz72.scala:16)
  at scalaz.zio.interop.IOInstances.<init>(scalaz72.scala:16)
  at scalaz.zio.interop.scalaz72$.<init>(scalaz72.scala:8)
  at scalaz.zio.interop.scalaz72$.<clinit>(scalaz72.scala)
  at net.degoes.applications.exercises$.<init>(exercises.scala:267)
  at net.degoes.applications.exercises$.<clinit>(exercises.scala)
  ... 36 elided

Muhammad Farag
@MuhammadFarag
Oct 04 20:20
I was wondering when will we break the compiler :D
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:21
im using a smaller one
Alex Salguero
@hasumedic
Oct 04 20:22
it’ll talk about dependency versions and classpaths...
Muhammad Farag
@MuhammadFarag
Oct 04 20:22
slackoverflow was down, hopefully it is back by now :pray:
John A. De Goes
@jdegoes
Oct 04 20:23
cucumber/cucumber-jvm#1087
Jens Hoffmann
@jchoffmann
Oct 04 20:23
maybe we crawled it too fast?
Muhammad Farag
@MuhammadFarag
Oct 04 20:25
but sbt compile didn’t pass, right?
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:25
no it did
Jens Hoffmann
@jchoffmann
Oct 04 20:26
compile passed, fails at runtime
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:27
that did work
val ScalaZVersion = "7.2.26"
Jens Hoffmann
@jchoffmann
Oct 04 20:27
fixed it
John A. De Goes
@jdegoes
Oct 04 20:28
val ScalaZVersion = "7.2.26"
Jens Hoffmann
@jchoffmann
Oct 04 20:30
MatchError when entering more than one char
ah we need case _ instead of case None
John A. De Goes
@jdegoes
Oct 04 20:31

Welcome to Purely Functional Hangman!
Please enter your name:

 -  -  -  -  -  - 

 Guesses: 

Please enter a guess: 
       e          
 -  -  -  -  -  - 

 Guesses: e

You guessed correctly! Keep at it, John!
Please enter a guess: 
       e          
 -  -  -  -  -  - 

 Guesses: e, c

You guessed correctly! Keep at it, John!
Please enter a guess: 
       e          
 -  -  -  -  -  - 

 Guesses: e, c, a

You guessed correctly! Keep at it, John!
Please enter a guess: 
       e  f       
 -  -  -  -  -  - 

 Guesses: e, c, a, f

You guessed correctly! Keep at it, John!
Please enter a guess: 
    s  e  f       
 -  -  -  -  -  - 

 Guesses: e, s, f, a, c

You guessed correctly! Keep at it, John!
Please enter a guess: 
    s  e  f       
 -  -  -  -  -  - 

 Guesses: e, s, f, a, c, o

You guessed correctly! Keep at it, John!
Please enter a guess: 
 u  s  e  f  u    
 -  -  -  -  -  - 

 Guesses: e, s, u, f, a, c, o

You guessed correctly! Keep at it, John!
Please enter a guess: 
 u  s  e  f  u  l 
 -  -  -  -  -  - 

 Guesses: e, s, u, f, a, l, c, o

Congratulations, you are a winner, John!

Calvin Lee Fernandes
@calvinlfer
Oct 04 20:31
use case _
Jens Hoffmann
@jchoffmann
Oct 04 20:32
we always guess correctly :D
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:32
yeah
Yuriy Susuk
@ysusuk
Oct 04 20:34
woo hoo
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:35

  // Exercise 8
  // Create a game that is polymorphic in the effect type F[_] requiring the capability to only perform
  // Console and Random effects
  def myGame[F[_]: Console: Random: Monad]: F[Unit] = {
    val Dictionary = List("scalaz", "monad", "typeclass", "tagless", "functor", "functional")
    case class State(username: String, guesses: Set[Char], word: String) {
      def failureCount: Int = (guesses -- word.toSet).size
      def playerLost: Boolean = guesses.size > word.length * 2
      def playerWon: Boolean = (word.toSet -- guesses).isEmpty
    }

    def choose[F[_]: Random: Functor]: F[String] =
      nextInt[F](Dictionary.length).map(Dictionary.apply(_))

    // Use Apply because we aren't really doing dependent operations
    def getName[F[_]: Console: Apply]: F[String] =
      printLine[F]("Please enter your name") *> readLine[F]

    def renderState[F[_]: Console](state: State): F[Unit] = {
      val word = state.word.toList.map { c =>
        if (state.guesses.contains(c)) s" $c "
        else "   "
      }.mkString("")
      val line = List.fill(state.word.length)(" - ").mkString("")
      val guesses = state.guesses.mkString(start = "Guesses: ", sep = ", ", end = "")
      val text = s"$word\n$line\n\n$guesses"
      printLine[F](text)
    }

    def getChoice[F[_]: Console: Monad]: F[Char] =
      for {
        _     <-  printLine[F]("Please enter a guess: ")
        guess <-  readLine[F].flatMap { line =>
                    val trimmed = line.trim
                    line.headOption match {
                      case Some(choice) if choice.isLetter && line.length == 1 =>
                        choice.point[F]
                      case _ => printLine[F]("Your choice is not valid please try again") *> getChoice[F]
                    }
                  }
      } yield guess

    def gameLoop[F[_]: Console: Random: Monad](state: State): F[State] =
      for {
        choice  <- getChoice[F]
        state   <- state.copy(guesses = state.guesses + choice).point[F]
        state   <- renderState[F](state) *> (
                      if (state.playerLost)
                        printLine[F](s"You have been hanged, sorry ${state.username}, the word was ${state.word}") *> state.point[F]
                      else if (state.playerWon)
                        printLine[F](s"Congratulations, you are a winner, ${state.username} !") *> state.point[F]
                      else if (state.word.toSet.contains(choice))
                        printLine[F](s"You guessed correctly!, Keep at it ${state.username}") *> gameLoop[F](state)
                      else
                        printLine[F](s"You guessed incorrectly, keep trying!") *> gameLoop[F](state)
                   )
      } yield state

    for {
      _     <- printLine[F]("Welcome to Purely Functional Hangman!")
      name  <- getName[F]
      word  <- choose[F]
      _     <- gameLoop[F](State(name, Set.empty[Char], word))
    } yield ()
  }

Yuriy Susuk
@ysusuk
Oct 04 20:37
this 4th day of going to bed after midnght is really hard =)
Alex Salguero
@hasumedic
Oct 04 20:37
Same here :dizzy_face:
toxicafunk
@toxicafunk
Oct 04 20:37
what imports we had to add for this game?
Console, Random???
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:40
you need the implicits in scope for Console[IO[Nothing, A]] and Random[IO[Nothing, A]]
if you want to create myGame[IO[Nothing, A]]
Jens Hoffmann
@jchoffmann
Oct 04 20:43
somehow i can guess wrong forever
you too @calvinlfer
ah no
i just had a long word and our lost criterion is forgiving before i ran out of chars
Calvin Lee Fernandes
@calvinlfer
Oct 04 20:49
yeah its based on the word, i manually picked a short word and saw myself get hanged for too many guesses
Jens Hoffmann
@jchoffmann
Oct 04 20:49
also we only count wrong chars as failures
you can guess the same one over and over
anyway. it works.
John A. De Goes
@jdegoes
Oct 04 20:57

  type GameEffects[F[_]] = Console[F] with Random[F] with Monad[F]
  def createTestInstance[E](ref: Ref[TestData]): GameEffects[IO[E, ?]] =
    new Console[IO[E, ?]] with Random[IO[E, ?]] with Monad[IO[E, ?]] {
      def point[A](a: => A): IO[E,A] = ???
      def bind[A, B](fa: IO[E,A])(f: A => IO[E,B]): IO[E,B] = ???
      def printLine(line: String): IO[E,Unit] = ???
      def readLine: IO[E,String] = ???
      def nextInt(max: Int): IO[E,Int] = ???
    }

Calvin Lee Fernandes
@calvinlfer
Oct 04 21:02

  type GameEffects[F[_]] = Console[F] with Random[F] with Monad[F]
  def createTestInstance(ref: Ref[TestData]): GameEffects[IO[Nothing, ?]] =
    new Console[IO[Nothing, ?]] with Random[IO[Nothing, ?]] with Monad[IO[Nothing, ?]] {
      override def bind[A, B](fa: IO[Nothing, A])(f: A => IO[Nothing, B]): IO[Nothing, B] = fa.flatMap(f)
      override def point[A](a: => A): IO[Nothing, A] = IO.point(a)

      override def readLine: IO[Nothing, String] = ref.modify(data => (data.input.head, data.copy(input = data.input.tail)))
      override def printLine(msg: String): IO[Nothing, Unit] = ref.update(data => data.copy(output = data.output :+ msg)).void
      override def nextInt(max: Int): IO[Nothing, Int] = ref.modify(data => (data.random.head, data.copy(random = data.random.tail)))
    }

ref/get
Jens Hoffmann
@jchoffmann
Oct 04 21:05
we have an IO on the LHS?
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:07
is it because you are using context bound syntax?
you have to switch to implicits?
Arbër Shabhasa
@ashabhasa
Oct 04 21:10
new types to the rescue :)
Jens Hoffmann
@jchoffmann
Oct 04 21:12
can you show bind
John A. De Goes
@jdegoes
Oct 04 21:17

OUTPUT:
Welcome to Purely Functional Hangman!
Please enter your name:

 -  -  -  -  -

 Guesses:

Please enter a guess:
 a  a
 -  -  -  -  -

 Guesses: a

You guessed correctly! Keep at it, John!
Please enter a guess:
 a  a  r
 -  -  -  -  -

 Guesses: a, r

You guessed correctly! Keep at it, John!
Please enter a guess:
 a  a  r  o
 -  -  -  -  -

 Guesses: a, r, o

You guessed correctly! Keep at it, John!
Please enter a guess:
 a  a  r  o  n
 -  -  -  -  -

 Guesses: a, r, o, n

Congratulations, you are a winner, John!

Jens Hoffmann
@jchoffmann
Oct 04 21:18
hm
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:18
Exception in thread "main" java.util.NoSuchElementException: head of empty list
lol
Jens Hoffmann
@jchoffmann
Oct 04 21:19
still got value flatMap is not a member of net.degoes.applications.exercises.TestIO[Nothing,Unit] :/
aaah yeah right :thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:20
yeah, looking at that one, most likely a mistake there
i think my word is too long
yay
that worked
Alex Salguero
@hasumedic
Oct 04 21:21
Exception in thread "main" java.util.NoSuchElementException: head of empty list
Sorry I missed the fix?
:thumbsup:
Yuriy Susuk
@ysusuk
Oct 04 21:25
can’t resist anymore. see you guys tomorrow
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:26
bye bye :wave:
Jens Hoffmann
@jchoffmann
Oct 04 21:33
what does the name mean? final tagless?
what's final and tagless what we have been doing with abstracting over effects?
:grinning:
Alex Salguero
@hasumedic
Oct 04 21:34
should we bother going the Free Monad route having tagless final?
Muhammad Farag
@MuhammadFarag
Oct 04 21:34
I am curious how would that play if one trys to write tests first… don’t have the brains to play with it today, though!
Jens Hoffmann
@jchoffmann
Oct 04 21:37
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:37
it would still work @MuhammadFarag , you can do that
you could actually use your tests to shape your API
Muhammad Farag
@MuhammadFarag
Oct 04 21:39
:thumbsup:
Alex Salguero
@hasumedic
Oct 04 21:40
:astonished:
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:40
next level TDD :D
Muhammad Farag
@MuhammadFarag
Oct 04 21:41
I guess, in this case it is still a sort of TDD, in the sense of proofing the solution
Jens Hoffmann
@jchoffmann
Oct 04 21:41
TDD is principled OOP
this is principled FP
Muhammad Farag
@MuhammadFarag
Oct 04 21:42
Yes, that makes a lot of sense, in many cases we actually drove the implementation from the signature… And we mostly had one solution
Thank you very much :)
Jens Hoffmann
@jchoffmann
Oct 04 21:44
excellent, thanks @jdegoes
Arbër Shabhasa
@ashabhasa
Oct 04 21:44
Thank you
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:44
thank you @jdegoes ! this is so awesome
Ahmad Ragab
@ASRagab
Oct 04 21:44
thanks
Jens Hoffmann
@jchoffmann
Oct 04 21:44
see you everyone
toxicafunk
@toxicafunk
Oct 04 21:44
thanks!
Alex Salguero
@hasumedic
Oct 04 21:44
Excellent! Thank you John, every day gets better and better :thumbsup:
Devesh Shetty
@devesh-shetty
Oct 04 21:44
Thanks John!
Pontus Svenson
@xpontus
Oct 04 21:44
thanks!
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:45
here is my work: https://gist.github.com/calvinlfer/eeb556cea49bdc7461e645bd6803917c
Pontus Svenson
@xpontus
Oct 04 21:45
thanks Calvin!
Petar Djurkovic
@petar_djurkovic_twitter
Oct 04 21:45
Thanks John!
Calvin Lee Fernandes
@calvinlfer
Oct 04 21:46
np :)
Ahmad Ragab
@ASRagab
Oct 04 23:27
@calvinlfer thank you.
Ahmad Ragab
@ASRagab
Oct 04 23:37
@jdegoes For tomorrow, wondering if you had any advice, tips, gotchas for working with ZIO or other fp libraries and techniques in contexts like Spark or Flink?
_

John A. De Goes/functional-scala

Calvin Lee Fernandes
@calvinlfer
Oct 05 01:58
+1 it's a bit tricky to mix Spark with FP but you can use the dataset API and typed datasets to quite a good extent
@ASRagab see https://www.iravid.com/posts/fp-and-spark.html
Ahmad Ragab
@ASRagab
Oct 05 02:43
I know this to be true. I feel that there is this tension between eagerness and laziness in Scala especially as you lean more and more towards pure FP, and that tension is heightened in frameworks like Spark, and unnecessary computations can be uniquely costly. Not to mention the typical need for heavily implicit machinery in most FP libraries prompts extreme care and concern around serialization issues in Spark.
Ahmad Ragab
@ASRagab
Oct 05 04:07
@jdegoes One more potential topic: Sane logging patterns in FP? I know while in a comprehension of IO we can log fairly easily, but there are other Monads. Are there more systematic techniques (AOP anyone? :-P) to accomplishing this in an asynchronous non-side-effecting context. Asking for a friend
toxicafunk
@toxicafunk
Oct 05 07:49
regarding tagless, if I have already decided to use ZIO for my effect, are there still benefits to leaving my effect F[_] open?
Phong Nguyen
@phongngtuan
Oct 05 08:02
also about tagless, not sure if below understanding is correct: because we're abstracting over F[_], we only get the program once we commit to a particular F[_]. But if this is IO then we can't look into the resulted program?For example if I want to fp-ize part of my big application that is now A => Unit, I want to turn it into A => Program and examine the program to make sure my logic is correct by just examine the data structure
also, could you also compare Free monad approach vs tagless final (again?)
toxicafunk
@toxicafunk
Oct 05 08:09
for the last question read this: https://softwaremill.com/free-tagless-compared-how-not-to-commit-to-monad-too-early/
the summary though is that Free reifies your algebra, that is, you turn them into objects
the upside to Free is that its easy to optimize and it will probably feel more natural to u if u come from OO (which most of us do)
the downside is that you require some machinery to use Free which means some boilerplate and some performance cost
(which you can optimize, but still...)
with tagless you only use traits so its more straightforward, but if you want to optimize then u need to create interpreters for optimizations whcih you then pass to the final interpreter, so a bit more messy
if u use ZIO though, then you may not need optimizations though :)
on optimizing tagless https://typelevel.org/blog/2017/12/27/optimizing-final-tagless.html
toxicafunk
@toxicafunk
Oct 05 08:14
and of course, jonhn's own http://degoes.net/articles/polymorphic-bifunctors
Phong Nguyen
@phongngtuan
Oct 05 08:19
many thanks @toxicafunk

    the summary though is that Free reifies your algebra, that is, you turn them into objects

this means what I wanted to do above (examine the generated program) could be done more easily with Free Monad?
toxicafunk
@toxicafunk
Oct 05 08:23
well, the article on optimizing final tagless claims its not difficult to do
but I think its easier to examine reified algebras than pass the program to an optimizer-interpreter and that to a final interpreter but... who knows
i recommend reading both articles (comparation and optimization) and give it a go yourself
common wisdom is that tagless has less overhead than free though
Alex Salguero
@hasumedic
Oct 05 12:55
Could we explore a bit through code today the usefulness of Free Monad for testing over the approach used yesterday (input/output, etc)?
Jens Hoffmann
@jchoffmann
Oct 05 12:56
@jdegoes in the recap, could we briefly go over IO.async again? needed to wrap my head around this.
as I understand we need to provide a function from Callback (which is itself a function) to Unit, and in the unit block we need to a) call our async code, and b) ensure we invoke the callback (provided by the RTS i guess?). is that correct? what happens if we don't invoke the callback from our block?
John A. De Goes
@jdegoes
Oct 05 12:59
https://zoom.us/j/234427060
Jens Hoffmann
@jchoffmann
Oct 05 12:59
@ASRagab :+1: for logging patterns. maybe generalising on this for someone like me who isn't proficient with FP in his day job: How do you evolve a functional program?
do you start with the types being principled around them? then once you finished most parts, add some tests? (not upfront since not required if you evolve your types wisely)
and debugging? do you just mix in printStrLns?
Alex Salguero
@hasumedic
Oct 05 13:03
:wave:
Calvin Lee Fernandes
@calvinlfer
Oct 05 13:06
scalaz analytics :DDDDD
Ahmad Ragab
@ASRagab
Oct 05 13:06
ooh
toxicafunk
@toxicafunk
Oct 05 13:07
i've seen spark plans built using monoids and similar
Calvin Lee Fernandes
@calvinlfer
Oct 05 13:27
you can use coyoneda or something right?
Ahmad Ragab
@ASRagab
Oct 05 13:39
~> <- NATURAL TRANSFORMATION
Pierangelo Cecchetto
@pierangeloc
Oct 05 13:40
headOption
toxicafunk
@toxicafunk
Oct 05 13:41
are natural transformations lossless?
so its A => B for * -> * kinds?
* -> * => * -> *
Ahmad Ragab
@ASRagab
Oct 05 13:43
it doesn't for me :(
IO.point
Dmitry Ivanov
@diminou
Oct 05 13:44
fail
()
toxicafunk
@toxicafunk
Oct 05 13:45
IO.point !
Ahmad Ragab
@ASRagab
Oct 05 13:45
now is the time
one more
Arbër Shabhasa
@ashabhasa
Oct 05 13:49
Are there laws for NaturalTransformations ?
thanks
Ahmad Ragab
@ASRagab
Oct 05 13:50
yes thanks
Phong Nguyen
@phongngtuan
Oct 05 13:58
got it, thank you :)
toxicafunk
@toxicafunk
Oct 05 13:58
not to mention its not easy to optimize that way
Muhammad Farag
@MuhammadFarag
Oct 05 14:01
I am curious if you have suggestions to level up in FP, in addition to tons of practice of course :smile:
Jens Hoffmann
@jchoffmann
Oct 05 14:10
could you c/p from TestData onwards until eval test data please?
toxicafunk
@toxicafunk
Oct 05 14:11
what about performance cost for Free?
Jens Hoffmann
@jchoffmann
Oct 05 14:12
sorry for switching back to such a low level topic ... :smile:
Ahmad Ragab
@ASRagab
Oct 05 14:12
No, this is good!
John A. De Goes
@jdegoes
Oct 05 14:14

    sealed trait Free[F[_], A] { self =>
      final def map[B](f: A => B): Free[F, B] = self.flatMap(f.andThen(Free.point[F, B](_)))

      final def flatMap[B](f: A => Free[F, B]): Free[F, B] = Free.FlatMap(self, f)

      final def <* [B](that: Free[F, B]): Free[F, A] =
        self.flatMap(a => that.map(_ => a))

      final def *> [B](that: Free[F, B]): Free[F, B] =
        self.flatMap(_ => that)

      final def fold[G[_]: Monad](interpreter: F ~> G): G[A] =
        self match {
          case Free.Return(value0)  => value0().point[G]
          case Free.Effect(fa)      => interpreter(fa)
          case Free.FlatMap(fa0, f) => fa0.fold(interpreter).flatMap(a0 => f(a0).fold(interpreter))
        }
    }
    object Free {
      case class Return[F[_], A](value0: () => A) extends Free[F, A] {
        lazy val value = value0()
      }
      case class Effect[F[_], A](effect: F[A]) extends Free[F, A]
      case class FlatMap[F[_], A0, A](fa0: Free[F, A0], f: A0 => Free[F, A]) extends Free[F, A]

      def point[F[_], A](a: => A): Free[F, A] = Return(() => a)
      def lift[F[_], A](fa: F[A]): Free[F, A] = Effect(fa)
    }

    sealed trait ConsoleF[A]
    final case object ReadLine extends ConsoleF[String]
    final case class PrintLine(line: String) extends ConsoleF[Unit]

    def readLine: Free[ConsoleF, String] = Free.lift[ConsoleF, String](ReadLine)
    def printLine(line: String): Free[ConsoleF, Unit] = Free.lift[ConsoleF, Unit](PrintLine(line))

    val program: Free[ConsoleF, String] =
      for {
        _    <- printLine("Good morning! What is your name?")
        name <- readLine
        _    <- printLine("Good to meet you, " + name + "!")
      } yield name

    import scalaz.zio.IO
    import scalaz.zio.interop.scalaz72._

    val programIO: IO[Nothing, String] =
      program.fold[IO[Nothing, ?]](new NaturalTransformation[ConsoleF, IO[Nothing, ?]] {
        def apply[A](consoleF: ConsoleF[A]): IO[Nothing, A] =
          consoleF match {
            case ReadLine => IO.sync(scala.io.StdIn.readLine())
            case PrintLine(line) => IO.sync(println(line))
          }
      })

    case class TestData(input: List[String], output: List[String])
    case class State[S, A](run: S => (S, A)) {
      def eval(s: S): A = run(s)._2
    }
    object State {
      implicit def MonadState[S]: Monad[State[S, ?]] =
        new Monad[State[S, ?]] {
          def point[A](a: => A): State[S, A] = State(s => (s, a))
          def bind[A, B](fa: State[S, A])(f: A => State[S, B]): State[S, B] =
            State[S, B](s => fa.run(s) match {
              case (s, a) => f(a).run(s)
            })
        }

      def get[S]: State[S, S] = State(s => (s, s))
      def set[S](s: S): State[S, Unit] = State(_ => (s, ()))
      def modify[S](f: S => S): State[S, Unit] =
        get[S].flatMap(s => set(f(s)))
    }

    val programState: State[TestData, String] =
      program.fold[State[TestData, ?]](new NaturalTransformation[ConsoleF, State[TestData, ?]] {
        def apply[A](consoleF: ConsoleF[A]): State[TestData, A] =
          consoleF match {
            case ReadLine =>
              for {
                data <- State.get[TestData]
                line = data.input.head
                _    <- State.set(data.copy(input = data.input.drop(1)))
              } yield line

            case PrintLine(line) =>
              State.modify[TestData](d => d.copy(output = line :: d.output))
          }
      })

    programState.eval(TestData("John" :: Nil, Nil))

Calvin Lee Fernandes
@calvinlfer
Oct 05 14:14
re. Free Monad, I was reading the red book and they talked about trampolining, didn't really understand it, what is that technique? they mentioned it was used to gain stack safety by moving computations to the heap
toxicafunk
@toxicafunk
Oct 05 14:18
its using thunks to avoid putting things in heap
() -> A
but would like to know the details as well :)
Jens Hoffmann
@jchoffmann
Oct 05 14:21
:thumbsup: thanks
Phong Nguyen
@phongngtuan
Oct 05 14:24
how does IO fits in the landscape with fs2 or monix observable?
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:24
thanks @jdegoes
I use ZIO + FS2 :D
toxicafunk
@toxicafunk
Oct 05 14:25
started with .Net
Ahmad Ragab
@ASRagab
Oct 05 14:25
Reactive Streams!
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:25
https://github.com/scalaz/scalaz-reactive :P
what about scalaz-stream?
Phong Nguyen
@phongngtuan
Oct 05 14:29
let's do that!
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:29
:+1:
toxicafunk
@toxicafunk
Oct 05 14:30
TDD -> Type Driven Development :D
Jens Hoffmann
@jchoffmann
Oct 05 14:30
:laughing:
work with smart people?
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:31
woah i didnt know you did that
how do u sign up?
toxicafunk
@toxicafunk
Oct 05 14:32
scalaz-metrics plz :-D
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:34
higher kinded people :P
Yash Datta
@saucam
Oct 05 14:34
:D
Jens Hoffmann
@jchoffmann
Oct 05 14:34
haha
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:35
can u go over Recursion schemes?
Muhammad Farag
@MuhammadFarag
Oct 05 14:36
thank you very much @jdegoes
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:36
+1 for applicative functor steroids
toxicafunk
@toxicafunk
Oct 05 14:37
+1 Applicative functors
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:38
+1 Higher Order Abstract Syntax for DSLs :D
@jdegoes you should do a poll
+1 for Co-things
Jens Hoffmann
@jchoffmann
Oct 05 14:39
+1 to poll, there's too many interesting topics, i also like the design exercise
Ahmad Ragab
@ASRagab
Oct 05 14:39

1. Mock Specs
2. Trampolining
3. Recursion Schemes
4. Designing Functional Program (Text based game)
5. Category Theory 101
6. Applicative Functors ++
7. First Order Abstract Syntax ~> Higher Order Abstract Syntax for DSL
8. Duals
9. Functors Heirarchy

Calvin Lee Fernandes
@calvinlfer
Oct 05 14:39
nice :D
toxicafunk
@toxicafunk
Oct 05 14:40
4,6,1,7
Jens Hoffmann
@jchoffmann
Oct 05 14:40
4, 6, 7, 5, 1, 3
Pierangelo Cecchetto
@pierangeloc
Oct 05 14:40
3, 7, 8
Alex Salguero
@hasumedic
Oct 05 14:40
4, 6, 7
Jens Hoffmann
@jchoffmann
Oct 05 14:40
now it depends how john implemented the |+| operation of our priority lists
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:41
lmao :D
Alex Salguero
@hasumedic
Oct 05 14:41
:laughing:
Yash Datta
@saucam
Oct 05 14:41
5, 4, 7, 8
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:41
3, 7, 8, 4
Ahmad Ragab
@ASRagab
Oct 05 14:41
Maybe we should put in survey monkey?
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:42
im creating one
Ahmad Ragab
@ASRagab
Oct 05 14:42
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:46
https://doodle.com/poll/55r6qr8vzv69n5yz
toxicafunk
@toxicafunk
Oct 05 14:49
voted, will be on mobile for an hour or so
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:50
thx guys
Muhammad Farag
@MuhammadFarag
Oct 05 14:54
I am not feeling very well, so I will be on and off for the rest of the day…
toxicafunk
@toxicafunk
Oct 05 14:55
Got bitten by the FP bug @MuhammadFarag
Ahmad Ragab
@ASRagab
Oct 05 14:55
ah sorry to hear that.
Muhammad Farag
@MuhammadFarag
Oct 05 14:58
loOol! Probably @toxicafunk :D
thanks @ASRagab
I guess setting on a bad chair for five days straight eating crap and only drinking coffee do that to you :)
Calvin Lee Fernandes
@calvinlfer
Oct 05 14:59
looks like FP design, AP functors ++, HOAS and Duals are winning :D
oop Recursion schemes are in there too
Muhammad Farag
@MuhammadFarag
Oct 05 15:01
I guess, if it was choose only your top 3, we might have seen different results.
Ahmad Ragab
@ASRagab
Oct 05 15:03
Yup
Alex Salguero
@hasumedic
Oct 05 15:03
Sounds good!
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:03
:+1:
i like business-y
Jens Hoffmann
@jchoffmann
Oct 05 15:04
seconded
Ahmad Ragab
@ASRagab
Oct 05 15:04
yeah
toxicafunk
@toxicafunk
Oct 05 15:05
Thirded
Alex Salguero
@hasumedic
Oct 05 15:05
I’d say the business-y, since the game part seems similar to the Hangman
Petar Djurkovic
@petar_djurkovic_twitter
Oct 05 15:05
business-y
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:05
accounting, loyalty points, etc?
Ahmad Ragab
@ASRagab
Oct 05 15:05
data processing
Arbër Shabhasa
@ashabhasa
Oct 05 15:05
Wel we could build an app that reads from a db and makes http cals
Petar Djurkovic
@petar_djurkovic_twitter
Oct 05 15:05
accounting, loyalty points, etc?
Arbër Shabhasa
@ashabhasa
Oct 05 15:06
that way we can see how to use zio with doobie or http4s
toxicafunk
@toxicafunk
Oct 05 15:06
Making service calls and dB calls. Maybe parsing JSON
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:06
day 6 :P
Petar Djurkovic
@petar_djurkovic_twitter
Oct 05 15:06
weekend
Jens Hoffmann
@jchoffmann
Oct 05 15:06
rather sketch only and touch on the other topics too
Ahmad Ragab
@ASRagab
Oct 05 15:06
yeah
Arbër Shabhasa
@ashabhasa
Oct 05 15:06
ok
toxicafunk
@toxicafunk
Oct 05 15:07
Http4s is actually easy . We can do it on our own
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:07
yeah, as much as i'd like a real world app, i wish we had more time
Jens Hoffmann
@jchoffmann
Oct 05 15:07
trade processing, valuation, clearing
Ahmad Ragab
@ASRagab
Oct 05 15:07
that sounds good, loyalty points
Jens Hoffmann
@jchoffmann
Oct 05 15:07
crpyto trading :D
Ahmad Ragab
@ASRagab
Oct 05 15:07
oh god
Alex Salguero
@hasumedic
Oct 05 15:07
Real app might not be a good idea for today, but would definitely attend to another course on something like that :thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:07
implement blockchain
haha
@jdegoes another course on that :) ?
toxicafunk
@toxicafunk
Oct 05 15:07
E-commerce or loyalty points I think
Jens Hoffmann
@jchoffmann
Oct 05 15:07
yeah something simpler
Alex Salguero
@hasumedic
Oct 05 15:08
Is next Monday fine with everybody? :)
Jens Hoffmann
@jchoffmann
Oct 05 15:08
maybe game world is still best
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:09
points
Alex Salguero
@hasumedic
Oct 05 15:09
Places where you can get points from?
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:10
places where you spend points too
Alex Salguero
@hasumedic
Oct 05 15:10
Tiers?
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:11
operations in our domain
Muhammad Farag
@MuhammadFarag
Oct 05 15:11
issuance
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:11
a customer earns loyalty points from an issuer
Ahmad Ragab
@ASRagab
Oct 05 15:11
Add/Substract Points
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:12
a customer spends loyalty points at a receiver
Alex Salguero
@hasumedic
Oct 05 15:13
email with points balance, or simply get points balance
Ahmad Ragab
@ASRagab
Oct 05 15:13
Notifications
maybe notification is a kind of data?
Open close account
Jens Hoffmann
@jchoffmann
Oct 05 15:14
sign up for LP offers?
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:15
feels like we're event storming :D
Ahmad Ragab
@ASRagab
Oct 05 15:16
product
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:16
product
Alex Salguero
@hasumedic
Oct 05 15:16
Sum of products?
Jens Hoffmann
@jchoffmann
Oct 05 15:16
*
Ahmad Ragab
@ASRagab
Oct 05 15:16
oooh
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:16
ooh
Ahmad Ragab
@ASRagab
Oct 05 15:16
haha
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:16
:D
points
Ahmad Ragab
@ASRagab
Oct 05 15:17
name, email
Jens Hoffmann
@jchoffmann
Oct 05 15:17
account
Ahmad Ragab
@ASRagab
Oct 05 15:17
feature request
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:17
product of sums
Yash Datta
@saucam
Oct 05 15:18
membership id
Phong Nguyen
@phongngtuan
Oct 05 15:18
id
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:18
point balance
Ahmad Ragab
@ASRagab
Oct 05 15:18
Account Status
Alex Salguero
@hasumedic
Oct 05 15:18
could you model balance as a List of previous point transactions?
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:18
tier?
sum
Ahmad Ragab
@ASRagab
Oct 05 15:19
sum
Pierangelo Cecchetto
@pierangeloc
Oct 05 15:19
sum
Jens Hoffmann
@jchoffmann
Oct 05 15:19
isn't that a balance of points rather than number?
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:20
history
Jens Hoffmann
@jchoffmann
Oct 05 15:20
is that the event sourcing way
toxicafunk
@toxicafunk
Oct 05 15:20
Event sourcing
Ahmad Ragab
@ASRagab
Oct 05 15:21
sum
Pierangelo Cecchetto
@pierangeloc
Oct 05 15:21
sum
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:21
sum
Jens Hoffmann
@jchoffmann
Oct 05 15:21
+
Alex Salguero
@hasumedic
Oct 05 15:24
from a modelling perspective? I don’t think so
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:24
i'd think so
toxicafunk
@toxicafunk
Oct 05 15:24
Make snapshot
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:24
maybe you can compress history
Jens Hoffmann
@jchoffmann
Oct 05 15:24
or define a way to combine transactions
so you can compact old ones
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:24
Monoid for Transactions :)
toxicafunk
@toxicafunk
Oct 05 15:24
After certain size: snapshot
Muhammad Farag
@MuhammadFarag
Oct 05 15:24
mmmm! is there a typesafe way to represent a dynamic sum type 🤔
Ahmad Ragab
@ASRagab
Oct 05 15:25
LazyList
yeah
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:26
let's fix it !
Muhammad Farag
@MuhammadFarag
Oct 05 15:26
yep
Pierangelo Cecchetto
@pierangeloc
Oct 05 15:28
is it a suggested practice to have our sealed traits for errors extend Exception?
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:34
transactions: DatabaseSource[Transaction]
instead of Source[DatabaseError, Transaction]
:+1: :D
product type?
Ahmad Ragab
@ASRagab
Oct 05 15:35
product, is my first guess
some kind of Numeric type
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:35
bigdecimal
yeah sure!
Ahmad Ragab
@ASRagab
Oct 05 15:35
business says no
:)
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:35
lmao
haha
product type
wrapper around something like UUID maybe?
Ahmad Ragab
@ASRagab
Oct 05 15:36
id UUID
Muhammad Farag
@MuhammadFarag
Oct 05 15:36
business will probably “ooops we thought we didn’t need it" later :D
That is a very good point :thumbsup:
Ahmad Ragab
@ASRagab
Oct 05 15:37
right
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:37
Points[A: Monoid]?
for commutativity?
ah makes sense
Customer[A]
Ahmad Ragab
@ASRagab
Oct 05 15:39
DatabaseDerived
has to take =>
* => *
Arbër Shabhasa
@ashabhasa
Oct 05 15:40
Shouldn't we use another type parmater like B
for Points
I meant in Account :D
Ahmad Ragab
@ASRagab
Oct 05 15:44
Redeem
Phong Nguyen
@phongngtuan
Oct 05 15:44
credit/debit
Ahmad Ragab
@ASRagab
Oct 05 15:44
Earn
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:44
Redeem/Earn?
Alex Salguero
@hasumedic
Oct 05 15:45
Add, spend, move?
Ahmad Ragab
@ASRagab
Oct 05 15:45
how did you know to make it covariant Transactions A
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:46
yeah
Ahmad Ragab
@ASRagab
Oct 05 15:46
RedemptionMethod
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:46
Reward/Item?
its in the context of an account?
Ahmad Ragab
@ASRagab
Oct 05 15:48
Earn
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:48
Earn?
Purchase
Transfer?
should that be RecipientAccountId
Phong Nguyen
@phongngtuan
Oct 05 15:50
extends Transaction?
we should not need AccountID type parameter on Redeem & Earn?
Jens Hoffmann
@jchoffmann
Oct 05 15:51
you should extend Transaction
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:51
i think balance 2nd type parameter should be B
sorry the Database Derived
Phong Nguyen
@phongngtuan
Oct 05 15:55
should we create a Monoid[Transaction[A, ?]]?
Calvin Lee Fernandes
@calvinlfer
Oct 05 15:57
i think you might need minus for redemptions and transfers
Phong Nguyen
@phongngtuan
Oct 05 15:58
we can't do times transaction though
Jens Hoffmann
@jchoffmann
Oct 05 16:01
you need to return IOs in balance
Ahmad Ragab
@ASRagab
Oct 05 16:03
why not?
sum
Phong Nguyen
@phongngtuan
Oct 05 16:04
product, sounds like it should be dynamic
Ahmad Ragab
@ASRagab
Oct 05 16:04
hmmm
Calvin Lee Fernandes
@calvinlfer
Oct 05 16:04
description
quantity
maybe a Purchase of Item
Muhammad Farag
@MuhammadFarag
Oct 05 16:05
Id? because it is probably gonna link to something?
Calvin Lee Fernandes
@calvinlfer
Oct 05 16:10
@jdegoes can u post what u have?
ty!
John A. De Goes
@jdegoes
Oct 05 16:11

    import scalaz.zio._

    sealed abstract class DatabaseError extends Exception
    trait Source[E, A] {
      def fold[Z](z: Z)(f: (Z, A) => Z): IO[E, Z]
    }
    type Database[A] = IO[DatabaseError, A]
    type DatabaseSource[A] = Source[DatabaseError, A]
    type DatabaseDerived[A, B] = DatabaseSource[A] => Database[B]

    trait Number[A] {
      def zero: A
      def one: A
      def plus(l: A, r: A): A
      def minus(l: A, r: A): A
      def times(l: A, r: A): A
    }
    object Number {
      def apply[A](implicit N: Number[A]): Number[A] = N
    }
    implicit class NumberSyntax[A](l: A) {
      def + (r: A)(implicit N: Number[A]): A = N.plus(l, r)
      def - (r: A)(implicit N: Number[A]): A = N.minus(l, r)
      def * (r: A)(implicit N: Number[A]): A = N.times(l, r)
    }

    final case class Customer[AccountID, Num](
      name: String,
      email: String,
      account: Account[AccountID, Num]
    )
    final case class Account[AccountID, Num](
      id  : AccountID,
      txns: DatabaseSource[Transaction[AccountID, Num]])
    object Account {
      import Transaction._
      type TxnDerived[A, B] = DatabaseDerived[Transaction[A, B], B]

      def balance[A, B: Number] : TxnDerived[A, B] =
        _.fold[B](Number[B].zero) {
          case (balance, Redeem  (v, _)) => balance - v
          case (balance, Earn    (v, _)) => balance + v
          case (balance, Transfer(v, _)) => balance - v
        }
      def status[A, B] : TxnDerived[A, Status] =
        _.fold[Status](Status.Open) {
          case (status, _) => status
        }

      def tier[A, B: Number: Order](tiers: Map[B, Tier]) : TxnDerived[A, B] =
        ???

      sealed trait Status
      object Status {
        case object Open extends Status
        case object Closed extends Status
      }
      sealed trait Tier
      object Tier {
        case object Silver   extends Tier
        case object Gold     extends Tier
        case object Platinum extends Tier
      }
    }
    final case class Reward()
    final case class Purchase(id: java.util.UUID, description: String, quantity: Int)

    sealed trait Transaction[+AccountID, +Num]
    object Transaction {
      final case class Redeem   [Num](amount: Num, reward: Reward) extends Transaction[Nothing, Num]
      final case class Earn     [Num](amount: Num, purchase: Purchase) extends Transaction[Nothing, Num]
      final case class Transfer [AccountID, Num](amount: Num, recipient: AccountID) extends Transaction[AccountID, Num]
    }

Calvin Lee Fernandes
@calvinlfer
Oct 05 17:10
:wave:
redeem, earn, transfer?
# of points
Either ?
Calvin Lee Fernandes
@calvinlfer
Oct 05 17:17
open close?
Calvin Lee Fernandes
@calvinlfer
Oct 05 17:23
maybe redeem, earn and transfer
wouldnt expect balance to fail that often (unless the database is down)
use our own sum type to model domain failure?
Ahmad Ragab
@ASRagab
Oct 05 17:36
does atomic's param need to be lazy here?
Ahmad Ragab
@ASRagab
Oct 05 17:42
IO[Exception, Batch]
no
Phong Nguyen
@phongngtuan
Oct 05 17:42
IO[Exception, Statement]?
Jens Hoffmann
@jchoffmann
Oct 05 17:45
this is the time when IntelliJ is helpful, implement missing functions :)
:laughing:
absolutely true
Phong Nguyen
@phongngtuan
Oct 05 17:50
pattern matching?
Ahmad Ragab
@ASRagab
Oct 05 17:51
self.zip._2
yah
not quite
Calvin Lee Fernandes
@calvinlfer
Oct 05 17:51
zip(self)
you get Statement[(A, A)]
Phong Nguyen
@phongngtuan
Oct 05 17:52
zipWith(self)((a,_) =>a) lol
Calvin Lee Fernandes
@calvinlfer
Oct 05 17:52
f(a)
Ahmad Ragab
@ASRagab
Oct 05 17:53
() => a
so
Phong Nguyen
@phongngtuan
Oct 05 17:53
zipWith(point(())( ...)
Calvin Lee Fernandes
@calvinlfer
Oct 05 17:53
(a, ()) => ...
:fish:
Jens Hoffmann
@jchoffmann
Oct 05 18:00
aaaaaah
Alex Salguero
@hasumedic
Oct 05 18:12
How much would a library like Doobie and its own ConnectionIO monad to chain queries help in here?
:thumbsup:
Calvin Lee Fernandes
@calvinlfer
Oct 05 18:23
thanks @jdegoes
Jens Hoffmann
@jchoffmann
Oct 05 18:23
thanks
Alex Salguero
@hasumedic
Oct 05 18:28
do you need UUID?
Calvin Lee Fernandes
@calvinlfer
Oct 05 18:34
can we switch to a simpler example and layer the applicative on that?
its becoming tricky to follow :(
that would be awesome :D
Ahmad Ragab
@ASRagab
Oct 05 18:37
null! 😱😱😱😱
YES
Calvin Lee Fernandes
@calvinlfer
Oct 05 18:37
10/10
would attend
yes
Ahmad Ragab
@ASRagab
Oct 05 18:38
we know both parsers at compile time
Calvin Lee Fernandes
@calvinlfer
Oct 05 18:38
because Parser is a sum-of-products data structure
so select gives you the ability to pick a branch at runtime
:+1:
Ahmad Ragab
@ASRagab
Oct 05 18:44
loyd
toxicafunk
@toxicafunk
Oct 05 18:47
Doesn't Ord works instead of Enum?
Arbër Shabhasa
@ashabhasa
Oct 05 18:48
You have resctricted the values you expect in input
Calvin Lee Fernandes
@calvinlfer
Oct 05 18:48
^so you have a finite amount of mappings
so its a matter of hand optimizing those mappings?
generate more intermediate data structures
Calvin Lee Fernandes
@calvinlfer
Oct 05 18:53
:+1:
@jdegoes are there any examples covering the building of the data structures + applicative capability + the compilation/introspection?
John A. De Goes
@jdegoes
Oct 05 19:06
https://stackoverflow.com/questions/7861903/what-are-the-benefits-of-applicative-parsing-over-monadic-parsing
http://doi.org/10.1145/2991041.2991042
Calvin Lee Fernandes
@calvinlfer
Oct 05 19:08
thank you!
John A. De Goes
@jdegoes
Oct 05 19:09
https://github.com/facebook/Haxl
toxicafunk
@toxicafunk
Oct 05 19:10
anyone has the latest exmaple? I was on mobile during half of it
Ahmad Ragab
@ASRagab
Oct 05 19:16
does let return an A or Expr[A]
ya
it is an A
toxicafunk
@toxicafunk
Oct 05 19:25
only 1 A?
toxicafunk
@toxicafunk
Oct 05 19:32
can we use sum types?
Phong Nguyen
@phongngtuan
Oct 05 19:35
can we make body a function of identifier?
Alex Salguero
@hasumedic
Oct 05 19:44
Definitely
Ahmad Ragab
@ASRagab
Oct 05 19:44
hell yeah
Calvin Lee Fernandes
@calvinlfer
Oct 05 19:46
IO.now(v)
Alex Salguero
@hasumedic
Oct 05 20:12
:thumbsup:
Arbër Shabhasa
@ashabhasa
Oct 05 20:16
Hey guys could anyone could anyone post the code for the Dsl example i missed some parts of it.
Ahmad Ragab
@ASRagab
Oct 05 20:17
My version suffers from an ambiguous implicit. That should be resolvable. But I couldn't do it the same way that John did
Phong Nguyen
@phongngtuan
Oct 05 20:20
can you try this?

    trait Dsl[Expr[_]] {
      def int(v: Int): Expr[Int]
      def plus(l: Expr[Int], r:Expr[Int]): Expr[Int]
      def minus(l: Expr[Int], r:Expr[Int]): Expr[Int]
      def times(l: Expr[Int], r: Expr[Int]): Expr[Int]
      def let[A, B](value: Expr[A], body: Expr[A] => Expr[B]): Expr[B]
    }

    object Dsl {
      def apply[F[_]: Dsl] = implicitly[Dsl[F]]
      import scalaz.zio._
      implicit def DslIO[E]: Dsl[IO[E, ?]] =
        new Dsl[IO[E, ?]] {
          override def int(v: Int): IO[E, Int] = IO.now(v)
          override def plus(l: IO[E, Int], r: IO[E, Int]): IO[E, Int] =
            l.seqWith(r)(_ + _)
          override def minus(l: IO[E, Int], r: IO[E, Int]): IO[E, Int] =
            l.seqWith(r)(_ - _)
          override def times(l: IO[E, Int], r: IO[E, Int]): IO[E, Int] =
            l.seqWith(r)(_ * _)
          override def let[A, B](value: IO[E, A],
                                 body: IO[E, A] => IO[E, B]): IO[E, B] =
            value.flatMap(a => body(IO.now(a)))
        }
    }

    implicit class DslSyntax[F[_]](l: F[Int]) {
      def + (r: F[Int])(implicit A: Dsl[F]): F[Int] = A.plus(l, r)
      def - (r: F[Int])(implicit A: Dsl[F]): F[Int] = A.minus(l, r)
      def * (r: F[Int])(implicit A: Dsl[F]): F[Int] = A.times(l, r)
    }
    def int[F[_]: Dsl](v: Int) = Dsl[F].int(v)
    def let[F[_]: Dsl, A, B](value: F[A])(body: F[A] => F[B]) = Dsl[F].let(value, body)
    def program[F[_]: Dsl] =
      let(int(10))(a =>
        let(int(20))(b =>
          a * a + b * b
        )
      )

    import scalaz.zio.IO
    val programIO: IO[Nothing, Int] = program[IO[Nothing, ?]]

oh this doesn't have the lambda part
Arbër Shabhasa
@ashabhasa
Oct 05 20:22
@phongngtuan thanks
Calvin Lee Fernandes
@calvinlfer
Oct 05 20:28
:scream: = compiler
Ahmad Ragab
@ASRagab
Oct 05 20:31
is there a valid construct that given a different compiler could handle and infinite Type
aren't we returning JsonF and not Json
nope
nvm
Ahmad Ragab
@ASRagab
Oct 05 20:36
is this compiling for you John

[error]  found   : Map[String,net.degoes.arts.exercises.fixpoint.Json.Json]
[error]     (which expands to)  Map[String,net.degoes.arts.exercises.fixpoint.Json.Fix[net.degoes.arts.exercises.fixpoint.JsonF]]
[error]  required: Map[String,net.degoes.arts.exercises.fixpoint.JsonF[net.degoes.arts.exercises.fixpoint.Json.Fix[net.degoes.arts.exercises.fixpoint.JsonF]]]
[error]         def obj(v: Map[String, Json]): Json = Fix[JsonF](Obj(v))

      case class Arr[A](array: List[JsonF[A]]) extends JsonF[A]
      case class Obj[A](obj: Map[String, JsonF[A]]) extends JsonF[A]

right
haha...
Alex Salguero
@hasumedic
Oct 05 20:39
:sweat_smile:
Arbër Shabhasa
@ashabhasa
Oct 05 20:39
You can do pattern matching
Calvin Lee Fernandes
@calvinlfer
Oct 05 20:45
better!
factored out the recursion
Phong Nguyen
@phongngtuan
Oct 05 20:46
wait where is the recursion...
Calvin Lee Fernandes
@calvinlfer
Oct 05 20:49
FUNCTOR!
map!
f(unfix)
no :(
Phong Nguyen
@phongngtuan
Oct 05 20:51
we need more constraint on F?
Alex Salguero
@hasumedic
Oct 05 20:51
because we cannot inspect F?
Arbër Shabhasa
@ashabhasa
Oct 05 20:51
Functor
Ahmad Ragab
@ASRagab
Oct 05 20:51
Apply
Calvin Lee Fernandes
@calvinlfer
Oct 05 20:52
Fix[F]
Phong Nguyen
@phongngtuan
Oct 05 20:52
Fix[F]
Arbër Shabhasa
@ashabhasa
Oct 05 20:52
Fix[F]
Alex Salguero
@hasumedic
Oct 05 20:52
Fix[F]
Phong Nguyen
@phongngtuan
Oct 05 20:52
Applicative then...
Calvin Lee Fernandes
@calvinlfer
Oct 05 20:53
do u have to unfix then f?
Arbër Shabhasa
@ashabhasa
Oct 05 20:53
unfix
Ahmad Ragab
@ASRagab
Oct 05 20:53
transform
Alex Salguero
@hasumedic
Oct 05 21:01
I couldn’t keep up with the code for this one… Hope you can paste the result here John :)
John A. De Goes
@jdegoes
Oct 05 21:01

object fixpoint {
    object classic {
      sealed trait Json
      case object Null extends Json
      case class Bool(value: Boolean) extends Json
      case class Str(value: String) extends Json
      case class Num(value: BigDecimal) extends Json
      case class Arr(value: List[Json]) extends Json
      case class Obj(value: Map[String, Json]) extends Json

      def renameField(old: String, newf: String): Json => Json =
        (json: Json) => json match {
          case Null => json
          case Bool(value) => json
          case Str(value) => json
          case Num(value) => json
          case Arr(value) => Arr(value.map(renameField(old, newf)))
          case Obj(map0) =>
            val map = map0.mapValues(renameField(old, newf))

            map.get(old).fold(json)(v2 => Obj(map + (newf -> v2)))
        }

      def collectFields: Json => List[String] =
        (json: Json) => json match {
          case Null => Nil
          case Bool(value) => Nil
          case Str(value) => Nil
          case Num(value) => Nil
          case Arr(value) => value.flatMap(collectFields)
          case Obj(map0) => map0.keys.toList ++ map0.values.toList.flatMap(collectFields)
        }
    }
    object fixed {
      sealed trait JsonF[+A]
      case object Null extends JsonF[Nothing]
      case class Bool(value: Boolean) extends JsonF[Nothing]
      case class Str(value: String) extends JsonF[Nothing]
      case class Num(value: BigDecimal) extends JsonF[Nothing]
      case class Arr[A](value: List[A]) extends JsonF[A]
      case class Obj[A](value: Map[String, A]) extends JsonF[A]
      object JsonF {
        implicit val FunctorJsonF: Functor[JsonF] =
          new Functor[JsonF] {
            def map[A, B](fa: JsonF[A])(f: A => B): JsonF[B] = fa match {
              case Null => Null
              case Bool(v) => Bool(v)
              case Str(v) => Str(v)
              case Num(v) => Num(v)
              case Arr(v) => Arr(v.map(f))
              case Obj(map) => Obj(map.mapValues(f))
            }
          }
      }

      sealed trait ListF[+A, +B]
      case object Nil extends ListF[Nothing, Nothing]
      case class Cons[A, B](head: A, tail: B) extends ListF[A, B]

      final case class Fix[F[_]](unfix: F[Fix[F]]) { self =>
        def transformDown(f: F[Fix[F]] => F[Fix[F]])(implicit F: Functor[F]): Fix[F] =
          Fix[F](f(unfix).map(_.transformDown(f)))

        def transformUp(f: F[Fix[F]] => F[Fix[F]])(implicit F: Functor[F]): Fix[F] =
          Fix[F](f(unfix.map(_.transformUp(f))))
      }

      type Json = Fix[JsonF]
      object Json {
        val null0: Json = Fix[JsonF](Null)
        def bool(v: Boolean): Json = Fix[JsonF](Bool(v))
        def str(v: String): Json = Fix[JsonF](Str(v))
        def num(v: BigDecimal): Json = Fix[JsonF](Num(v))
        def arr(v: List[Json]): Json = Fix[JsonF](Arr(v))
        def obj(v: Map[String, Json]): Json = Fix[JsonF](Obj(v))
      }

      import Json._

      val Example =
        obj(Map(
          "address" -> obj(Map(
            "number" -> str("221B"),
            "street" -> str("Baker Street")
          )),
          "name" -> str("Sherlock Holmes")
        ))

      def renameField(old: String, newf: String): JsonF[Fix[JsonF]] => JsonF[Fix[JsonF]] =
        _ match {
          case Null => Null
          case j @ Bool(_) => j
          case j @ Str(_) => j
          case j @ Num(_) => j
          case j @ Arr(_) => j
          case j @ Obj(map) => map.get(old).fold(j)(v => Obj(map + (newf -> v)))
        }
      // 
      // def collectFields: Json => List[String] =
      //   (json: Json) => json match {
      //     case Null => Nil
      //     case Bool(value) => Nil
      //     case Str(value) => Nil
      //     case Num(value) => Nil
      //     case Arr(value) => value.flatMap(collectFields)
      //     case Obj(map0) => map0.keys.toList ++ map0.values.toList.flatMap(collectFields)
      //   }

      Example.transformDown(renameField("street", "street_name"))
    }
  }

Alex Salguero
@hasumedic
Oct 05 21:01
Thanks! :thumbsup:
Ahmad Ragab
@ASRagab
Oct 05 21:03
List[String]
Fix[List[String]]
0-2
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:04
List[A]
Arbër Shabhasa
@ashabhasa
Oct 05 21:05
List[ist[String]]
Ahmad Ragab
@ASRagab
Oct 05 21:05
List[List[String]]
flatten
Arbër Shabhasa
@ashabhasa
Oct 05 21:05
flatten
Ahmad Ragab
@ASRagab
Oct 05 21:05
List[Map[String, A]]
Phong Nguyen
@phongngtuan
Oct 05 21:05
Map[String, List[String]]?
Ahmad Ragab
@ASRagab
Oct 05 21:07
not a List[Map[String, List[String]]?
yup
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:12
Fix[F]
Ahmad Ragab
@ASRagab
Oct 05 21:13
transformUp or Down, or cata
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:13
A
Ahmad Ragab
@ASRagab
Oct 05 21:13
an A
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:13
A
Ahmad Ragab
@ASRagab
Oct 05 21:14
F[A]
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:14
f
Arbër Shabhasa
@ashabhasa
Oct 05 21:14
f()
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:14
that
we good!
Phong Nguyen
@phongngtuan
Oct 05 21:14
is F[A] => A something similar to a Comonad?
Arbër Shabhasa
@ashabhasa
Oct 05 21:14
Algebra
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:14
F-Algebra i believe
Phong Nguyen
@phongngtuan
Oct 05 21:18
🤯
Alex Salguero
@hasumedic
Oct 05 21:18
:boom:
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:19
my mind is :sushi:
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:26
pattern match
nil is just z
apply f(a, z)
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:32
holy moly
Jens Hoffmann
@jchoffmann
Oct 05 21:32
:confetti_ball:
Ahmad Ragab
@ASRagab
Oct 05 21:34
heh
Muhammad Farag
@MuhammadFarag
Oct 05 21:35
Gone :D
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:35
my brain is deep fried
Alex Salguero
@hasumedic
Oct 05 21:35
wut?
toxicafunk
@toxicafunk
Oct 05 21:35
its been amazing john!
Muhammad Farag
@MuhammadFarag
Oct 05 21:35
I am just glad we have a long weekend :pray:
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:35
thank you so much @jdegoes !
Jens Hoffmann
@jchoffmann
Oct 05 21:36
excellent course @jdegoes , thank you very much!
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:37
hope we can meet IRL sometime soon :)
Ahmad Ragab
@ASRagab
Oct 05 21:37

object list {

          sealed trait ListF[+A, +B]

          case object Nil extends ListF[Nothing, Nothing]

          case class Cons[A, B](head: A, tail: B) extends ListF[A, B]


          implicit def FunctorListF[A0]: Functor[ListF[A0, ?]] =
            new Functor[ListF[A0, ?]] {
              override def map[A, B](fa: ListF[A0, A])(f: A => B): ListF[A0, B] = fa match {
                case Nil => Nil
                case Cons(head, tail) => Cons(head, f(tail))
              }
            }


          type ListR[A] = Fix[ListF[A, ?]]
          object ListR {
            def nil[A]: ListR[A] = Fix[ListF[A, ?]](Nil)
            def cons[A](head: A, tail: ListR[A]): ListR[A] = Fix(Cons(head, tail))
          }

          def foldRight[A, Z](list: ListR[A], z: Z)(f: (A, Z) => Z): Z =
            list.cata[Z] {
              case Nil => z
              case Cons(a, z) => f(a, z)
            }
        }

Arbër Shabhasa
@ashabhasa
Oct 05 21:37
thank you John.
Ahmad Ragab
@ASRagab
Oct 05 21:37
Thanks John
Muhammad Farag
@MuhammadFarag
Oct 05 21:37
OMG, thank you… @jdegoes I can’t believe we are done
Devesh Shetty
@devesh-shetty
Oct 05 21:37
Thank you John!
Alex Salguero
@hasumedic
Oct 05 21:37
It has been amazing @jdegoes! Thank you very much for sharing your knowledge with us. Looking forward to sign-up to the build an entire app workshop :smile:
Phong Nguyen
@phongngtuan
Oct 05 21:37
thank you John
toxicafunk
@toxicafunk
Oct 05 21:37
nice meeting u guys
hope we keep this channel around
Ahmad Ragab
@ASRagab
Oct 05 21:37
same to you all, great group
toxicafunk
@toxicafunk
Oct 05 21:37
u know, to share examples and doubts
Muhammad Farag
@MuhammadFarag
Oct 05 21:37
This message was deleted
Pontus Svenson
@xpontus
Oct 05 21:38
Thanks John! This has been wonderful days.
John A. De Goes
@jdegoes
Oct 05 21:38
Thank you all! You've been a great class. Please stay in touch. The channel will remain up so feel free to hang around! :smile:
Muhammad Farag
@MuhammadFarag
Oct 05 21:38
:thumbsup:
Ahmad Ragab
@ASRagab
Oct 05 21:38
:thumbsup:
Alex Salguero
@hasumedic
Oct 05 21:38
:thumbsup:
Jens Hoffmann
@jchoffmann
Oct 05 21:38
:thumbsup:
@calvinlfer would you mind sharing day 5 too? I missed something in the middle due to some emergency at home
Calvin Lee Fernandes
@calvinlfer
Oct 05 21:41
hey i dont have much of day5 :(
i just took some screenshots so i could pay attention
Jens Hoffmann
@jchoffmann
Oct 05 21:51
yeah maybe better strategy. sometimes it was a lot of typing to keep up
Ahmad Ragab
@ASRagab
Oct 05 22:37

https://gist.github.com/ASRagab/433be1f4e9bcd7f851d5e025d71241e6

I have most of day 5, some of it doesn't quite compile, but it is close, ambiguous implicit here, type mismatch there, you know the usual. But most of the correct structure is there.
Calvin Lee Fernandes
@calvinlfer
Oct 05 22:42
i was very interested in that introspection of applicative functors concept

object AppFun extends App {
  // Using Applicative to do introspection
  // Program has the Applicative capability because it implements zipWith
  sealed trait Program[+A] { self =>
    import Program._
    def zipWith[B, C](that: Program[B])(f: (A, B) => C): Program[C] = ZipWith(self, that, f)
    def zip[B](that: Program[B]): Program[(A, B)] = zipWith(that)(Tuple2(_, _))
    def *>[B](that: Program[B]): Program[B] = self.zip(that).map(_._2)
    def <*[B](that: Program[B]): Program[A] = self.zip(that).map(_._1)
    def map[B](f: A => B): Program[B] = zipWith(point(()))((a: A, _: Unit) => f(a))
  }

  // model our Program as data so we can introspect it
  object Program {
    case class Return[A](value: A) extends Program[A]
    case class ZipWith[A, B, C](l: Program[A], r: Program[B], f: (A, B) => C) extends Program[C]
    case class Add[A](value: Int) extends Program[Int]

    def point[A](a: => A) = Return(a)
  }

  import Program._
  val program: Program[Int] = Add(1) *> Add(2) *> Add(3)

  def verySimpleInterpreter(program: Program[Any]): Int = {
    // iterate through our data structure (thanks to Applicative) and process it
    def inner(intermediateState: Int, next: Program[Any]): Int = next match {
      case Return(_) =>
        println("Returning")
        intermediateState

      case Add(value) =>
        println("Adding")
        intermediateState + value

      case ZipWith(p0, p1, _) =>
        println(s"Zipping: $p0 and $p1")
        val acc0 = inner(intermediateState, p0)
        inner(acc0, p1)
    }
    inner(0, program)
  }

  println {
    verySimpleInterpreter(program)
  }
}

Did a silly example here
Jens Hoffmann
@jchoffmann
Oct 05 23:09
john committed today's results to https://github.com/jdegoes/functional-scala
_

John A. De Goes/functional-scala

Calvin Lee Fernandes
@calvinlfer
Oct 06 03:17
not sure how to roll with a Program[A] instead of Program[Any]
Yash Datta
@saucam
Oct 06 05:53
Thank you @jdegoes , it was a new world for me and would love to work towards understanding everything …
Thank you everyone for all your amazing sharing and support, hope to continue learning from everyone here :)
Dmitry Ivanov
@diminou
Oct 06 08:32
Thanks @jdegoes and thanks everyone, this course was extremely enlightening, even though I could only attend small bits of it.
toxicafunk
@toxicafunk
Oct 06 11:19
I wanted to share this example of using ZIO with http4s
https://github.com/toxicafunk/scalaz-metrics/tree/master/src/main/scala/scalaz/http
its for adding a http server to scalaz-metrics
it works but still needs to be polished a bit
but its enough to get u building services with http4s and zio
hardlianotion
@hardlianotion
Oct 06 11:56
@toxicafunk nice
Calvin Lee Fernandes
@calvinlfer
Oct 06 14:51
@jdegoes i'm confused about how you'd go about writing the interpreter for this: https://gist.github.com/calvinlfer/c38e681c3b83a746a8d534482275040c#file-day-5-scala-L295
When you go to pattern match on ZipWith you end up with Statement[Any], i would really appreciate an example even if it generates empty JStatements because I can't seem to wrap my head around this and its bothering me now haha
Managed to do something like so for my silly example which is just an accumulator that smashes As together

package com.github.calvin

import scalaz._
import Scalaz._

object SimpleApFun extends App {
  // Using Applicative to do introspection
  // Program has the Applicative capability because it implements zipWith
  sealed trait Program[+A] { self =>
    import Program._
    def zipWith[B, C](that: Program[B])(f: (A, B) => C): Program[C] = ZipWith(self, that, f)
    def zip[B](that: Program[B]): Program[(A, B)] = zipWith(that)(Tuple2(_, _))
    def *>[B](that: Program[B]): Program[B] = self.zip(that).map(_._2)
    def <*[B](that: Program[B]): Program[A] = self.zip(that).map(_._1)
    def map[B](f: A => B): Program[B] = zipWith(point(()))((a: A, _: Unit) => f(a))
  }

  // model our Program as data so we can introspect it
  object Program {
    case class Return[A](value: A) extends Program[A]
    case class ZipWith[A, B, C](l: Program[A], r: Program[B], f: (A, B) => C) extends Program[C]
    case class Add[A](value: A) extends Program[A]

    def point[A](a: => A) = Return(a)
  }

  import Program._
  val program: Program[Int] = Add(1) *> Add(2) *> Add(3)

  def verySimpleInterpreter[A: Monoid](program: Program[A]): A = {
    // iterate through our data structure (thanks to Applicative) and process it
    program match {
      case Return(_) => mzero[A]
      case Add(value) => value
      case ZipWith(l, r, _) =>
        verySimpleInterpreter(l.asInstanceOf[Program[A]]) |+| verySimpleInterpreter(r.asInstanceOf[Program[A]])
    }
  }

  println(verySimpleInterpreter(program))
}

_

John A. De Goes/functional-scala

John A. De Goes
@jdegoes
Oct 07 14:42
@calvinlfer Try writing the pattern match as zip : ZipWith[a, b, A] => and see if Scala likes it more.
_

John A. De Goes/functional-scala

Calvin Lee Fernandes
@calvinlfer
Oct 09 12:48
image.png
it ends up getting confused about the Monoid instances

Error:(37, 30) could not find implicit value for evidence parameter of type scalaz.Monoid[a]
        verySimpleInterpreter(zip.l) |+| verySimpleInterpreter(zip.r)

Calvin Lee Fernandes
@calvinlfer
Oct 09 17:32
@jdegoes that Batch[A] technique you did for Loyalty points is amazing, I just got it haha
https://gist.github.com/calvinlfer/321f0cd6a261df021912f991d56c218b#gistcomment-2726359
sken
@floreslorca
Oct 09 18:45
is there a place ehwere i can get the answers
i missed the last two days due to fam vacation
and want to catch up
if someone recorded it. even better :D promise not to share
Calvin Lee Fernandes
@calvinlfer
Oct 09 20:18
i posted my answers:
https://gist.github.com/calvinlfer/eeb556cea49bdc7461e645bd6803917c
https://gist.github.com/calvinlfer/c38e681c3b83a746a8d534482275040c
sken
@floreslorca
Oct 09 20:20
@calvinlfer thanks
_

John A. De Goes/functional-scala

Muhammad Farag
@MuhammadFarag
Oct 14 23:06

I hope everyone had a great weekend. I have a question, relates to type composition. How can one compose a sum type from two existing sum types? Let me give an example, let’s say We have two types WeekendDay: {Saturday, Sunday} and WorkDay: {Monday, Tuesday, Wednesday, Thursday, Friday. Can one construct a new type WeekDay = WeekendDay + WorkDay = {Monday, ..., Sunday}?

object Types{
  sealed trait WeekendDay
  case object Saturday extends WeekendDay
  case object Sunday extends WeekendDay

  sealed trait WorkDay
  case object Monday extends WorkDay
  case object Tuesday extends WorkDay
  case object Wednesday extends WorkDay
  case object Thursday extends WorkDay
  case object Friday extends WorkDay
}

I can do val w: Either[Types.WeekendDay, Types.WorkDay] = Left(Types.Saturday), but what if we are trying to create a sum type for three different types?

The best thing that came to mind was

sealed trait WeekDay

object WeekDay {
  case class WeekendDay(w: Types.WeekendDay) extends WeekDay
  case class WorkDay(w: Types.WorkDay) extends WeekDay
}

but, I wonder if there is a better way?
Muhammad Farag
@MuhammadFarag
Oct 14 23:22

val d: WeekDay = WeekDay.WorkDay(Types.Friday)

d match {
  case WeekDay.WorkDay(Types.Friday) => // do something
  case WeekDay.WeekendDay(Types.Saturday) => // do something
}

This will result in a warning because match is not exhaustive
Muhammad Farag
@MuhammadFarag
Oct 14 23:27
I have just seen this example from my notes A + B = {Left_a1, Left_a2, Right_b1} // It keeps track of where they come from… I guess it might be correct?
Muhammad Farag
@MuhammadFarag
Oct 14 23:33
WeekDay = WeekendDay + WorkDay = {WeekendDay: {Saturday, Sunday}, WorkDay: {Monday, Tuesday, Wednesday, Thursday, Friday}?
_

John A. De Goes/functional-scala

Alex Salguero
@hasumedic
Oct 16 13:48
@MuhammadFarag doesn’t this work?

sealed trait DayOfTheWeek

sealed trait WeekendDay extends DayOfTheWeek
case object Saturday extends WeekendDay
case object Sunday extends WeekendDay

sealed trait WorkDay extends DayOfTheWeek
case object Monday extends WorkDay
case object Tuesday extends WorkDay
case object Wednesday extends WorkDay
case object Thursday extends WorkDay
case object Friday extends WorkDay

@fabianpage recordings are not allowed AFAIK
toxicafunk
@toxicafunk
Oct 16 14:01
that should work @hasumedic
Calvin Lee Fernandes
@calvinlfer
Oct 16 14:20
@hasumedic that's pretty neat :D
Muhammad Farag
@MuhammadFarag
Oct 16 15:05
Thanks @hasumedic , What I was wondering if one doesn’t own WeekendDay and WorkDay? Or if one doesn’t want to create a common “parent” between the two types?
toxicafunk
@toxicafunk
Oct 16 15:14
I think scala doesn't provide a way to do that
But Scalaz has Coproduct which is basically an higher order Either
You can nest it similar to how you would do with Either
Muhammad Farag
@MuhammadFarag
Oct 16 15:23
Thank you @toxicafunk :thumbsup:
_

John A. De Goes/functional-scala

Ahmad Ragab
@ASRagab
Oct 19 16:19
@jdegoes and everyone, thanks again, for everyone's time I learned a lot, I am giving a talk at my company's meetup
(NYC, Nov. 13th) about Future vs IO and why you might want to consider IO. I was wondering if anyone had some good resources, or a nice summary of some of the differences and advantages/disadvantages.
John A. De Goes
@jdegoes
Oct 19 17:00
100x faster, resource safety (bracket), purely functional, lazy computation (unnecessary computations are terminated), etc
toxicafunk
@toxicafunk
Oct 19 18:43
and composable schedules!
John A. De Goes
@jdegoes
Oct 19 18:54
:)
_

John A. De Goes/functional-scala

Ahmad Ragab
@ASRagab
Oct 19 16:19
@jdegoes and everyone, thanks again, for everyone's time I learned a lot, I am giving a talk at my company's meetup
(NYC, Nov. 13th) about Future vs IO and why you might want to consider IO. I was wondering if anyone had some good resources, or a nice summary of some of the differences and advantages/disadvantages.
John A. De Goes
@jdegoes
Oct 19 17:00
100x faster, resource safety (bracket), purely functional, lazy computation (unnecessary computations are terminated), etc
toxicafunk
@toxicafunk
Oct 19 18:43
and composable schedules!
John A. De Goes
@jdegoes
Oct 19 18:54
:)
_

John A. De Goes/functional-scala

philglover
@philglover
Oct 21 08:22
Hi
John A. De Goes
@jdegoes
Oct 21 08:23
https://github.com/jdegoes/functional-scala
https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc
https://github.com/scalaz/scalaz/tree/series/7.3.x/core/src/main/scala/scalaz
https://www.scala-lang.org/api/2.12.x/index.html
https://scalaz.github.io/scalaz-zio/
Wojtek Malinowski
@wojtek-sb
Oct 21 09:51
a bit of topic but is it too cold for anyone else in the room?
Dafydd Rees
@dafydd
Oct 21 09:52
yes ⛄️
Adrian Tubio Noya
@atnoya
Oct 21 10:07
In your example, how do you keep track of the Characters position?
Adrian Tubio Noya
@atnoya
Oct 21 10:15
nvm, I have just seen it when you scrolled right :)
rgagedv01
@rgagedv01
Oct 21 11:03
What is the correct implementation for - final case class Charge(/* ??? */) def buyCoffee2(account: Account): (Coffee, Charge) = ???
Wojtek Malinowski
@wojtek-sb
Oct 21 11:03
def buyCoffee2(account: Account): (Coffee, Charge) = {
val coffee = Coffee()
(coffee, Charge(coffee.price, account))
}
rmsa
@rmsa
Oct 21 11:10
Scalazzi, I suppose: https://github.com/scalaz/scalazzi
richard-gibson
@richard-gibson
Oct 21 11:26
what time are we back from lunch?
Stefano Tondo
@stondo
Oct 21 11:38
@rgagedv01: you might want to take a look at this book -> https://www.manning.com/books/functional-programming-in-scala. There you can find a detailed explanation of the buyCoffee example.
Chapter 1 of the above mentioned book is free and it contains the buyCoffee extended example
rgagedv01
@rgagedv01
Oct 21 11:55
Thank you Stefano!
rgagedv01
@rgagedv01
Oct 21 12:10
If anyone has both implementations for the draw function, could you please post them here?
Stefano Tondo
@stondo
Oct 21 12:11
yeah please, I missed some as well
Adrian Tubio Noya
@atnoya
Oct 21 12:11
I’ve solution 1
rgagedv01
@rgagedv01
Oct 21 12:11
Also, could someone post an explanation on how you would actually get the 2nd example executable? As in how you assign directions to each case object.
Adrian Tubio Noya
@atnoya
Oct 21 12:12

  type Canvas = List[List[Boolean]]
  type Point = (Int, Int)
  type DrawFunction = (Point, Canvas) => (Point, Canvas)

  def goLeft: DrawFunction = (p, c) => ((p._1 - 1, p._2), c)
  def goRight: DrawFunction = (p, c) => ((p._1 + 1, p._2), c)
  def goUp: DrawFunction = (p, c) => ((p._1, p._2 - 1), c)
  def goDown: DrawFunction = (p, c) => ((p._1, p._2 + 1), c)

  def draw: DrawFunction = (p, c) => {
    val (x, y) = p
    def wrap[A](l: List[A], x: Int): Int =
      if (x < 0) (l.length - 1) + ((x + 1) % l.length) else x % l.length

    val x2 = wrap(c, x)
    val y2 = wrap(c(x2), y)

    (x, y) -> c.updated(x2, c(x2).updated(y2, true))
  }

rmsa
@rmsa
Oct 21 12:12
For the second one I have just the types and function signature:

sealed trait Stroke
case object Left extends Stroke
case object Right extends Stroke
case object Up extends Stroke
case object Down extends Stroke
def draw(size: Int, commands: List[Stroke]): List[List[Boolean]] = ???

rgagedv01
@rgagedv01
Oct 21 13:24
What is the second groupBy implementation?
Wojtek Malinowski
@wojtek-sb
Oct 21 13:27
I came up with something like that:

object groupBy2 {
    def apply[A, B, C](l: List[A], by: A => B)(reducer: (B, List[A]) => C): Map[B, C] =
      l.groupBy(by).map{ case (b, lc) => (b, reducer(b, lc))}
  }

rgagedv01
@rgagedv01
Oct 21 13:27
I did something similar, but I was thinking there was a cleaner implementation.
Stefano Tondo
@stondo
Oct 21 13:28
I thought we were not allowed to use .groupBy
Wojtek Malinowski
@wojtek-sb
Oct 21 13:28
then whoooops
Stefano Tondo
@stondo
Oct 21 13:29
I wrote this:

  object groupBy2 {
    def apply[A, B, C](l: List[A],
                 by: A => B)(
                  reducer: (B, List[A]) => C):
    Map[B, C] = l.map(by).map((b: B) => (b, reducer(b, l))).toMap
  }

but I' really not sure if it is correct by any means
rmsa
@rmsa
Oct 21 13:30
It's not miles away from mine:

object groupBy2 {
    def groupBy2[A, B, C](l: List[A], by: A => B)(
      reducer: (B, List[A]) => C
    ): Map[B, C] =  l.map{ a =>
      val byField = by(a)
      (byField, reducer(byField, l.filter(_ != byField)))
    }.toMap
  }

Stefano Tondo
@stondo
Oct 21 13:30
perhaps we should ask John :-)
rgagedv01
@rgagedv01
Oct 21 13:30
Yeah, I just wasn't sure the best way to get the initial a value.
rmsa
@rmsa
Oct 21 13:31
But I suppose that, more than the implementation, the important bit is to learn the lesson of how easier and more powerful the groupBy implementation was after using type parameters
Tim Pigden
@TimPigden
Oct 21 13:34
slightly long-winded

    def apply[A, B, C](
                l: List[A],
                by: A => B)
                (reducer: (B, List[A]) => C): Map[B, C] = {
      val mapA: Map[B, List[A]] = Map.empty
      l.foldLeft(mapA) { (acc, it) =>
        val gb: B = by(it)
        val l = it :: acc.getOrElse(gb, List.empty)
        acc + (gb -> l)
      }.map { p => p._1 -> reducer(p._1, p._2)}

   }

Dan
@shinyhappydan_twitter
Oct 21 13:35
Was I cheating to use the scala groupby? :D
richard-gibson
@richard-gibson
Oct 21 13:36

  object groupBy2 {
    def apply[A, B, C](l: List[A], by: A => B, reducer: (B, List[A]) => C) : Map[B, C] =

     l.map(e => (by(e), l)).foldLeft(Map.empty[B, C])((acc, el) => acc + (el._1 -> reducer(el._1, el._2)))
  }

Wouter Lammers
@WtrLammers_twitter
Oct 21 14:24
trait Answer6[F[_], G[H[_]]]
Wojtek Malinowski
@wojtek-sb
Oct 21 14:24
This message was deleted
jbwheatley
@jbwheatley
Oct 21 14:25
trait Answer6[A[_],B[_[_]]]
richard-gibson
@richard-gibson
Oct 21 14:25
trait Answer6[A[_], NewType]
Adrian Tubio Noya
@atnoya
Oct 21 14:25
trait Answer6[F[_], G[_[_]]]
Jingkei Ly
@Jkly
Oct 21 14:25
trait Answer6[A[_], B[C[_]]]
ChocPanda
@choc_panda_twitter
Oct 21 14:25
trait Answer6[A[_], B[_[_]]]
rgagedv01
@rgagedv01
Oct 21 14:26
trait Answer6[A[_], B[_[_]]]
Dafydd Rees
@dafydd
Oct 21 14:26
trait Answer6[A[_], B[C[_]]]
Aaron Delaplane
@AaronDelaplane
Oct 21 14:27
[_[_], _[_, _]]
Alex Olkhovskiy
@lxol
Oct 21 14:27
trait Answer6[A[], B[C[]]]
Dan
@shinyhappydan_twitter
Oct 21 14:36
At the position we're calling drop we could call tail safely I think
richard-gibson
@richard-gibson
Oct 21 14:40

  val ListSized: Sized[List] =
  new Sized[List] {
    override def size[A](fa: List[A]): Int = fa.length
  }

Dan
@shinyhappydan_twitter
Oct 21 14:40

  val listSized = new Sized[List] {
    override def size[A](fa: List[A]): Int = fa.length
  }

Wojtek Malinowski
@wojtek-sb
Oct 21 14:40

  val SizedList: Sized[List] = new Sized[List] {
    def size[A](fa: List[A]): Int = fa.length
  }

Jingkei Ly
@Jkly
Oct 21 14:40

val ListSized: Sized[List] = new Sized[List] {
    override def size[A](fa: List[A]): Int = fa.size
  }

Adrian Tubio Noya
@atnoya
Oct 21 14:41

 val sizedList = new Sized[List] {
    override def size[A](fa: List[A]): Int = fa.size
  }

ChocPanda
@choc_panda_twitter
Oct 21 14:41

  val ListSized = new Sized[List] {
    override def size[A](f: List[A]) = f.length
  }

philglover
@philglover
Oct 21 14:41
val listSized = new Sized[List] {
override def sizeA: Int = fa.size
}
Tim Pigden
@TimPigden
Oct 21 14:41


  val listSized = new Sized[List] {
    override def size[A](fa: List[A]): Int = fa.size
  }

Aaron Delaplane
@AaronDelaplane
Oct 21 14:42
val ListSized: Sized[List] = new Sized[List] { def size[A](fa: List[A]): Int = fa.length }
Tim Pigden
@TimPigden
Oct 21 14:43
```def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ? ]] {
override def sizeA: Int = fa.size
}
rmsa
@rmsa
Oct 21 14:48
about these "type lambdas" => https://underscore.io/blog/posts/2016/12/05/type-lambdas.html
Adrian Tubio Noya
@atnoya
Oct 21 14:48

def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
    override def size[A](fa: Map[K, A]): Int = fa.size
  }

Nabodit Paudyal
@NaBandit
Oct 21 14:48
def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
def sizeA:Int = fa.size
}

 def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
    def size[A](fa:Map[K, A]):Int = fa.size
  }

Wojtek Malinowski
@wojtek-sb
Oct 21 14:48

  def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
    def size[A](fa: Map[K, A]): Int = fa.size
  }

ChocPanda
@choc_panda_twitter
Oct 21 14:49

  def MapSized2[K]: Sized[Map[K, ?]] = new Sized[Map[K, ?]] {
    override def size[V](f: Map[K, V]) = f.size
  }

richard-gibson
@richard-gibson
Oct 21 14:54

  def Tuple3Sized[C, B]: Sized[Tuple3[C, B, ?]] = new Sized[Tuple3[C, B, ?]] {
    override def size[A](fa: (C, B, A)): Int = 1 //There is 1 A
  }

rgagedv01
@rgagedv01
Oct 21 15:39
Could someone please post the code for LessThanList
Adrian Tubio Noya
@atnoya
Oct 21 15:52

    implicit def listLessThan[A: LessThan]: LessThan[List[A]] = new LessThan[List[A]] {
        def lt(a: List[A], b: List[A]): Boolean = {
            (a, b) match {
                case (Nil, _) => true
                case (_, Nil) => false
                case (l :: _, r :: _) => ltA.lt(l, r)
            }
        }
    }

Dan
@shinyhappydan_twitter
Oct 21 15:53
Where do you put typeclass implementations when you didn't create the data class OR the typeclass?
Aaron Delaplane
@AaronDelaplane
Oct 21 15:53
@jdegoes Do type bounds generally represent a code smell?
Adrian Tubio Noya
@atnoya
Oct 21 15:54
@rgagedv01 sorry there was a bug in what I pasted above

    implicit def listLessThan[A: LessThan]: LessThan[List[A]] = new LessThan[List[A]] {
        def lt(a: List[A], b: List[A]): Boolean = {
            (a, b) match {
                case (Nil, _) => true
                case (_, Nil) => false
                case (l :: _, r :: _) => l < r
            }
        }
    }

Dan
@shinyhappydan_twitter
Oct 21 16:06
I like the sealed trait one better but I had this:

case class MyPath(path: List[String])
  implicit val MyPathPathLike: PathLike[MyPath] = new PathLike[MyPath] {
    override def child(parent: MyPath, name: String): MyPath = MyPath(parent.path :+ name)

    override def parent(node: MyPath): Option[MyPath] = node.path match {
      case Nil => None
      case nonEmpty => Some(MyPath(nonEmpty.dropRight(1)))
    }

    override def root: MyPath = MyPath(Nil)
  }

implicit val FilePathLike: PathLike[java.io.File] = new PathLike[java.io.File] {
    override def child(parent: File, name: String): File = new File(parent, name)

    override def parent(node: File): Option[File] = Option(node.getParentFile)

    override def root: File = new File("/")
  }

Nabodit Paudyal
@NaBandit
Oct 21 16:15


  implicit val FilterableList: Filterable[List] = new Filterable[List] {
  override def filter[A](fa: List[A], f: A => Boolean): List[A] =
    fa.filter(f)
  }

ChocPanda
@choc_panda_twitter
Oct 21 16:15

  def sort2[A: Ord](l: List[A]): List[A] = l match {
    case Nil => Nil
    case x :: _ =>
      val grouped = l.groupBy(_ =?= x)

      grouped.getOrElse(LT, Nil) ++ grouped.getOrElse(EQUAL, Nil) ++ grouped.getOrElse(GT, Nil)
  }

richard-gibson
@richard-gibson
Oct 21 16:17

  implicit val ListCollection: Collection[List] = new Collection[List] {
    override def empty[A]: List[A] = List.empty[A]

    override def cons[A](a: A, as: List[A]): List[A] = a :: as

    override def uncons[A](fa: List[A]): Option[(A, List[A])] =
      fa.headOption.map(a => (a, fa.tail))
  }

Tim Pigden
@TimPigden
Oct 21 16:17
```
Wojtek Malinowski
@wojtek-sb
Oct 21 16:17

  implicit val ListCollection: Collection[List] = new Collection[List] {
    override def empty[A]: List[A] = List.empty

    override def cons[A](a: A, as: List[A]): List[A] = a :: as

    override def uncons[A](fa: List[A]): Option[(A, List[A])] = fa match {
      case Nil => None
      case x :: tail => Some((x, tail))
    }
  }

Tim Pigden
@TimPigden
Oct 21 16:18

  implicit val ListCollection: Collection[List] = new Collection[List] {
    override def empty[A]: List[A] = List.empty[A]

    override def cons[A](a: A, as: List[A]): List[A] = a :: as

    override def uncons[A](fa: List[A]): Option[(A, List[A])] =
      fa.headOption.map(h => h -> fa.dropRight(1))
  }

Wouter Lammers
@WtrLammers_twitter
Oct 21 16:18
anyone exercise 5?
Adrian Tubio Noya
@atnoya
Oct 21 16:18

  //
  // EXERCISE 5
  //
  // Create a syntax class for `Filterable` that lets you call `.filter` on any
  // type for which there exists a `Filterable` instance.
  //
  implicit class FilterableSyntax[F[_], A](fa: F[A]) {
    def filter(f: A => Boolean)(implicit F: Filterable[F]): F[A] = F.filter(fa, f)
  }

Wouter Lammers
@WtrLammers_twitter
Oct 21 16:20
Can you do 5 with a context bound instead?
Adrian Tubio Noya
@atnoya
Oct 21 16:20
No because the type parameter is part of the implicit class
you could, but then you would have the ugly compiler errors or the lack of ability to use AnyVal
But not at the method level
Wouter Lammers
@WtrLammers_twitter
Oct 21 16:21
thanks
Aaron Delaplane
@AaronDelaplane
Oct 21 16:32
Why sealed traits and not abstract classes for modeling interfaces? I always use traits but am not sure why this is preferred
Stefano Tondo
@stondo
Oct 21 16:41
Can anyone please paste the whole code for the LessThan/LessThanInt/LessThanList? One of my cats went on rampage and I had to make sure he didn't break too many stuff :D So my solution isn't complete and some implicit are giving me problems
rmsa
@rmsa
Oct 21 18:45
@stondo I wasn't able to copy the implementation of the sort method, so what I have is incomplete. In any case, this is what I have:

trait LessThan[A] { // <- this is a type class

  def lt(l: A, r: A): Boolean

}

object LessThan {

    // gives an instance of the LessThan of A so that then we can have, for instance, this: val xxx = LessThan[Int]
    def apply[A](implicit a: LessThan[A]): LessThan[A] = a

    implicit val LessThanInt: LessThan[Int] = (l: Int, r: Int) => l < r

    implicit def LessThanList[A](implicit A: LessThan[A]): LessThan[List[A]] =
      (l: List[A], r: List[A]) =>
        (l, r) match {
          case (Nil, _)           => true
          case (_, Nil)           => false
          case (lh :: _, rh :: _) => A.lt(lh, rh)
      }

    implicit class LessThanSyntax[A](l: A) {
      def < (r: A)(implicit A: LessThan[A]): Boolean = A.lt(l, r)
    }
  }

  val lessThanIntTypeClass = LessThan[Int]
  // val lessThanStringTypeClass = LessThan[String] // doesn't compile because there's no instance for String

  // In [A: LessThan], LessThan is a ContextBound
  def sort0[A: LessThan](l: List[A])(r: List[A]): List[A] = ???

Stefano Tondo
@stondo
Oct 21 19:32
@rmsa thanks!
Stefano Tondo
@stondo
Oct 21 20:04
This should be sort0 implementation, but please correct me if I'm wrong.

  def sort0[A](l: List[A])(implicit lt: LessThan[A]): List[A] = l match {
    case Nil => Nil
    case x :: xs =>
      val (lessThan, notLessThan) = xs.partition(lt.lt(_, x))

      sort0(lessThan)(lt) ++ List(x) ++ sort0(notLessThan)(lt)
  }

Aaron Delaplane
@AaronDelaplane
Oct 21 21:08

Does anyone know of any documentation or notes regarding the asterisk notation to describing higher kinded types:

  trait `* => *`[F[_]]
  trait `[*, *] => *`[F[_, _]]
  trait `(* => *) => *`[T[_[_]]]

I'd just like to read a bit more about it. It's the first time I've seen it. Thanks
rmsa
@rmsa
Oct 21 21:17
@AaronDelaplane : This article is in Haskell, but it touches the subject: https://diogocastro.com/blog/2018/10/17/haskells-kind-system-a-primer/. I haven't read it myself, so I'm not sure whether it is hard to follow.
@stondo Thanks for the sort0 :)
richard-gibson
@richard-gibson
Oct 21 21:37
@AaronDelaplane Another Haskell article. Learn you a Haskell has a section on this here http://learnyouahaskell.com/making-our-own-types-and-typeclasses#kinds-and-some-type-foo
I found it to be really good.
_

John A. De Goes/functional-scala

John A. De Goes
@jdegoes
Oct 22 07:55
Reminder to remote attendees: the video link changes each day. See the intro email.
Stefano Tondo
@stondo
Oct 22 08:00
good morning everyone
rmsa
@rmsa
Oct 22 08:02
Morning!
jbwheatley
@jbwheatley
Oct 22 08:41
def append(f1: NotEmpty[A], f2: => NotEmpty[A]): NotEmpty[A] = NotEmpty(f1.head, Some(f1.tail.fold(f2)(tail => append(tail, f2))))
Wojtek Malinowski
@wojtek-sb
Oct 22 08:42

  implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] = new Semigroup[NotEmpty[A]] {
    def append(f1: NotEmpty[A], f2: => NotEmpty[A]): NotEmpty[A] = f1 match {
      case NotEmpty(h, None) => NotEmpty(h, Some(f2))
      case NotEmpty(h, Some(o)) => NotEmpty(h, Some(append(o, f2)))
    }
  }

Will Watkins
@wwatkins09
Oct 22 08:42
Would it be possible to repeat the general definition of a semigroup?
ChocPanda
@choc_panda_twitter
Oct 22 08:42

  implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] = new Semigroup[NotEmpty[A]] {
    override def append(l: NotEmpty[A], r: => NotEmpty[A]) = new NotEmpty(l.head, l.tail.map(append(_, r)).orElse(Option(r)))
  }

Wouter Lammers
@WtrLammers_twitter
Oct 22 08:42

  implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] = new Semigroup[NotEmpty[A]] {
    override def append(f1: NotEmpty[A], f2: => NotEmpty[A]): NotEmpty[A] = {
      NotEmpty(f1.head, f1.tail.fold(Some(f2))(t => Some(t |+| f2)))
    }
  }

richard-gibson
@richard-gibson
Oct 22 08:43

implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] = new Semigroup[NotEmpty[A]] {
    override def append(f1: NotEmpty[A], f2: => NotEmpty[A]): NotEmpty[A] =
      f1 match {
        case NotEmpty(hd, None) => NotEmpty(hd, Option(f2))
        case NotEmpty(hd, Some(s)) => NotEmpty(hd, Some(append(s, f2)))
      }
  }

Wojtek Malinowski
@wojtek-sb
Oct 22 08:58

  implicit val ConjMonoid: Monoid[Conj] = new Monoid[Conj] {
    def zero: Conj = Conj(true)

    def append(f1: Conj, f2: => Conj): Conj = Conj(f1.value && f2.value)
  }

ChocPanda
@choc_panda_twitter
Oct 22 08:59


  implicit val ConjMonoid: Monoid[Conj] = new Monoid[Conj] {
    def zero: Conj = Conj(true)
    def append(l: Conj, r: => Conj): Conj = Conj(l.value && r.value)
  }


  def OptionMonoid[A: Semigroup]: Monoid[Option[A]] = new Monoid[Option[A]] {
    override def zero = None
    override def append(l: Option[A], r: => Option[A]): Option[A]= 
        (l, r) match {
          case (None, _) => None
          case (_, None) => None
          case (Some(l), Some(r)) => Option(l |+| r)
        }
  }

ChocPanda
@choc_panda_twitter
Oct 22 09:19



  final case class Permission(resources: Map[String, Set[PermissionType]] = Map.empty)
  sealed trait PermissionType
  case object Read extends PermissionType
  case object Write extends PermissionType

  implicit val MonoidPermission: Monoid[Permission] = new Monoid [Permission]{
    override def zero = Permission(mzero[Map[String, Set[PermissionType]]])
    override def append(l: Permission, r: => Permission) = Permission(l.resources |+| r.resources)
  }

Dafydd Rees
@dafydd
Oct 22 09:20

case class Capability(name:String, verb:String, resource:String)
 case class Permission(capabilities:Set[Capability])

  implicit val MonoidPermission: Monoid[Permission] = new Monoid[Permission] {
    override def zero: Permission = Permission(Set.empty[Capability])
    override def append(l:Permission, r: => Permission): Permission = Permission(l.capabilities ++ r.capabilities)
  }
  val example2 = mzero[Permission] |+| Permission(Set(Capability("eric","write","doc")))

Dan
@shinyhappydan_twitter
Oct 22 09:24

sealed trait Capability
  case object Read extends Capability
  case object Write extends Capability

  implicit val CapabilitySemigroup: Semigroup[Capability] = new Semigroup[Capability] {
    override def append(f1: Capability, f2: => Capability): Capability = if (f1 == Write || f2 == Write) Write else Read
  }
  case class Permission(resourceCapabilities: Map[String, Capability])
  implicit val MonoidPermission: Monoid[Permission] = new Monoid[Permission] {
    override def zero: Permission = Permission(Map.empty)

    override def append(f1: Permission, f2: => Permission): Permission = {
      Permission(f1.resourceCapabilities |+| f2.resourceCapabilities)
    }
  }

I assumed write meant read too
and I suppose I was using Option to model no permission
ChocPanda
@choc_panda_twitter
Oct 22 09:41


  //
  // EXERCISE 9
  //
  // Try to define an instance of `Monoid` for `NotEmpty` for any type `A`.
  //
  implicit def MonoidNotEmpty[A: Monoid]: Monoid[NotEmpty[A]] = new Monoid[NotEmpty[A]] {
    override def zero = NotEmpty(mzero[A], None)
    override def append(l: NotEmpty[A], r: => NotEmpty[A]): NotEmpty[A] = new NotEmpty(l.head, l.tail.map(append(_, r)).orElse(Option(r)))
  }

Wouter Lammers
@WtrLammers_twitter
Oct 22 09:58

  implicit val BTreeFunctor: Functor[BTree] =
    new Functor[BTree] {
      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] =
        fa match {
          case Leaf(a) => Leaf(f(a))
          case Fork(l, r) => Fork(map(l)(f), map(r)(f))
        }
    }

ChocPanda
@choc_panda_twitter
Oct 22 09:58

  implicit val BTreeFunctor: Functor[BTree] =
    new Functor[BTree] {
      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] =
        fa match {
          case Leaf(a) => Leaf(f(a))
          case Fork(l, r) => Fork(map(l)(f), map(r)(f))
        }
    }

ChocPanda
@choc_panda_twitter
Oct 22 10:09

  implicit val NothingFunctor: Functor[Nothing] = new Functor[Nothing] {
    override def map[A, B](fa: Nothing)(f: A => B) = fa
  }

ChocPanda
@choc_panda_twitter
Oct 22 10:15

    implicit def ParserFunctor[E]: Functor[Parser[E, ?]] =
      new Functor[Parser[E, ?]] {
        def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] =
          Parser(fa.run andThen { _.map { case (s, a) => (s, f(a)) } })
      }

ChocPanda
@choc_panda_twitter
Oct 22 10:23

  implicit def FunctorSumFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorSum[F, G, ?]] = new Functor[FunctorSum[F, G, ?]]  {
      override def map[A, B](fsa: FunctorSum[F, G, A])(f: A => B) = {
        fsa match {
          case FunctorSum(Left(fa)) => FunctorSum(Left(fa.map(f)))
          case FunctorSum(Right(ga)) => FunctorSum(Right(ga.map(f)))
        }
      }
    }

Stefano Tondo
@stondo
Oct 22 10:24
can anyone please paste the FunctorProduct?
Dan
@shinyhappydan_twitter
Oct 22 10:25

case class FunctorProduct[F[_], G[_], A](l: F[A], r: G[A])
  implicit def FunctorProductFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorProduct[F, G, ?]] = new Functor[FunctorProduct[F, G, ?]] {
    override def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] = {
      FunctorProduct(fa.l.map(f), fa.r.map(f))
    }
  }

Stefano Tondo
@stondo
Oct 22 10:25
thanks Dan
ChocPanda
@choc_panda_twitter
Oct 22 10:26

  implicit def FunctorProductFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorProduct[F, G, ?]] = new Functor[FunctorProduct[F, G, ?]] {
      override def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] = {
        FunctorProduct(fa.l.map(f), fa.r.map(f))
      }
    }

Adrian Tubio Noya
@atnoya
Oct 22 10:27

case class FunctorSum[F[_], G[_], A](run: Either[F[A], G[A]])
  implicit def FunctorSumFunctor[F[_]: Functor, G[_]: Functor]: Functor[FunctorSum[F, G, ?]] = new Functor[FunctorSum[F, G, ?]] {
    def map[A, B](fa: FunctorSum[F, G, A])(f: A => B): FunctorSum[F, G, B] = {
      FunctorSum(fa.run.fold(l => Left(l.map(f)),r => Right(r.map(f))))
    }
  }

Wouter Lammers
@WtrLammers_twitter
Oct 22 10:27

    override def map[A, B](fa: FunctorSum[F, G, A])(f: A => B): FunctorSum[F, G, B] = {
      FunctorSum(fa.run.bimap(_.map(f), _.map(f)))
    }

ChocPanda
@choc_panda_twitter
Oct 22 10:31

  implicit def FunctorNestFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorNest[F, G, ?]] = new Functor[FunctorNest[F, G, ?]] {
      override def map[A, B](fa: FunctorNest[F, G, A])(f: A => B): FunctorNest[F, G, B] = {
        FunctorNest(fa.run.map(_.map(f)))
      }
    }

Wouter Lammers
@WtrLammers_twitter
Oct 22 10:31
anyone else using intellij? This is where the editor gets unhappy even though it compiles.
ChocPanda
@choc_panda_twitter
Oct 22 10:31
Add the comment \*_*\
rgagedv01
@rgagedv01
Oct 22 10:34
John, it works fine for me.
RE: FunctorNest(Option(List(1,2,3))).map(_ + 1)
rmsa
@rmsa
Oct 22 10:36
@WtrLammers_twitter Same prob here
Wojtek Malinowski
@wojtek-sb
Oct 22 10:36
Same
Stefano Tondo
@stondo
Oct 22 10:37
same here
rgagedv01
@rgagedv01
Oct 22 10:37
Do you guys have the latest version? I'm not having any issues with Intellij.
Stefano Tondo
@stondo
Oct 22 10:38
yes, latest version here
philglover
@philglover
Oct 22 10:39
The autocomplete hasn't worked to good on this section, but once I've corrected the signature it's been fine.
rmsa
@rmsa
Oct 22 10:41
Me too, but I'm using the Community Edition.
Dan
@shinyhappydan_twitter
Oct 22 10:42
intellij autocomplete is running at a snail's pace on this one
it doesn't generate methods correctly unless you've used ? in the signature. It uses _ by default which doesn't generate anything sensible
Aaron Delaplane
@AaronDelaplane
Oct 22 10:51
Does a None actually "halt" or return a new instance of None regarding Functor[Option[A]]
Wouter Lammers
@WtrLammers_twitter
Oct 22 10:52
I guess it returns None so not 'halt' as in 'system.exit', but as far as your computation goes it stops?
Dan
@shinyhappydan_twitter
Oct 22 11:05

implicit val ZipList: Zip[List] = new Zip[List] {
    override def zip[A, B](l: List[A], r: List[B]): List[(A, B)] = {
      l.headOption zip r.headOption match {
        case Some(value) => value :: zip(l.tail, r.tail)
        case None => Nil
      }
    }

    override def map[A, B](fa: List[A])(f: A => B): List[B] = fa.map(f)
  }

rgagedv01
@rgagedv01
Oct 22 11:16
Why can we define Map using map?
John A. De Goes
@jdegoes
Oct 22 11:18
@AaronDelaplane None halts in the sense that because it does not emit an A, you can't actually change the A to a B; also flatMap cannot proceed until it has an A. So it really is halting, just not in a system.exit type sense.
@rgagedv01 Because map is a method on these objects, implemented by the authors of the Scala standard library. It's cheating, of course. :)
John A. De Goes
@jdegoes
Oct 22 12:21

  val OptionApplicative: Applicative[Option] =
    new Applicative[Option] {
      def point[A](a: => A): Option[A] =
        Some(a)

      def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] =
        fa.flatMap(a => f.map(f => f(a)))
    }

Dan
@shinyhappydan_twitter
Oct 22 12:22

  def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] = {
        (fa zip f).map {
          case (value, func) => func(value)
        }
      }

Aaron Delaplane
@AaronDelaplane
Oct 22 12:23

  val OptionApplicative: Applicative[Option] =
    new Applicative[Option] {
      def point[A](a: => A): Option[A] = Some(a)

      // ap is equivalent to zip. same thing
      def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] = 
        fa.flatMap(a => f.flatMap(aa => Some(aa(a))))
    }

John A. De Goes
@jdegoes
Oct 22 12:24

def zip[F[_]: Applicative, A, B](l: F[A], r: F[B]): F[(A, B)] =
    Applicative[F].ap(l)(r.map(b => (a: A) => (a, b)))

John A. De Goes
@jdegoes
Oct 22 12:30

  def ApplicativeParser[E]: Applicative[Parser[E, ?]] =
    new Applicative[Parser[E, ?]] {
      def point[A](a: => A): Parser[E, A] =
        Parser(input => Right((input, a)))

      def ap[A, B](fa: => Parser[E, A])(
        f: => Parser[E, A => B]): Parser[E, B] =
          Parser[E, B](input =>
            f.run(input) match {
              case Left(e) => Left(e)
              case Right((input, f)) =>
                fa.run(input) match {
                  case Left(e) => Left(e)
                  case Right((input, a)) => Right((input, f(a)))
                }
            }
          )
    }

Stefano Tondo
@stondo
Oct 22 12:34
I missed ap2 in Exercise 13. Can anyone please paste it here?
ChocPanda
@choc_panda_twitter
Oct 22 12:34
@stondo

  def ap2[F[_]: Zip, A, B](fa: F[A], fab: F[A => B]): F[B] =
    fa.zip(fa, fab).map {
      case (a, f) => f(a)
    }

Stefano Tondo
@stondo
Oct 22 12:35
@choc_panda_twitter: thanks
Wouter Lammers
@WtrLammers_twitter
Oct 22 12:44

  //
  implicit val MonadBTree: Monad[BTree] =
    new Monad[BTree] {
      def point[A](a: => A): BTree[A] = Leaf(a)

      def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] = {
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => Fork(bind(l)(f), bind(r)(f))
        }
      }
    }

ChocPanda
@choc_panda_twitter
Oct 22 12:44

  implicit val MonadBTree: Monad[BTree] =
    new Monad[BTree] {
      def point[A](a: => A): BTree[A] = Leaf(a)

      def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] = fa match {
        case Leaf(a) => fa(a)
        case Fork(l, r) => Fork(bind(l)(f), bind(r)(f))
        }
    }

jbwheatley
@jbwheatley
Oct 22 12:44

implicit val MonadBTree: Monad[BTree] =
    new Monad[BTree] {
      def point[A](a: => A): BTree[A] =
        Leaf(a)

      def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => Fork(bind(l)(f), bind(r)(f))
        }
    }

Wojtek Malinowski
@wojtek-sb
Oct 22 12:45

  implicit val MonadBTree: Monad[BTree] =
    new Monad[BTree] {
      def point[A](a: => A): BTree[A] =
        Leaf(a)

      def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => Fork(bind(l)(f), bind(r)(f))
        }
    }

richard-gibson
@richard-gibson
Oct 22 12:54

  implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] = Parser[E, A](input => Right(input, a))

      def bind[A, B](fa: Parser[E,A])(f: A => Parser[E,B]): Parser[E,B] =
        Parser(input =>
              fa.run(input) match {
                case Left(e) => Left(e)
                case Right((input, a)) => f(a).run(input)
              })

      override def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] =
        bind(fa)(f.andThen(point[B](_)))

    }

```
John A. De Goes
@jdegoes
Oct 22 12:55

implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E, A] =
        Parser(input => Right((input, a)))

      def bind[A, B](fa: Parser[E, A])(f: A => Parser[E, B]): Parser[E, B] =
        Parser(input =>
          fa.run(input) match {
            case Left(e) => Left(e)
            case Right((input, a)) => f(a).run(input)
          }
        )
    }

ChocPanda
@choc_panda_twitter
Oct 22 12:55

  implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E, A] = Parser(input => Right((input, a)))

      override def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] = 
        bind(fa)(f.andThen(point[B](_)))

      def bind[A, B](fa: Parser[E, A])(f: A => Parser[E, B]): Parser[E, B] =
        Parser(fa.run(_) match {
          case Left(e) => Left(e)
          case Right((input, a)) => f(a).run(input)
        })
    }

Dan
@shinyhappydan_twitter
Oct 22 12:55

implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] = Parser(input => Right((input, a)))

      def bind[A, B](fa: Parser[E,A])(f: A => Parser[E,B]): Parser[E,B] =
        Parser(input => fa.run(input) match {
          case Left(e) => Left(e)
          case Right((input2, a)) => f(a).run(input2)
        })
    }

Aaron Delaplane
@AaronDelaplane
Oct 22 12:55

  implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] = Parser(input => Right((input, a)))

      def bind[A, B](fa: Parser[E,A])(f: A => Parser[E,B]): Parser[E,B] =
        Parser(input => fa.run(input) match {
          case Left(e) => Left(e)
          case Right((s, a)) => f(a).run(s)
        })
    }

Stefano Tondo
@stondo
Oct 22 12:55

implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E,A] =
        Parser(input => Right((input, a)))

      override def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] =
        bind(fa)(f.andThen(point[B](_)))

      def zip[A, B](l: Parser[E, A], r: Parser[E, B]): Parser[E, (A, B)] =
        for {
          a <- l
          b <- r
        } yield (a, b)

      def bind[A, B](fa: Parser[E,A])(f: A => Parser[E,B]): Parser[E,B] =
        Parser(input =>
          fa.run(input) match {
            case Left(e) => Left(e)
            case Right((input, a)) => f(a).run(input)
          }
        )
    }

rmsa
@rmsa
Oct 22 13:04
the for comprehension doesn't compile for me, for lack of Parser.map. Have I missed anything from before?
Aaron Delaplane
@AaronDelaplane
Oct 22 13:09
@jdegoes John, can you talk about when you use for comprehensions and when you use flatMap or in Cats >>= for Monad chains?
John A. De Goes
@jdegoes
Oct 22 13:10

a := doX()
  b := doY(a)
  c := doZ(a, b)
  if (c == 2) d := doW(a, b, c)
  else d := doU(a, b, c)
  return d

  for {
    a <- doX 
    b <- doY(a)
    c <- doZ(a, b)
    d <- if (c == 2) doW(a, b, c)
         else doU(a, b, c)
  } yield d

Dan
@shinyhappydan_twitter
Oct 22 13:22
why isn't filter type safe?
John A. De Goes
@jdegoes
Oct 22 13:23

  val list = List(1, 2, 4, 5, 7, 8, 9, -4, 11)
  val pairs = List((2, 4), (5, 7), (7, 9), (9, 11))

  for {
    a <- list
    b <- list
    t <- ((b - a) == 2).guard[List](a -> b)
  } yield t

https://www.scala-lang.org/api/current/scala/collection/TraversableLike$WithFilter.html
rgagedv01
@rgagedv01
Oct 22 13:51
Could someone help explain why you couldn't use Map for the list example? for { a <- list b <- list t <- if ((b - a) == 2) List(a -> b) else Nil } yield t
Dan
@shinyhappydan_twitter
Oct 22 13:52
This message was deleted
ChocPanda
@choc_panda_twitter
Oct 22 13:52
in the example you're trying to derive pairs from list
You could turn the result into a Map however if you had input List(5, 7, 7) The List function would return List((5,7), (5,7)) Where calling toMap on the result would result in Map(5 -> 7) Removing the duplicate
I guess @rgagedv01 it depends on what you want to achieve because calling toMap means you lose some information
rgagedv01
@rgagedv01
Oct 22 13:55
Got it, thanks.
So what is a <- list actually returning
ChocPanda
@choc_panda_twitter
Oct 22 13:56
for comprehensions are syntactic sugar for a flatMap
So the above would be desugared by the compiler to list.flatMap(a => list.flatMap(b => if ((b - a) == 2) List((a, b)) else Nil))
rgagedv01
@rgagedv01
Oct 22 13:57
Thanks Choc
ChocPanda
@choc_panda_twitter
Oct 22 13:59
There is also a map on the identity function in there for the yield
ChocPanda
@choc_panda_twitter
Oct 22 14:07
list.flatMap(a => list.flatMap(b => val fc = if ((b - a) == 2) List((a, b)) else Nil; fc.map(identity))
John A. De Goes
@jdegoes
Oct 22 14:10

  val ListToOption: List ~> Option =
    new NaturalTransformation[List, Option] {
      def apply[A](fa: List[A]): Option[A] =
        fa.headOption
    }

John A. De Goes
@jdegoes
Oct 22 14:18

trait Logging[F[_]] { self =>
    def log(line: String): F[Unit]

    def mapK[G[_]](f: F ~> G): Logging[G] = new Logging[G] {
      def log(line: String): G[Unit] = f(self.log(line))
    }
  }

Dan
@shinyhappydan_twitter
Oct 22 14:30
I feel like I want to do something like this

fa.map(f).sum

John A. De Goes
@jdegoes
Oct 22 14:31

  implicit val FoldableList: Foldable[List] = new Foldable[List] {
    def foldMap[A, B: Monoid](fa: List[A])(f: A => B): B =
      fa.foldLeft(mzero[B])((b, a) => b |+| f(a))

    def foldRight[A, B](fa: List[A], z: => B)(f: (A, => B) => B): B =
      fa match {
        case Nil => z
        case a :: as => f(a, foldRight(as, z)(f))
      }
  }

jbwheatley
@jbwheatley
Oct 22 14:37

new Foldable[BTree] {
      def foldMap[A, B](fa: BTree[A])(f: A => B)(implicit F: Monoid[B]): B =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => foldMap(l)(f) |+| foldMap(r)(f)
        }

      def foldRight[A, B](fa: BTree[A], z: => B)(f: (A, => B) => B): B =
        fa match {
          case Leaf(a) => f(a,z)
          case Fork(l, r) => foldRight(l, foldRight(r, z)(f))(f)
        }
    }

ChocPanda
@choc_panda_twitter
Oct 22 14:37

    new Foldable[BTree] {
      def foldMap[A, B: Monoid](fa: BTree[A])(f: A => B): B =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => foldMap(l)(f) |+| foldMap(r)(f)
        }

      def foldRight[A, B](fa: BTree[A], z: => B)(f: (A, => B) => B): B =
        fa match {
          case Leaf(a) => f(a, z)
          case Fork(l, r) => foldRight(l, foldRight(r, z)(f))(f)
        }
    }

Dafydd Rees
@dafydd
Oct 22 14:37

implicit val FoldableBTree: Foldable[BTree] =
    new Foldable[BTree] {
      def foldMap[A, B](fa: BTree[A])(f: A => B)(implicit F: Monoid[B]): B = fa match {
        case Leaf(a) => f(a)
        case Fork(l,r) => f(l) |+| f(r)
      }

      def foldRight[A, B](fa: BTree[A], z: => B)(f: (A, => B) => B): B = fa match {
        case Leaf(a) => f(a)
        case Fork(l,r) => foldRight(l,foldRight(r,z)(f))(f)
      }
    }

Aaron Delaplane
@AaronDelaplane
Oct 22 14:38

  implicit val FoldableBTree: Foldable[BTree] =
    new Foldable[BTree] {
      def foldMap[A, B](fa: BTree[A])(f: A => B)(implicit F: Monoid[B]): B =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => foldMap(l)(f) |+| foldMap(r)(f)
        }

      def foldRight[A, B](fa: BTree[A], z: => B)(f: (A, => B) => B): B =
        fa match {
          case Leaf(a) => z
          case Fork(l, r) => foldRight(l, foldRight(r, z)(f))(f) 
        }
    }

richard-gibson
@richard-gibson
Oct 22 14:39

  implicit val FoldableBTree: Foldable[BTree] =
    new Foldable[BTree] {
      def foldMap[A, B](fa: BTree[A])(f: A => B)(implicit F: Monoid[B]): B =
        fa match {
          case Leaf(a) => f(a)
          case Fork(l, r) => foldMap(l)(f) |+| foldMap(r)(f)
        }

      def foldRight[A, B](fa: BTree[A], z: => B)(f: (A, => B) => B): B =
        fa match {
          case Leaf(a) => z
          case Fork(l, r) => foldRight(l, foldRight(r,z)(f))(f)
        }
    }

Tim Pigden
@TimPigden
Oct 22 14:42
shouldn't leaf be f(a) |+| z?
ChocPanda
@choc_panda_twitter
Oct 22 14:45
Yes @TimPigden it should be
Tim Pigden
@TimPigden
Oct 22 14:45
(for foldRight that is)
ChocPanda
@choc_panda_twitter
Oct 22 14:46
Actually no because lok at the signature of f
Wouter Lammers
@WtrLammers_twitter
Oct 22 14:46
or rather f(a, z) ?
ChocPanda
@choc_panda_twitter
Oct 22 14:48
@TimPigden scroll up and take a look at my solution
Tim Pigden
@TimPigden
Oct 22 14:52
yes - something went wrong in my method signature
Aaron Delaplane
@AaronDelaplane
Oct 22 15:03
@jdegoes Are we able to implement a Traverse for a Stream
John A. De Goes
@jdegoes
Oct 22 15:08


  trait Request
  trait Response
  trait Error
  val requests: List[Request] = ???
  def makeRequest(r: Request): Either[Error, Response] = ???

  def forEach[F[_]: Applicative, A, B](as: List[A])(body: A => F[B]): F[List[B]] = {
    as.foldLeft[F[List[B]]](List.empty[B].point[F]) {
      case (fbs, a) => (fbs |@| body(a))((bs, b) => b :: bs)
    }.map(_.reverse)
  }

  forEach(requests)(makeRequest)

  // F[G[B]] => G[F[B]]

  trait Traverse[F[_]] extends Foldable[F] with Functor[F] {
    def traverseImpl[G[_]: Applicative, A, B](
      fa: F[A])(f: A => G[B]): G[F[B]] = ???

    fa.map(f) : F[G[B]]
  }

Wouter Lammers
@WtrLammers_twitter
Oct 22 15:09

  implicit val TraverseBTree: Traverse[BTree] =
    new Traverse[BTree] {
      def traverseImpl[G[_]: Applicative, A, B](
        fa: BTree[A])(f: A => G[B]): G[BTree[B]] = {
        fa match {
          case Leaf(a) => f(a).map(Leaf(_))
          case Fork(l, r) => (traverseImpl(l)(f) |@| traverseImpl(r)(f))(Fork(_, _))
        }
      }
    }

jbwheatley
@jbwheatley
Oct 22 15:09

implicit val TraverseBTree: Traverse[BTree] =
    new Traverse[BTree] {
      def traverseImpl[G[_]: Applicative, A, B](
        fa: BTree[A])(f: A => G[B]): G[BTree[B]] =
        fa match {
          case Leaf(a) => f(a).map(Leaf(_))
          case Fork(l, r) =>
            (traverseImpl(l)(f) |@| traverseImpl(r)(f))(Fork(_,_))
        }
    }

ChocPanda
@choc_panda_twitter
Oct 22 15:12

  implicit val TraverseBTree: Traverse[BTree] =
    new Traverse[BTree] {
      def traverseImpl[G[_]: Applicative, A, B](fa: BTree[A])(f: A => G[B]): G[BTree[B]] = {
        fa match {
          case Leaf(a) => f(a).map(Leaf(_))
          case Fork(l, r) => (traverseImpl(l)(f) |@| traverseImpl(r)(f))(Fork(_, _))
        }
      }
    }

Wouter Lammers
@WtrLammers_twitter
Oct 22 15:21
I'm trying to do exercise 5, implementing traverse for Parser, but I'm pretty stuck.
Is it because Parser is redefined as just a case class and we've lost the Functor/Applicative/etc instances or should it be possible without that?
@jdegoes if you just want to continue with optics, could you still post the implementation?
Wouter Lammers
@WtrLammers_twitter
Oct 22 15:30
lol, the exercise description starts with 'Try' ...
Guess that means it's not possible. Cause it's not a collection?
John A. De Goes
@jdegoes
Oct 22 15:33
@WtrLammers_twitter It cannot be done. Parser is a function so it cannot be traversed.
Wouter Lammers
@WtrLammers_twitter
Oct 22 15:35
got it
thanks
Wojtek Malinowski
@wojtek-sb
Oct 22 16:15
can anyone paste the Lens code?
rgagedv01
@rgagedv01
Oct 22 16:19
Wow, that's amazing.
Dan
@shinyhappydan_twitter
Oct 22 16:20
Where is the ⋅ key
John A. De Goes
@jdegoes
Oct 22 16:20

def ⋅ [B](that: Lens[A, B]): Lens[S, B] =
      Lens[S, B](
        get = that.get compose self.get,
        set = (b: B) => (s: S) => (self.set(that.set(b)(self.get(s)))(s)))

Dan
@shinyhappydan_twitter
Oct 22 16:21
need a bigger keyboard
John A. De Goes
@jdegoes
Oct 22 16:21
val org2_lens: Org = (site ⋅ manager ⋅ salary).updated(_ * 0.95)(org)

Prism[S, B](
        get = (s: S) => self.get(s).flatMap(that.get),
        set = self.set compose that.set
      )

John A. De Goes
@jdegoes
Oct 22 16:58
Dinner tonight:
Mumbai Square
7 Middlesex St, London E1 7AA, UK
+44 20 7247 6461
https://goo.gl/maps/CsemDcXCC7J2
Wouter Lammers
@WtrLammers_twitter
Oct 22 17:35
:+1: what time? I might hole up in a pub nearby for a bit
John A. De Goes
@jdegoes
Oct 22 17:52
We’re already there
Tim Pigden
@TimPigden
Oct 22 20:24
did anyone get the flatMap from the parser.Parser exercise? I've got

    def flatMap[E1 >: E, B](f: A => Parser[E1, B]): Parser[E1, B] =
      Parser[E1, B](input =>
        self.run(input) match {
          case Left(e) => Left(e)
          case Right((inp, a)) => f(a).run(inp)
        }
      )

Tim Pigden
@TimPigden
Oct 22 20:56
another late entry that I didn't get time to doing/ready first time round. Is this ok?

  implicit val ZipList: Zip[List] = new Zip[List] {
    override def zip[A, B](l: List[A], r: List[B]): List[(A, B)] =
      (for {
        hl <- l.headOption
        hr <- r.headOption
      } yield (hl, hr) :: zip(l.tail, r.tail)).getOrElse(Nil)

rmsa
@rmsa
Oct 22 21:36
Useful. Thanks @TimPigden
_

John A. De Goes/functional-scala

Wouter Lammers
@WtrLammers_twitter
Oct 23 07:49
@TimPigden I believe one way to do it was :

for {
  l <- l
  r <- r
} yield (l, r)

Which was the cartesian product.
Another way of doing your approach, which truncates to the smallest list could also be something like this:

(l, r) match {
  case (Nil, _) => Nil
  case (_, Nil) => Nil
  case (lh::lt, rh::rt) => (lh, rh) :: zip(lt, rt)
}

Tim Pigden
@TimPigden
Oct 23 08:02
@WtrLammers_twitter doesn't that mean you get l x r as your combined list?
rgagedv01
@rgagedv01
Oct 23 08:02
@WtrLammers_twitter Can you explain why that gives you a cartesian product?
Tim Pigden
@TimPigden
Oct 23 08:03
@rgagedv01 it works as a double for loop
rgagedv01
@rgagedv01
Oct 23 08:03
Ah, ok
Tim Pigden
@TimPigden
Oct 23 08:03
@WtrLammers_twitter sorry - didn't read your comment underneath!
Wouter Lammers
@WtrLammers_twitter
Oct 23 09:15

  val yourName2: Program[Unit] = {
    for {
      _ <- writeLine("What is your name?")
      name <- readLine
      _ <- writeLine("Hello, " + name + ", good to meet you!")
    } yield ()
  }

Wojtek Malinowski
@wojtek-sb
Oct 23 09:15

val yourName2: Program[Unit] =     
    for {
      _ <- Program.writeLine("What is your name?")
      name <- Program.readLine
      _ <- Program.writeLine("Hello, " + name + ", good to meet you!")
    } yield ()

ChocPanda
@choc_panda_twitter
Oct 23 09:16

  val yourName1: Program[Unit] =
    for {
      _ <- writeLine("What is your name?")
      name <- readLine
      _ <- writeLine("Hello, " + name + ", good to meet you!")
    } yield ()

Adrian Tubio Noya
@atnoya
Oct 23 09:16

  val yourName2: Program[Unit] = 
    for {
      _ <- writeLine("What is your name?")
      name <- readLine
      _ <- writeLine(s"Hello, $name, good to meet you!")
    } yield ()

jbwheatley
@jbwheatley
Oct 23 09:16

val yourName2: Program[Unit] =
    for {
      _ <- writeLine("What is your name?")
      name <- readLine
      _ <- writeLine("Hello, " + name + ", good to meet you!")
    } yield ()

Dan
@shinyhappydan_twitter
Oct 23 09:16

  val yourName2: Program[Unit] = {
    for {
      _    <- writeLine("What is your name?")
      name <- readLine
      _    <- writeLine("Hello, " + name + ", good to meet you!")
    } yield ()
  }

Tim Pigden
@TimPigden
Oct 23 09:17

  val yourName2: Program[Unit] =
  for {
    _ <- writeLine("What is your name?")
    name <- readLine
    _ <- writeLine("Hello, " + name + ", good to meet you!").flatMap(_ =>
  } yield ()

Aaron Delaplane
@AaronDelaplane
Oct 23 09:17

  val yourNameFor: Program[Unit] = for {
    _    <- writeLine("What is your name?")
    name <- readLine
    _    <- writeLine(s"Hello, $name")
  } yield ()

Tim Pigden
@TimPigden
Oct 23 09:18
oops

  val yourName2: Program[Unit] =
  for {
    _ <- writeLine("What is your name?")
    name <- readLine
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

ChocPanda
@choc_panda_twitter
Oct 23 09:18

  val yourName3: Program[Unit] = 
    for {
      name <- getName
      _    <- writeLine("Hello, " + name + ", good to meet you!")
    } yield ()

Adrian Tubio Noya
@atnoya
Oct 23 09:18

  val yourName3: Program[Unit] =
    for {
      name <- getName
      _ <- writeLine(s"Hello, $name, good to meet you!")
    } yield ()

Wouter Lammers
@WtrLammers_twitter
Oct 23 09:19

  val yourName3: Program[Unit] = getName >>= (name => writeLine("Hello, " + name + ", good to meet you!"))

Tim Pigden
@TimPigden
Oct 23 09:20

  val yourName3: Program[Unit] =
  for {
    name <- getName
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

Wouter Lammers
@WtrLammers_twitter
Oct 23 09:20

  def interpret[A](program: Program[A]): A =
    program match {
      case Program.ReadLine(next) => interpret(next(StdIn.readLine()))
      case Program.WriteLine(line, next) => println(line); interpret(next)
      case Program.Return(value) => value()
    }

Wouter Lammers
@WtrLammers_twitter
Oct 23 09:29

  def sequence[A](programs: List[Program[A]]): Program[List[A]] =
    programs match {
      case Nil => point(Nil)
      case h :: t => h.flatMap(a => sequence(t).map(ts => a :: ts))
    }

pete-ts-w
@pete-ts-w
Oct 23 09:31
def sequence[A](programs: List[Program[A]]): Program[List[A]] = programs.foldLeft(Program.point(List.empty[A]))((v, program) => program *> v)
Wouter Lammers
@WtrLammers_twitter
Oct 23 09:36
This message was deleted

  def ageExplainer2: Program[Unit] = {

    def ageToS(age: Int) = {
      if (age < 12) "You are a kid"
      else if (age < 20) "You are a teenager"
      else if (age < 30) "You are a grownup"
      else if (age < 50) "You are an adult"
      else if (age < 80) "You are a mature adult"
      else if (age < 100) "You are elderly"
      else "You are probably lying."
    }

    for {
      _ <- writeLine("What is your age?")
      input <- readLine
      age = scala.util.Try(input.toInt).toOption
      _ <- age.fold(writeLine("That's not an age, try again") *> ageExplainer2)(age => writeLine(ageToS(age)))
    } yield ()
  }

jbwheatley
@jbwheatley
Oct 23 09:39

def ageExplainer2: Program[Unit] =
    for {
      _ <- writeLine("What is your age?")
      age <- readLine
      _ <- scala.util.Try(age.toInt).toOption match {
          case Some(age) =>
            if (age < 12) writeLine("You are a kid")
            else if (age < 20) writeLine("You are a teenager")
            else if (age < 30) writeLine("You are a grownup")
            else if (age < 50) writeLine("You are an adult")
            else if (age < 80) writeLine("You are a mature adult")
            else if (age < 100) writeLine("You are elderly")
            else writeLine("You are probably lying.")
          case None =>
            writeLine("That's not an age, try again") *> ageExplainer2
        }
    } yield ()

ChocPanda
@choc_panda_twitter
Oct 23 09:43

  def ageExplainer2: Program[Unit] = 
    for {
      _ <- Program.writeLine("What is your age?")
      a <- Program.readLine.map(ageStr => scala.util.Try(ageStr.toInt).toOption)
      _ <- a match {
                case Some(age) =>
                  if (age < 12) Program.writeLine("You are a kid")
                  else if (age < 20) Program.writeLine("You are a teenager")
                  else if (age < 30) Program.writeLine("You are a grownup")
                  else if (age < 50) Program.writeLine("You are an adult")
                  else if (age < 80) Program.writeLine("You are a mature adult")
                  else if (age < 100) Program.writeLine("You are elderly")
                  else Program.writeLine("You are probably lying.")
                case None =>
                  Program.writeLine("That's not an age, try again")
              }
      _ <- ageExplainer2
    } yield ()

rmsa
@rmsa
Oct 23 09:48
@choc_panda_twitter Shouldn't the ageExplainer2 only be called again if the user entered a non int?
philglover
@philglover
Oct 23 09:50

  def messageFor: Option[Int] => Program[Unit] = {
    case Some(age) =>
      if (age < 12) writeLine("You are a kid")
      else if (age < 20) writeLine("You are a teenager")
      else if (age < 30) writeLine("You are a grownup")
      else if (age < 50) writeLine("You are an adult")
      else if (age < 80) writeLine("You are a mature adult")
      else if (age < 100) writeLine("You are elderly")
      else writeLine("You are probably lying.")
    case None => writeLine("That's not an age, try again") *> ageExplainer2
  }

  def ageExplainer2: Program[Unit] = for {
    _ <- writeLine("What is your age?")
    input <- readLine
    inputAsInt <- Return(() => scala.util.Try(input.toInt).toOption)
    _ <- messageFor(inputAsInt)
  } yield ()

Wouter Lammers
@WtrLammers_twitter
Oct 23 09:53
I guess you could use point to create your inputAsInt instead of using Return?
Wojtek Malinowski
@wojtek-sb
Oct 23 10:05
type Exceptional[A] = IO[Exception, A]
richard-gibson
@richard-gibson
Oct 23 10:05
type Exceptional[A] = IO[Exception, A]
ChocPanda
@choc_panda_twitter
Oct 23 10:05


  //
  // EXERCISE 1
  //
  // Write the type of `IO` values that can fail with an `Exception`, or
  // may produce an `A`.
  //
  type Exceptional[A] = IO[Exception, A]

Aaron Delaplane
@AaronDelaplane
Oct 23 10:05

type Exceptional[A] = IO[Exception, Option[A]]

Wojtek Malinowski
@wojtek-sb
Oct 23 10:06
type Task[A] = IO[Throwable, A]
ChocPanda
@choc_panda_twitter
Oct 23 10:06

  type Task[A] = IO[Throwable, A]

richard-gibson
@richard-gibson
Oct 23 10:06
type Infallible[A] = IO[Nothing, A]
Wojtek Malinowski
@wojtek-sb
Oct 23 10:06
type Unproductive[E] = IO[E, Nothing]
richard-gibson
@richard-gibson
Oct 23 10:06
type Unproductive[E] = IO[E, Nothing]
ChocPanda
@choc_panda_twitter
Oct 23 10:07

  type Unproductive[E] = IO[E, ???]

richard-gibson
@richard-gibson
Oct 23 10:07
type Unending = IO[Nothing, Nothing]
ChocPanda
@choc_panda_twitter
Oct 23 10:07

  type Unending = IO[NOthing, Nothing]

You're right, thanks @rmsa
richard-gibson
@richard-gibson
Oct 23 10:09
val ioInteger: IO[Nothing, Int] = IO.now(2)
Tim Pigden
@TimPigden
Oct 23 10:10
val ioInteger: IO[Nothing, Int] = IO.now(2)
Dafydd Rees
@dafydd
Oct 23 10:10
val ioInteger: IO[Nothing, Int] = IO.now(2)
ChocPanda
@choc_panda_twitter
Oct 23 10:12

  val ioString: IO[Nothing, String] = IO.point("Functional scala")

val failedInput: IO[String, Nothing] = IO.fail("Bad input")

ChocPanda
@choc_panda_twitter
Oct 23 10:17

  (IO.point(42).map(_.toString) : IO[Nothing, String])

  (IO.fail(42).leftMap(_.toString) : IO[String, Nothing])

  val ioX: IO[Nothing, Int]      = IO.point(42)
  val ioY: IO[Nothing, Int]      = IO.point(58)
  val ioXPlusY: IO[Nothing, Int] = ioX.flatMap(x => ioY.map(y => (x + y)))

Wojtek Malinowski
@wojtek-sb
Oct 23 10:19

  def ifThenElse[E, A](bool: IO[E, Boolean])(ifTrue: IO[E, A], ifFalse: IO[E, A]): IO[E, A] =
    bool.flatMap(_ match {
      case true => ifTrue
      case false => ifFalse
    })

ChocPanda
@choc_panda_twitter
Oct 23 10:19

  def ifThenElse[E, A](bool: IO[E, Boolean])(ifTrue: IO[E, A], ifFalse: IO[E, A]): IO[E, A] = 
    for {
      b <- bool
      a <- if (b) ifTrue else ifFalse
    } yield a

@wojtek-sb you could simplify your solution by removing _ match { and the closing brace
Wojtek Malinowski
@wojtek-sb
Oct 23 10:21
thanks
Wouter Lammers
@WtrLammers_twitter
Oct 23 10:24

  def decode2[E](read: IO[E, Byte]): IO[E, Either[Byte, Int]] = {

    def readWord(a: Byte) =
      for {
        b <- read.map(_.toInt << 8)
        c <- read.map(_.toInt << 16)
        d <- read.map(_.toInt << 24)
      } yield Right(a.toInt + b + c + d)

    for {
      b <- read
      ei <- if (b < 0) IO.now(Left(b)) else readWord(b)
    } yield ei
  }

Tim Pigden
@TimPigden
Oct 23 10:26


  def decode2[E](read: IO[E, Byte]): IO[E, Either[Byte, Int]] =
    for {
      b <- read
      next <- if (b < 0) IO.point(Left(b))
      else  for {
        b2 <- read
        b3 <- read
        b4 <- read
      } yield Right(b.toInt + b2.toInt << 8 + b3.toInt << 16 + b4 << 24)

    } yield next

ChocPanda
@choc_panda_twitter
Oct 23 10:27

    read.flatMap {
      case b if b < 0 => IO.now(Left(b))
      case b =>
        for {
          b2 <- read.map(_.toInt << 8)
          b3 <- read.map(_.toInt << 16)
          b4 <- read.map(_.toInt << 24)
        } yield Right(b.toInt + b2 + b3 + b4)
    }

  def forever2[A](action: IO[Nothing, A]): IO[Nothing, Nothing] =
    action.flatMap(_ => forever2(action))

Adrian Tubio Noya
@atnoya
Oct 23 10:29

  def forever2[A](action: IO[Nothing, A]): IO[Nothing, Nothing] = action.flatMap(_ => forever2(action))

Stefano Tondo
@stondo
Oct 23 10:30

 def forever2[A](action: IO[Nothing, A]): IO[Nothing, Nothing] =
    IO.now(action) *> forever2(action)

would that work?
rgagedv01
@rgagedv01
Oct 23 10:30
@jdegoes Could you please explain a little more why it's stack safe?
Wojtek Malinowski
@wojtek-sb
Oct 23 10:33
anyone has forever2 as a for ?
richard-gibson
@richard-gibson
Oct 23 10:35

  def repeatN2[E](n: Int, action: IO[E, Unit]): IO[E, Unit] =
    if(n <= 0) IO.unit // or IO.point(())
    else action *> repeatN2(n-1, action)

Sean McGroarty
@McGizzle
Oct 23 10:35

  def repeatN2[E](n: Int, action: IO[E, Unit]): IO[E, Unit] = n match {
    case 0 => IO.now(())
    case n => action *> repeatN2(n-1,action)
  }

ChocPanda
@choc_panda_twitter
Oct 23 10:36
@wojtek-sb

  def forever2[A](action: IO[Nothing, A]): IO[Nothing, Nothing] =
    for {
      _       <- action
      nothing <- forever2(action)
    } yield nothing

Wojtek Malinowski
@wojtek-sb
Oct 23 10:36
@McGizzle: you can pass -1 to your repeatN2 and it won't terminate
Sean McGroarty
@McGizzle
Oct 23 10:37
good catch @wojtek-sb
Wouter Lammers
@WtrLammers_twitter
Oct 23 10:38

  IO.point(42).flatMap(x => IO.point(19).map(_ => x))

Aaron Delaplane
@AaronDelaplane
Oct 23 10:38

 IO.point(42).flatMap(Function.const(IO.point(19)))

jbwheatley
@jbwheatley
Oct 23 10:42

def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if (i < 0 || i >= a.length) IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")"))
    else IO.point(a(i))

Wojtek Malinowski
@wojtek-sb
Oct 23 10:43

  def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if (i < 0 || i >= a.length) IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")"))
    else IO.point(a(i))

ChocPanda
@choc_panda_twitter
Oct 23 10:43

  def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if (i < 0 || i >= a.length) {
      IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")"))
    } else IO.point(a(i))

Tim Pigden
@TimPigden
Oct 23 10:43


  def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if (i < 0 || i > a.length) IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")")
else IO.point(a(i))

richard-gibson
@richard-gibson
Oct 23 10:43

  def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if (i < 0 || i >= a.length) IO.fail(new IndexOutOfBoundsException(""))
    else IO.point(a(i))

Aaron Delaplane
@AaronDelaplane
Oct 23 10:44

  def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    IO.point(Try(a(i))).flatMap(t => t match {
      case Success(n) => IO.point(n)
      case scala.util.Failure(exception) => IO.fail(new IndexOutOfBoundsException(""))
    })

philglover
@philglover
Oct 23 10:46

val recovered1: IO[Nothing, Int] =
    divide1(100, 0).attempt.map {
      case Left(_) => -1
      case Right(value) => value
    }

ChocPanda
@choc_panda_twitter
Oct 23 10:46

  val recovered1: IO[Nothing, Int] =
    divide1(100, 0).attempt.map {
      case Left(error)  => -1
      case Right(value) => value
    }

Tim Pigden
@TimPigden
Oct 23 10:48

  val recovered1: IO[Nothing, Int] =
    divide1(100, 0).attempt.map {
      case Left(error) => -1
      case Right(value) => value
    }

ChocPanda
@choc_panda_twitter
Oct 23 10:50

  val recovered2: IO[Nothing, Int] =
    divide1(100, 0).redeem(IO.now(-1), IO.now(_))

  val recovered2: IO[Nothing, Int] =
    divide1(100, 0).redeemPure(_ => -1, identity)

rgagedv01
@rgagedv01
Oct 23 10:54
How would you store all errors and return them after a success?
rgagedv01
@rgagedv01
Oct 23 11:00
Thanks John. I don't want to hold up the class, so I can research independently.
Thank you!
Will Watkins
@wwatkins09
Oct 23 11:10
can someone post the solutions for putStrLn and getStrLn?
ChocPanda
@choc_panda_twitter
Oct 23 11:10


  //
  // EXERCISE 1
  //
  // Using the `IO.sync` method, wrap Scala's `println` method to import it into
  // the world of pure functional programming.
  //
  def putStrLn(line: String): IO[Nothing, Unit] = IO.sync(println)

  //
  // EXERCISE 2
  //
  // Using the `IO.sync` method, wrap Scala's `readLine` method to import it
  // into the world of pure functional programming.
  //
  val getStrLn: IO[Nothing, String] = IO.sync(readLine)

  def readFile1(file: File): IO[Exception, List[String]] =
    IO.syncException(Source.fromFile(file).getLines.toList)

  def readFile2(file: File): IO[Throwable, List[String]] =
    IO.syncThrowable(Source.fromFile(file).getLines.toList)

Will Watkins
@wwatkins09
Oct 23 11:12
Thanks!
ChocPanda
@choc_panda_twitter
Oct 23 11:12
no prob
Stefano Tondo
@stondo
Oct 23 11:12
Intellij complains on readFile3 about types
didn't match correctly
ChocPanda
@choc_panda_twitter
Oct 23 11:14
@stondo

  //
  // EXERCISE 3.75
  //
  // Using the `IO.syncCatch` method, wrap Scala's `getLines` method to
  // import it into the world of pure functional programming.
  //
  import java.io.IOException
  def readFile3(file: File): IO[IOException, List[String]] =
    IO.syncCatch(Source.fromFile(file).getLines.toList) {
      case e: IOException => e
    }

ChocPanda
@choc_panda_twitter
Oct 23 11:19

  def sysExit(code: Int): IO[SecurityException, Nothing] = IO.syncCatch(System.exit(code)) {
    case e: SecurityException => e
  } *> IO.never

Dan
@shinyhappydan_twitter
Oct 23 12:46

otherNumber <- IO.syncThrowable(Some(line.toInt)).orElse(IO.now(None))

ChocPanda
@choc_panda_twitter
Oct 23 12:49

  def playGame2: IO[Exception, Unit] =
    for {
      number <- IO.sync(scala.util.Random.nextInt(5))
      _      <- putStrLn("Enter a number between 0 - 5: ")
      line   <- getStrLn
      guess <- IO
        .syncCatch(line.toInt) {
          case e: NumberFormatException =>
            putStrLn("You didn't enter an integer!") *>
            playGame2
        }
        .redeem(identity, IO.point(_))
      _ <-  if (guess == number) putStrLn("You guessed right! The number was " + number)
            else putStrLn("You guessed wrong! The number was " + number)
    } yield ()

Dan
@shinyhappydan_twitter
Oct 23 13:37

case class JavaShouldThrowThis(rootE: Throwable, finallyE: Throwable) extends Throwable

ChocPanda
@choc_panda_twitter
Oct 23 13:46

  val tryCatch2: IO[Exception, Unit] =
    IO.fail(new Exception("Uh oh")).ensuring(putStrLn("On the way out...").attempt.void)

Aaron Delaplane
@AaronDelaplane
Oct 23 13:47

IO.fail(new Exception("Uh oh")).ensuring(IO.point(println("On the way out...")))

Wouter Lammers
@WtrLammers_twitter
Oct 23 13:50

    for {
      bytes <- InputStream.openFile(file).bracket(_.close.attempt.void)(readAll(_, Nil))
    } yield bytes

Dan
@shinyhappydan_twitter
Oct 23 13:55
need a leftFlatMap
Stefano Tondo
@stondo
Oct 23 13:56
can someone please paste both the bracket and ensuring solutions?
rmsa
@rmsa
Oct 23 13:56
that'd be useful :)
ChocPanda
@choc_panda_twitter
Oct 23 13:57

  def tryCatchFinally[E, A](
    try0: IO[E, A]
  )(catch0: PartialFunction[E, IO[E, A]])(finally0: IO[Nothing, Unit]): IO[E, A] =
    try0.attempt.bracket(_ => finally0) {
      case Left(e)  if catch0.isDefinedAt(e) => catch0.apply(e)
      case Left(e)  => IO.fail(e)
      case Right(a) => IO.now(a)
    }

John A. De Goes
@jdegoes
Oct 23 13:58

  def readFileTCF2(file: File): IO[Exception, List[Byte]] =
    IO.syncException(new FileInputStream(file)).bracket(fis =>
      IO.syncException(fis.close()).attempt.void)(fis =>
      IO.syncException {
        val array = Array.ofDim[Byte](file.length.toInt)
        fis.read(array)
        array.toList
      })

ChocPanda
@choc_panda_twitter
Oct 23 14:00
@stondo When're you applying the catch0 parameter?
Stefano Tondo
@stondo
Oct 23 14:01
sorry that wasn't correct
ChocPanda
@choc_panda_twitter
Oct 23 14:02
No prob, I think what you're suggesting could be correct because I think @jdegoes mentioned a catch0 function on IO which you could use
Stefano Tondo
@stondo
Oct 23 14:03
try0.ensuring(finally0).catchSome(catch0)
I think I found it
This message was deleted

def tryCatchFinally[E, A]
    (try0: IO[E, A])
    (catch0: PartialFunction[E, IO[E, A]])
    (finally0: IO[Nothing, Unit]): IO[E, A] =
      try0.ensuring(finally0).catchSome(catch0)

ChocPanda
@choc_panda_twitter
Oct 23 14:06
Indeed that looks like the solution @jdegoes showed
Stefano Tondo
@stondo
Oct 23 14:06
@jdegoes: Can you confirm the above function is correct, please?
John A. De Goes
@jdegoes
Oct 23 14:07
@stondo Yes, that's correct.
Although I think I'd swap catchSome and finally0
Aaron Delaplane
@AaronDelaplane
Oct 23 14:30
@jdegoes Could an AWS or Kafka event that only triggers a Scala program to run every X hours be replaced by a Schedule?
Stefano Tondo
@stondo
Oct 23 14:34
what do I need to import to get access to whileOutput?
ChocPanda
@choc_panda_twitter
Oct 23 14:34

  def mySchedule[A]: Schedule[A, List[A]] = 
    (Schedule.exponential(10.milliseconds).whileOutput(_ < 60.seconds)
    andThen
    (Schedule.fixed(60.seconds) && Schedule.recurs(100))).jittered *> Schedule.identity.collect

Stefano Tondo
@stondo
Oct 23 14:35
intellij doesn't see whileOutput, I only have access to whileInput and whileValue
I heard John saying he needed to import something, but I missed that
ChocPanda
@choc_panda_twitter
Oct 23 14:35
What does sbt say
?
Wojtek Malinowski
@wojtek-sb
Oct 23 14:36
use whileValue
rmsa
@rmsa
Oct 23 14:36
Can it be because you didn't pull? John updated the versions of the dependencies
I think
Dan
@shinyhappydan_twitter
Oct 23 14:36
mine is happy with whileOutput
ChocPanda
@choc_panda_twitter
Oct 23 14:37
John updated the version of zio you may need to pull master but had to import import scala.concurrent.duration._
Stefano Tondo
@stondo
Oct 23 14:37
val ZIOVersion = "0.3.1"
anyway, thanks everyone
rgagedv01
@rgagedv01
Oct 23 14:38
https://www.youtube.com/watch?v=onQSHiafAY8
rmsa
@rmsa
Oct 23 14:38
I have that same ZIO version
ChocPanda
@choc_panda_twitter
Oct 23 14:38
I have the same zioVersion and it works for me
rmsa
@rmsa
Oct 23 14:38
val CatsEffectVersion = "1.0.0-RC3"
val ScalaZVersion = "7.2.26"
val ZIOVersion = "0.3.1"
Stefano Tondo
@stondo
Oct 23 14:39
let's see what happens after a clean :D
a clean compile solved the problem
John A. De Goes
@jdegoes
Oct 23 15:12
@AaronDelaplane Yes, you could use Schedule for that.
rgagedv01
@rgagedv01
Oct 23 15:20
I vote web-crawler
Adrian Tubio Noya
@atnoya
Oct 23 15:20
I vote hangman
Stefano Tondo
@stondo
Oct 23 15:20
web-crawler too
rgagedv01
@rgagedv01
Oct 23 15:20
=( lol
Stefano Tondo
@stondo
Oct 23 15:20
the power of voice :D
Matt
@ChocPanda
Oct 23 15:26

  implicit def ConsoleIO[E]: Console[IO[E, ?]] =
    new Console[IO[E, ?]] {
      def printLine(line: String): IO[E, Unit] = IO.sync(println(line))
      def readLine: IO[E, String]              = IO.sync(scala.io.StdIn.readLine())
    }

  trait Random[F[_]] {
    def nextInt(max: Int): F[Int]
  }
  object Random {
    def apply[F[_]](implicit F: Random[F]): Random[F] = F
  }
  def nextInt[F[_]: Random](max: Int): F[Int] = Random[F].nextInt(max)
  implicit def RandomIO[E]: Random[IO[E, ?]] =
    new Random[IO[E, ?]] {
      def nextInt(max: Int): IO[E, Int] = IO.sync(scala.util.Random.nextInt)
    }

John A. De Goes
@jdegoes
Oct 23 15:48
https://gist.github.com/jdegoes/6856c935c8501e911fc46b224ec5d790
Adrian Tubio Noya
@atnoya
Oct 23 15:58
runs for me
Stefano Tondo
@stondo
Oct 23 15:58
runs here as well
Dan
@shinyhappydan_twitter
Oct 23 15:58
runs. dreamy
richard-gibson
@richard-gibson
Oct 23 15:59
running
John A. De Goes
@jdegoes
Oct 23 16:14

      def printLine(line: String): TestIO[E,Unit] =
        TestIO(ref.update(t =>
          t.copy(output = line :: t.output)).void)

      def readLine: TestIO[E, String] =
        TestIO(ref.modify(t =>
          (t.input.head, t.copy(input = t.input.drop(1)))))

      def nextInt(max: Int): TestIO[E,Int] =
        TestIO(ref.modify(t =>
          (t.random.head, t.copy(random = t.random.drop(1)))))

Wojtek Malinowski
@wojtek-sb
Oct 23 16:20
can anyone paste // EXERCISE 12 ?
Matt
@ChocPanda
Oct 23 16:21

  def testGame(data: TestData): IO[Nothing, TestData] =
    for {
      ref <- Ref(data)
      _ <- ({
        implicit val ti = createTestInstance(ref)
        myGame[TestIO[Nothing, ?]]
      }: TestIO[Nothing, Unit]).run
      data <- ref.get
    } yield data

Wojtek Malinowski
@wojtek-sb
Oct 23 16:23
thank you
philglover
@philglover
Oct 23 16:25
I've lost the command... how do I run the GameTest1?
John A. De Goes
@jdegoes
Oct 23 16:25
GameTest1.unsafeRun
Wojtek Malinowski
@wojtek-sb
Oct 23 16:25

 import net.degoes.applications.exercises._
 GameTest1.unsafeRun

philglover
@philglover
Oct 23 16:25
thanks
rgagedv01
@rgagedv01
Oct 23 16:33
Thanks John! It was great meeting everyone.
richard-gibson
@richard-gibson
Oct 23 16:33
Thanks John!
Stefano Tondo
@stondo
Oct 23 16:42
Thanks John
Aaron Delaplane
@AaronDelaplane
Oct 23 16:42
Thanks a lot John. Great class
Adrian Tubio Noya
@atnoya
Oct 23 16:43
Thanks John, good meeting you all!
John A. De Goes
@jdegoes
Oct 23 16:43
Functional Programming for Mortals free e-book by Sam Halliday
Frameless <- Spark and FP
philglover
@philglover
Oct 23 19:26
Many thanks for the excellent course John, and thanks to all on the floor for the thought provoking questions and discussions. Apologies, I couldn't hang around tonight due to a family engagement.
I would definitely be interested in future a la carte session for the content we couldn't cover in the 3 days.
sken
@floreslorca
Oct 23 21:06
what do i need to include if i want to call sequence on a List[IO[E,A]]?
so i get IO[E, List[A]]
sken
@floreslorca
Oct 23 21:54
oh i got it
_

John A. De Goes/functional-scala

Wojtek Malinowski
@wojtek-sb
Oct 24 14:50
@jdegoes during the course you alluded that using shapeless is not something you recommend - can you expand that thought?
Stefano Tondo
@stondo
Oct 24 14:52
interested as well
John A. De Goes
@jdegoes
Oct 24 15:09
@wojtek-sb Most problems that shapeless solves can be solved better with application functors.
Applicative
_

John A. De Goes/functional-scala

John A. De Goes
@jdegoes
Oct 25 07:11
https://gist.github.com/jdegoes/97459c0045f373f4eaf126998d8f65dc
https://github.com/scalaz/scalaz/tree/08c9d40343fd4095f925812c2abaa2a0ba54b96e/core/src/main/scala/scalaz
https://www.scala-lang.org/api/2.12.x/index.html
https://scalaz.github.io/scalaz-zio/
SETUP: https://github.com/jdegoes/functional-scala
Martin Rau
@mrtnrau
Oct 25 07:34

  val UnitValues: Set[Unit] =
    Set(())

H-Works
@manelephant
Oct 25 07:38

val BoolValues: Set[Boolean] = Set(true, false)

Philippe Hong
@hwki77
Oct 25 07:39

  val UnitValues: Set[Unit] = Set(Unit)
  val NothingValues: Set[Nothing] = Set()
  val BoolValues: Set[Boolean] = Set(true, false)

Walid Chergui
@walidchergui_twitter
Oct 25 07:39
'''scala
val EitherUnitBoolValues: Set[Either[Unit, Boolean]] = Set(Left(Unit), Right(true), Right(false))
'''
John A. De Goes
@jdegoes
Oct 25 07:40
`
Philippe Hong
@hwki77
Oct 25 07:41

val TupleBoolBoolValues: Set[(Boolean, Boolean)] = Set((true, false), (true, true), (false,false), (false, true))

H-Works
@manelephant
Oct 25 07:41

  val TupleBoolBoolValues: Set[(Boolean, Boolean)] = Set((true, false), (true, true), (false, false), (false, true))

Martin Rau
@mrtnrau
Oct 25 07:42

  val EitherEitherUnitUnitUnitValues: Set[Either[Either[Unit, Unit], Unit]] =
    Set(Left(Right()), Left(Left(())), Right(()))

Serhiy Konrad
@konradSerge
Oct 25 07:43

val EitherEitherUnitUnitUnitValues: Set[Either[Either[Unit, Unit], Unit]] = Set(Left(Right(Unit)), Left(Left(Unit)), Right(Unit))

Amine SAGAAMA
@AmineSagaama
Oct 25 07:45
This message was deleted

val EitherEitherUnitUnitUnitValues: Set[Either[Either[Unit, Unit], Unit]] =
  Set(Left(Left(())), Right(()), Left(Right(())))

H-Works
@manelephant
Oct 25 07:53

  A * B = { true, false, "red", "green", "blue" }

Amine SAGAAMA
@AmineSagaama
Oct 25 07:53
{(true, "red"), (true, "green"), (true, "blue"), (false, "red"), (false, "green"), (false, "blue)}
Philippe Hong
@hwki77
Oct 25 07:54

Set((true,"red"), (false, "red"), (true, "green"), (false, "green"), (true, "blue"), (false, "blue"))

balanka
@balanka
Oct 25 07:54

List((true, "red", (false, "green"), .....)

Serhiy Konrad
@konradSerge
Oct 25 08:04

def to1[A](t: (A, Unit)): A = t._1
  def from1[A](a: A): (A, Unit) = (a, Unit)

H-Works
@manelephant
Oct 25 08:04

  def to1[A](t: (A, Unit)): A = t._1 

  def from1[A](a: A): (A, Unit) = (a, Unit)

Olivier Schultz
@olivierschultz
Oct 25 08:04

  def to1[A](t: (A, Unit)): A = t._1
  def from1[A](a: A): (A, Unit) = (a, ())

Philippe Hong
@hwki77
Oct 25 08:04

def to1[A](t: (A, Unit)): A = {
    t._1
  }
  def from1[A](a: A): (A, Unit) = (a, Unit)

Martin Rau
@mrtnrau
Oct 25 08:08

  def to2[A](t: (A, Nothing)): Nothing =
    t._2
  def from2[A](n: Nothing): (A, Nothing) =
    n

Olivier Schultz
@olivierschultz
Oct 25 08:17

  type RobotIdentifier  = Int
  type PersonIdentifier = String
  type Identifier       = Either[RobotIdentifier, PersonIdentifier]

  sealed trait Identifier2
  case class RobotIdentifierSumType(id: RobotIdentifier) extends Identifier2
  case class PersonIdentifierSumType(id: PersonIdentifier) extends Identifier2

Olivier Schultz
@olivierschultz
Oct 25 08:27

  def to3[A](t: Either[A, Nothing]): A = t match {
    case Left(a)  => a
    case Right(n) => n
  }
  def from3[A](a: A): Either[A, Nothing] = Left(a)

Philippe Hong
@hwki77
Oct 25 08:27

def to3[A](t: Either[A, Nothing]): A = t match {
    case Left(a) => a
    case Right(b) => b
  }
  def from3[A](a: A): Either[A, Nothing] = Left(a)

H-Works
@manelephant
Oct 25 08:28

  def to3[A](t: Either[A, Nothing]): A = t match {
    case Left(a) => a
    case Right(n) => n
  }

  def from3[A](a: A): Either[A, Nothing] = Left(a)

H-Works
@manelephant
Oct 25 08:42

case class CreditCard(number: Int, date: String, name: String)

Philippe Hong
@hwki77
Oct 25 08:45

final case class CreditCardCC(
                       number: Int,
                       expirationDate: Long,
                       securityCode: Int
                       )

Martin Rau
@mrtnrau
Oct 25 08:47

  sealed trait PaymentMethod
  case object CreditCard extends PaymentMethod
  case object BankAccount extends PaymentMethod
  case object CryptoCurrency extends PaymentMethod

Philippe Hong
@hwki77
Oct 25 08:47

sealed trait PaymentMethod
  case object CreditCard extends PaymentMethod
  case object BankAccount extends PaymentMethod
  case object Crypto extends PaymentMethod

Amine SAGAAMA
@AmineSagaama
Oct 25 08:48

  sealed trait PaymentMethod

  case object CreditCard extends PaymentMethod
  case object BankAccount extends PaymentMethod
  case object CryptoCurrency extends PaymentMethod

balanka
@balanka
Oct 25 08:49

sealed trait PaymentMethod
case object CreditCard
case object BankAccount
case object CryptoCurrency

H-Works
@manelephant
Oct 25 08:49

  sealed trait PaymentMethod2
  case object CreditCardMethod extends PaymentMethod2
  case object BankAccount extends PaymentMethod2

Philippe Hong
@hwki77
Oct 25 08:49

final case class EmployeeCC(
                       title: TitleSealedTrait,
                       salary: BigDecimal,
                       name: String,
                       employmentDate: LocalDate
                       )

H-Works
@manelephant
Oct 25 08:50

  final case class Employee2(title: String, salary: Long, name: String, date: String)

Alberto Zaccagni
@lazywithclass
Oct 25 08:50

final case class Employee(title: String, salary: Double, name: String, employmentDate: Date)

Amine SAGAAMA
@AmineSagaama
Oct 25 08:50

 case class Employee(name: String,
                      title: String,
                      salary: Double,
                      employmentDate: Long)

Philippe Hong
@hwki77
Oct 25 08:54

sealed trait ChessPieceST
  case object Pawn extends ChessPieceST
  case object Rook extends ChessPieceST
  case object Bishop extends ChessPieceST
  case object Knight extends ChessPieceST
  case object Queen extends ChessPieceST
  case object King extends ChessPieceST

Amine SAGAAMA
@AmineSagaama
Oct 25 08:55

  sealed trait ChessPiece

  case object Pawn extends ChessPiece
  case object Rook extends ChessPiece
  case object Bishop extends ChessPiece
  case object Knight extends ChessPiece
  case object Queen extends ChessPiece
  case object King extends ChessPiece

H-Works
@manelephant
Oct 25 08:56

  sealed trait ChessPiece2

  case object Pawn extends ChessPiece2
  case object Rook extends ChessPiece2
  case object Bishop extends ChessPiece2
  case object Knight extends ChessPiece2

  final case class GameWorld2(map: Map, player: Player, npc: Npc, items: Set[Item], stats: Set[Stat])

  final case class Map(name: String)
  final case class Player(name: String, age: Int)
  final case class Npc(name: String, age: Int)
  final case class Stat(name: String, value: Int)

  sealed trait Item
  case object Lamp extends Item
  case object Food extends Item

Philippe Hong
@hwki77
Oct 25 09:02

final case class GameWorldCC(
    playerStatus: PlayerStatusST,
    playerClass: ClassST,
    playerStats: PlayerStatsST,
    playerItems: PlayerItemsST
  )

  sealed trait PlayerItemsST
  case class Potions(number: Int) extends PlayerItemsST
  case class Food(name: String, number: Int) extends PlayerItemsST

  sealed trait PlayerStatsST
  case class Strength(value: Int) extends PlayerStatusST
  case class Agility(value: Int) extends PlayerStatusST
  case class Intellect(value: Int) extends PlayerStatusST

  sealed trait PlayerStatusST
  case class Player(name: String) extends PlayerStatusST
  case class NonPlayer(name: String) extends PlayerStatusST

  sealed trait ClassST
  case object Warrior extends ClassST
  case object Mage extends ClassST
  case object Ranger extends ClassST

John A. De Goes
@jdegoes
Oct 25 09:03

  case class GameWorld(
    map     : GameMap,
    player  : Character,
    time    : Time)

  case class Character(
    name      : String,
    charClass : CharClass,
    position  : Cell,
    stats     : Stats,
    inventory : List[Item])

  case class Cell(
    name        : String,
    items       : List[Item],
    characters  : List[Character])

  case class GameMap(
    cells   : Set[Cell],
    routes  : Map[Cell, Set[Cell]])

  case class Stats(health: Int, stamina: Int)

  sealed trait CharClass
  object CharClass {
    case object Witch   extends CharClass
    case object Warlock extends CharClass
    case object Wizard  extends CharClass
    case object Human   extends CharClass
    case object Orc     extends CharClass
    case object Elf     extends CharClass
    case object Dwarf   extends CharClass
  }

Amine SAGAAMA
@AmineSagaama
Oct 25 09:37

def parseInt2(s: String): Try[Int] = Try(s.toInt)

Olivier Schultz
@olivierschultz
Oct 25 09:37

def parseInt2(s: String): Option[Int] = Try(s.toInt).toOption

H-Works
@manelephant
Oct 25 09:37

  def parseInt2(s: String): Int = {
    try {
      s.toInt
    } catch {
      case e: Exception => 0
    }
  }

Serhiy Konrad
@konradSerge
Oct 25 09:38

def parseInt2(s: String): Try[Int] = Try(s.toInt)

balanka
@balanka
Oct 25 09:39

def parseInt2(s:String):Option[Int]=try  {
Some(s.toInt)
}catch (Exception ex) {
None
}

Serhiy Konrad
@konradSerge
Oct 25 09:41
side effect
Amine SAGAAMA
@AmineSagaama
Oct 25 09:51

def divide1(a: Int, b: Int): Option[Int] = Try(a / b).toOption

Philippe Hong
@hwki77
Oct 25 09:51

def divide2(a: Int, b: Int): Option[Int] = Try{a / b}.toOption

Olivier Schultz
@olivierschultz
Oct 25 09:51

def divide2(a: Int, b: Int): Option[Int] = Try(a / b).toOption

H-Works
@manelephant
Oct 25 09:51

def divide2(a: Int, b: Int): Option[Int] = if (b > 0) Some(a / b) else None

balanka
@balanka
Oct 25 09:52

def divide2(a:int, b:Int):Option[Int]=Try(a/b).toOption

Serhiy Konrad
@konradSerge
Oct 25 09:56

def freshId2(id: Int): (Int, Int) = (id, id + 1)

Philippe Hong
@hwki77
Oct 25 09:57

def afterOneHour2(time: LocalDateTime): LocalDateTime = time.plusHours(1)

Alberto Zaccagni
@lazywithclass
Oct 25 09:58

def afterOneHour2(t: LocalDateTime): LocalDateTime = t.plusHours(1)

Amine SAGAAMA
@AmineSagaama
Oct 25 09:58

def afterOneHour2(time: LocalDateTime): LocalDateTime = 
    time.plusHours(1)

H-Works
@manelephant
Oct 25 09:58

 def afterOneHour2(startTime: LocalDateTime): LocalDateTime = startTime.plusHours(1)

Philippe Hong
@hwki77
Oct 25 10:00

def head2[A](as: List[A]): Option[A] = {
    as.headOption
  }

Amine SAGAAMA
@AmineSagaama
Oct 25 10:01

  def head2[A](as: List[A]): Option[A] =
    as match {
      case h :: _ => Some(h)
      case _ => None
    }

balanka
@balanka
Oct 25 10:02

head2[A](as:List[A]):Option[A]= as.headOption

Serhiy Konrad
@konradSerge
Oct 25 10:14
Sorry, what is 3? Don't see it
Olivier Schultz
@olivierschultz
Oct 25 10:14
No java.Long.Object
Serhiy Konrad
@konradSerge
Oct 25 10:15
thanks
Olivier Schultz
@olivierschultz
Oct 25 10:19

  def printLine(line: String): Unit = ()

  def readLine: String = "fp"

Serhiy Konrad
@konradSerge
Oct 25 10:20

def readLine: String = ""

Amine SAGAAMA
@AmineSagaama
Oct 25 10:20

def readLine: String = ""

Serhiy Konrad
@konradSerge
Oct 25 10:21

def systemExit(code: Int): Unit = ()

H-Works
@manelephant
Oct 25 10:21

 def systemExit(code: Int): Unit = ()

Amine SAGAAMA
@AmineSagaama
Oct 25 10:21

def systemExit(code: Int): Unit = ()

Olivier Schultz
@olivierschultz
Oct 25 10:25

```scala
def printer2[A](println: String => A, combine: (A, A) => A): A =
    combine(combine(println("Welcome to the help page!")), println("To list commands, type `commands`."), combine(println("For help on a command, type `help <command>`")), println("To exit the help page, type `exit`."))

Amine SAGAAMA
@AmineSagaama
Oct 25 11:49

  sealed trait DrawCommand

  case object GoLeft extends DrawCommand

  case object GoRight extends DrawCommand

  def draw(size: Int, commands: List[DrawCommand]): List[List[Boolean]] = {
    commands.foldLeft[(Int, Int, List[List[Boolean]])](
      (0, 0, List.fill(size, size)(false))

    ) {
      case ((x, y, c), GoLeft) => (x + 1, y, c)
      case ((x, y, c), GoRight) => (x - 1, y, c)
    }._3

John A. De Goes
@jdegoes
Oct 25 12:10

  // mono monos ("single")
  // morphic morphus ("form" / "shape")
  // monomorphic = single form / shape
  // polymorphic = many forms / shapes
  def repeater[A](combine: (A, A) => A): Int => (A => A) = {
    val f0 = repeater(combine)

    i => s => if (i <= 1) s else combine(s, f0(i - 1)(s))
  }

  val stringRepeater = repeater[String](_ + _)
  def listRepeater[A] = repeater[List[A]](_ ++ _)

  val repeatStringOnce   = stringRepeater(1)
  val repeatStringTwice  = stringRepeater(2)
  val repeatStringThrice = stringRepeater(3)

  repeatStringThrice("foo") // "foofoofoo"

Serhiy Konrad
@konradSerge
Oct 25 12:17

def fanout[A, B, C](f: A => B, g: A => C): A => (B, C) = a => (f(a), g(a))

Martin Rau
@mrtnrau
Oct 25 12:17

  def fanout[A, B, C](f: A => B, g: A => C): A => (B, C) =
    a => (f(a), g(a))

Amine SAGAAMA
@AmineSagaama
Oct 25 12:17

def fanout[A, B, C](f: A => B, g: A => C): A => (B, C) =
    a => (f(a), g(a))

Walid Chergui
@walidchergui_twitter
Oct 25 12:17

  def fanout[A, B, C](f: A => B, g: A => C): A => (B, C) =
    (a: A) => (f(a), g(a))

H-Works
@manelephant
Oct 25 12:19

  def fanout[A, B, C](f: A => B, g: A => C): A => (B, C) = (a: A) => (f(a), g(a))

Amine SAGAAMA
@AmineSagaama
Oct 25 12:22

def cross[A, B, C, D](f: A => B, g: C => D): (A, C) => (B, D) =
    (a, c) => (f(a), g(c))

H-Works
@manelephant
Oct 25 12:24

 def cross[A, B, C, D](f: A => B, g: C => D): (A, C) => (B, D) = (a: A, c: C) => (f(a), g(c))

Olivier Schultz
@olivierschultz
Oct 25 12:24

def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B = {
    case Left(a)  => f(a)
    case Right(c) => g(c)
  }

Philippe Hong
@hwki77
Oct 25 12:24

def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B =
    ((eac: Either[A, C]) => eac match {
      case Left(a) => f(a)
      case Right(c) => g(c)
    })

Walid Chergui
@walidchergui_twitter
Oct 25 12:24

def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B =
    (a : Either[A, C]) => a match {
      case Left(value) => f(value)
      case Right(value) => g(value)
    }

Serhiy Konrad
@konradSerge
Oct 25 12:25

def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B = a => a.fold(f, g)

:)
H-Works
@manelephant
Oct 25 12:26

  def either[A, B, C](f: A => B, g: C => B): Either[A, C] => B = {
    case Left(a) => f(a)
    case Right(c) => f(c)
  }

Martin Rau
@mrtnrau
Oct 25 12:26
` scala
```scala

  def choice[A, B, C, D](f: A => B, g: C => D): Either[A, C] => Either[B, D] = {
    case Left(a)  => Left(f(a))
    case Right(c) => Right(g(c))
  }

Philippe Hong
@hwki77
Oct 25 12:27

def choice[A, B, C, D](f: A => B, g: C => D): Either[A, C] => Either[B, D] =
    ((eac: Either[A, C]) => eac match {
      case Left(a) => Left(f(a))
      case Right(c) => Right(g(c))
    })

Walid Chergui
@walidchergui_twitter
Oct 25 12:28

  def compose[A, B, C](f: B => C, g: A => B): A => C =
    g andThen f

Philippe Hong
@hwki77
Oct 25 12:28

def compose[A, B, C](f: B => C, g: A => B): A => C =
    (a: A) => f(g(a))

Martin Rau
@mrtnrau
Oct 25 12:28

  def compose[A, B, C](f: B => C, g: A => B): A => C =
    a => f(g(a))

Amine SAGAAMA
@AmineSagaama
Oct 25 12:29

def compose[A, B, C](f: B => C, g: A => B): A => C =
    a => f(g(a))

Alberto Zaccagni
@lazywithclass
Oct 25 12:29

def compose[A, B, C](f: B => C, g: A => B): A => C =
    (a: A) => f(g(a))

H-Works
@manelephant
Oct 25 12:29

  def choice[A, B, C, D](f: A => B, g: C => D): Either[A, C] => Either[B, D] = {
    case Left(a) => Left(f(a))
    case Right(c) => Right(g(c))
  }

def compose[A, B, C](f: B => C, g: A => B): A => C = a => f(g(a))

balanka
@balanka
Oct 25 12:31

compose[A,B,C]( f:B=>C, g:A=>B):A=C = (a:A) =>g(a) andThen f

John A. De Goes
@jdegoes
Oct 25 12:33

def alt[E1, E2, A, B](l: Parser[E1, A], r: E1 => Parser[E2, B]):
    Parser[E2, Either[A, B]] =
      Parser[E2, Either[A, B]]((s: String) =>
        ( ??? : Either[E2, (String, Either[A, B])])
      )

Martin Rau
@mrtnrau
Oct 25 12:33

  def alt[E1, E2, A, B](l: Parser[E1, A], r: E1 => Parser[E2, B]): Parser[E2, Either[A, B]] =
    Parser( s1 =>
      l.run(s1) match {
        case Left(e1) => r(e1).run(s1) match {
          case Left(e2) => Left(e2)
          case Right((s2, b)) => Right((s2, Right(b)))
        }
        case Right((s2, a)) => Right((s2, Left(a)))
      }
    )

John A. De Goes
@jdegoes
Oct 25 12:38

  def alt[E1, E2, A, B](l: Parser[E1, A], r: E1 => Parser[E2, B]):
    Parser[E2, Either[A, B]] =
      Parser[E2, Either[A, B]]((s: String) =>
        (( l.run(s) match {
          case Left(e1) => ???
          case Right((s, a)) => ???
        }) : Either[E2, (String, Either[A, B])])
      )

Philippe Hong
@hwki77
Oct 25 12:54

object repeat {
    def apply[A](n: Int)(a: A, f: A => A): A = {
        if (n<= 0) a else apply(n-1)(f(a),f)
  }

Martin Rau
@mrtnrau
Oct 25 12:54

  object repeat {
    def apply[A](f: A => A, a: A, n: Int): A =
      if (n <= 0) a else apply(f, f(a), n - 1)
  }

balanka
@balanka
Oct 25 13:02

object repeat {
def apply[A]( a:A, n:Int, f:A=>A):A =
if(n<=0) A else apply(a, n-1, f(a))

}

John A. De Goes
@jdegoes
Oct 25 13:29

def apply[A, B, C](
      l: List[A],
      by: A => B)(
        reducer: (B, List[A]) => C):
        Map[B, C] = ???

Martin Rau
@mrtnrau
Oct 25 14:16

  type Answer1 = `* => *`[Option]

  trait `*`[A]
  type Answer3 = `*`[Int]

Philippe Hong
@hwki77
Oct 25 14:17

trait Answer3

Olivier Schultz
@olivierschultz
Oct 25 14:21

 type NewType1 /* ??? */
  type Answer5 = `(* => *) => *`[Monad]

H-Works
@manelephant
Oct 25 14:22

  type NewType1[A[_]]

Oleksandra Holubitska
@Vilkina
Oct 25 14:23

function inverse($x) {
if (!$x) {
throw new Exception(‘Divide by zero.’);
}
return 1/$x;
}

try {
echo inverse(5) . "\n";
echo inverse(0) . "\n";
} catch (Exception $e) {
echo ‘An error: ', $e->getMessage(), "\n";
}

// Continue
echo “Hello World \n”;
?>

Is it possible to do with bracket?
But async
:)
Of course, we don't have such exception in FP
Like "null" or "divide by zero"
H-Works
@manelephant
Oct 25 14:32

  val ListSized: Sized[List] = {
    def size[A](fa: List[A]): Int = fa.length
  }

Martin Rau
@mrtnrau
Oct 25 14:32

  val ListSized: Sized[List] =
    new Sized[List] {
      def size[A](fa: List[A]): Int = fa.length
    }

Philippe Hong
@hwki77
Oct 25 14:32

val ListSized: Sized[List] =
    new Sized[List] {
      def size[A](fa: List[A]): Int = {
        fa.length
      }
    }

Amine SAGAAMA
@AmineSagaama
Oct 25 14:33

val ListSized: Sized[List] =
    new Sized[List] {
      override def size[A](fa: List[A]): Int =
        fa match {
          case Nil => 0
          case a :: as => 1 + size(as)
        }
    }

Martin Rau
@mrtnrau
Oct 25 14:39

  def MapSized2[K]: Sized[Map[K, ?]] =
    new Sized[Map[K, ?]] {
      def size[A](fa: Map[K, A]): Int = fa.size
    }

there are two exercise 9 exercises
Amine SAGAAMA
@AmineSagaama
Oct 25 14:40

def MapSized2[K]: Sized[Map[K, ?]] =
    new Sized[Map[K, ?]] {
      override def size[A](fa: Map[K, A]): Int = fa.size
    }

Martin Rau
@mrtnrau
Oct 25 14:45

  def Tuple3Sized[A, B]: Sized[Tuple3[A, B, ?]] =
    new Sized[Tuple3[A, B, ?]] {
      def size[C](fa: Tuple3[A, B, C]): Int = 3
    }

Philippe Hong
@hwki77
Oct 25 14:46

def Tuple3Sized[B, C]: Sized[(B, C, ?)] =
    new Sized[(B, C, ?)] {
      def size[A](fa: (B, C, A)): Int = {
        1
      }
    }

Amine SAGAAMA
@AmineSagaama
Oct 25 14:46

def Tuple3Sized[A, B]: Sized[(A ,B, ?)] =
    new Sized[(A ,B, ?)] {
      override def size[C](fa: (A, B, C)): Int = 3
    }

H-Works
@manelephant
Oct 25 14:49

  def Tuple3Sized[A, B]: Sized[(A, B, ?)] =
    new Sized[(A, B, ?)] {
      def size[A](fa: (A, B, A)): Int = 1
    }

Martin Rau
@mrtnrau
Oct 25 15:31
can you copty the tc_motivating example to gitter?
John A. De Goes
@jdegoes
Oct 25 15:32

object tc_motivating {
  /*
  A type class is a tuple of three things:

  1. A set of types and / or type constructors.
  2. A set of operations on values of those types.
  3. A set of laws governing the operations.

  A type class instance is an instance of a type class for a given
  set of types. 

  */
  /**
   * All implementations are required to satisfy the transitivityLaw.
   *
   * Transitivity Law:
   * forall a b c.
   *   lt(a, b) && lt(b, c) ==
   *     lt(a, c) || (!lt(a, b) || !lt(b, c))
   */
  trait LessThan[A] {
    def lt(l: A, r: A): Boolean

    final def transitivityLaw(a: A, b: A, c: A): Boolean =
      lt(a, b) && lt(b, c) ==
        lt(a, c) || (!lt(a, b) || !lt(b, c))
  }
  implicit class LessThanSyntax[A](l: A) {
    def < (r: A)(implicit A: LessThan[A]): Boolean = A.lt(l, r)
    def >= (r: A)(implicit A: LessThan[A]): Boolean = !A.lt(l, r)
  }
  object LessThan {
    def apply[A](implicit A: LessThan[A]): LessThan[A] = A

    implicit val LessThanInt: LessThan[Int] = new LessThan[Int] {
      def lt(l: Int, r: Int): Boolean = l < r
    }
    implicit def LessThanList[A: LessThan]: LessThan[List[A]] = new LessThan[List[A]] {
      def lt(l: List[A], r: List[A]): Boolean =
        (l, r) match {
          case (Nil, Nil) => false
          case (Nil, _) => true
          case (_, Nil) => false
          case (l :: ls, r :: rs) => l < r && lt(ls, rs)
        }
    }
  }

  def sort[A: LessThan](l: List[A]): List[A] = l match {
    case Nil => Nil
    case x :: xs =>
      val (lessThan, notLessThan) = xs.partition(_ < x)

      sort(lessThan) ++ List(x) ++ sort(notLessThan)
  }

  sort(List(1, 2, 3))
  sort(List(List(1, 2, 3), List(9, 2, 1), List(1, 2, 9)))
}

Martin Rau
@mrtnrau
Oct 25 15:32
thank you for the day!
_

John A. De Goes/functional-scala

Serhiy Konrad
@konradSerge
Oct 26 08:04

def sort2[A: Ord](l: List[A]): List[A] = l match {
    case Nil => Nil
    case x :: xs =>
      val (lessThan, notLessThan) = xs.partition(_ < x)

      sort2(lessThan) ++ List(x) ++ sort2(notLessThan)
  }

H-Works
@manelephant
Oct 26 08:05

  def sort2[A: Ord](l: List[A]): List[A] = l match {
    case Nil => Nil
    case x :: xs =>
      val (lessThan, notLessThan) = xs.partition(_ < x)

      sort2(lessThan) ++ List(x) ++ sort2(notLessThan)
  }

Walid Chergui
@walidchergui_twitter
Oct 26 08:18

implicit val MyPathPathLike: PathLike[MyPath] = new PathLike[MyPath] {

    override def child(parent: MyPath, name: String): MyPath = Child(parent, name)

    override def parent(node: MyPath): Option[MyPath] = node match {
      case child: Child => Option(child.parent)
      case _ => None
    }

    override def root: MyPath = Root
  }

  sealed trait MyPath
  case object Root extends MyPath
  case class Child(parent: MyPath, name: String)

John A. De Goes
@jdegoes
Oct 26 08:22
https://docs.oracle.com/javase/7/docs/api/java/io/File.html
Walid Chergui
@walidchergui_twitter
Oct 26 08:24

implicit val FilePathLike: PathLike[java.io.File] = new PathLike[java.io.File]{
    override def child(parent: File, name: String): File = new File(parent, name)

    override def parent(node: File): Option[File] = node match {
      case file: File=> Option(file.getParentFile)
      case _ => None
    }

    override def root: File = File.listRoots().headOption.getOrElse(new File("/"))
  }

H-Works
@manelephant
Oct 26 08:33

def parentChildIsAParent(node: A, name: String): Boolean = parent(child(node, name)) == node

H-Works
@manelephant
Oct 26 08:46

def /(name: String)(implicit A: PathLike[A]): Option[A] = Option(A.child(a, name))

Walid Chergui
@walidchergui_twitter
Oct 26 08:49

implicit val FilterableList: Filterable[List] = new Filterable[List] {
    override def filter[A](fa: List[A], f: A => Boolean): List[A] = fa.filter(f)
  }

Philippe Hong
@hwki77
Oct 26 08:50

implicit val FilterableList: Filterable[List] = {
    new Filterable[List] {
      override def filter[A](fa: List[A], f: A => Boolean): List[A] = {
        fa.filter(f(_))
      }
    }
  }

Martin Rau
@mrtnrau
Oct 26 08:51

  implicit class FilterableSyntax[F[_], A](fa: F[A]) {
    def filter(fa: F[A], f: A => Boolean)(implicit F: Filterable[F]) =
      F.filter(fa, f)
  }

  implicit class FilterableSyntax[F[_], A](fa: F[A]) {
    def filter(f: A => Boolean)(implicit F: Filterable[F]) =
      F.filter(fa, f)
  }

Martin Rau
@mrtnrau
Oct 26 08:57

  implicit val ListCollection: Collection[List] =
    new Collection[List] {
      def empty[A]: List[A] =
        Nil

      def cons[A](a: A, as: List[A]): List[A] =
        a :: as

      def uncons[A](fa: List[A]): Option[(A, List[A])] =
        fa match {
          case Nil => None
          case a :: as => Some(a -> as)
        }
    }

Walid Chergui
@walidchergui_twitter
Oct 26 08:57

implicit val ListCollection: Collection[List] = new Collection[List] {
    override def empty[A]: List[A] = List.empty

    override def cons[A](a: A, as: List[A]): List[A] = a::as

    override def uncons[A](fa: List[A]): Option[(A, List[A])] = fa match {
      case a::as => Option((a,as))
      case _ => None
    }
  }

Philippe Hong
@hwki77
Oct 26 08:57

  implicit val ListCollection: Collection[List] = {
    new Collection[List] {
      override def empty[A]: List[A] = List.empty

      override def cons[A](a: A, as: List[A]): List[A] = {
        a :: as
      }

      override def uncons[A](fa: List[A]): Option[(A, List[A])] = {
        fa match {
          case Nil => None
          case a :: as => Some(a -> as)
        }
      }
    }
  }

John A. De Goes
@jdegoes
Oct 26 08:57

implicit class CollectionSyntax[F[_], A](fa: F[A]) {
    ???
  }

Martin Rau
@mrtnrau
Oct 26 08:59

  implicit class CollectionSyntax[F[_], A](fa: F[A]) {
    def uncons(implicit F: Collection[F]): Option[(A, F[A])] =
      F.uncons(fa)
  }

Walid Chergui
@walidchergui_twitter
Oct 26 08:59

 implicit class CollectionSyntax[F[_], A](fa: F[A]) {
    def uncons[F : Collection](implicit collection: Collection[F]) = {
      collection.uncons(fa)
    }
  }

Amine SAGAAMA
@AmineSagaama
Oct 26 09:00

  implicit class CollectionSyntax[F[_], A](fa: F[A]) {
    def uncons(fa: List[F[A]])(implicit F: Collection[F]) =
      fa match {
        case Nil => None
        case a :: as => Some(a -> as)
      }
  }

Serhiy Konrad
@konradSerge
Oct 26 09:20

implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] =
    new Semigroup[NotEmpty[A]] {
      def append(l: NotEmpty[A], r: => NotEmpty[A]): NotEmpty[A] = l |+| r
    }

Martin Rau
@mrtnrau
Oct 26 09:21

  implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] =
    new Semigroup[NotEmpty[A]] {
      def append(l: NotEmpty[A], r: => NotEmpty[A]): NotEmpty[A] =
        l.tail match {
          case None    => NotEmpty(l.head, Some(r))
          case Some(t) => NotEmpty(l.head, Some(append(t, r)))
        }
    }

Walid Chergui
@walidchergui_twitter
Oct 26 09:23

  implicit def NotEmptySemigroup[A]: Semigroup[NotEmpty[A]] = new Semigroup[NotEmpty[A]] {

    override def append(f1: NotEmpty[A], f2: => NotEmpty[A]): NotEmpty[A] = NotEmpty(f1.head, Option(NotEmpty(f2.head, f1.tail |+| f2.tail)))
  }

Martin Rau
@mrtnrau
Oct 26 09:25

  implicit val MaxSemigroup: Semigroup[Max] =
    new Semigroup[Max] {
      def append(l: Max, r: => Max): Max =
        if (l.value > r.value) l else r
    }

Serhiy Konrad
@konradSerge
Oct 26 09:26
``scala
```scalaimplicit val MaxSemigroup: Semigroup[Max] = new Semigroup[Max] {
override def append(r: Max, l: => Max): Max = if( r.value > l.value) r else l
}
Martin Rau
@mrtnrau
Oct 26 09:27
Is exercise 3 for Last already implemented?
Amine SAGAAMA
@AmineSagaama
Oct 26 09:28

 implicit val MaxSemigroup: Semigroup[Max] =
    new Semigroup[Max] {
      override def append(f1: Max, f2: => Max): Max =
        if (f1.value >= f2.value) f1 else f2
    }

Martin Rau
@mrtnrau
Oct 26 09:33

  implicit def OptionSemigroup[A: Semigroup]: Semigroup[Option[A]] =
    new Semigroup[Option[A]] {
      def append(l: Option[A], r: => Option[A]): Option[A] =
        (l, r) match {
          case (None    , None    ) => None
          case (Some(a) , None    ) => Some(a)
          case (None    , Some(a) ) => Some(a)
          case (Some(a1), Some(a2)) => Some(a1 |+| a2)
        }
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 09:35

implicit def OptionSemigroup[A: Semigroup]: Semigroup[Option[A]] =
    new Semigroup[Option[A]] {
      override def append(f1: Option[A], f2: => Option[A]): Option[A] =
        (f1, f2) match {
          case (None, None) => None
          case (Some(f1), None) => Some(f1)
          case (None, Some(f2)) => Some(f2)
          case (Some(f1), Some(f2)) => Some(f1 |+| f2)
        }
    }

H-Works
@manelephant
Oct 26 09:36

  implicit def OptionSemigroup[A: Semigroup]: Semigroup[Option[A]] = new Semigroup[Option[A]] {
    def append(l: Option[A], r: => Option[A]): Option[A] = (l, r) match {
      case (None, None) => None,
      case (Some(l), None) => Some(l),
      case (None, Some(r)) => Some(r),
      case (Some(l), Some(r)) => Some(l |+| r)
    }
  }

Olivier Schultz
@olivierschultz
Oct 26 09:37

implicit def SemigroupTuple2[A: Semigroup, B: Semigroup]:
    Semigroup[(A, B)] = new Semigroup[(A, B)] {
      def append(l: (A, B), r: => (A, B)): (A, B) =
        (l._1 |+| r._1, l._2 |+| r._2)
    }

Martin Rau
@mrtnrau
Oct 26 09:37

  implicit def SemigroupTuple2[A: Semigroup, B: Semigroup]: Semigroup[(A, B)] =
    new Semigroup[(A, B)] {
      def append(l: (A, B), r: => (A, B)): (A, B) =
        (l._1 |+| r._1, l._2 |+| r._2)
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 09:37

implicit def SemigroupTuple2[A: Semigroup, B: Semigroup]:
  Semigroup[(A, B)] = new Semigroup[(A, B)] {
    def append(l: (A, B), r: => (A, B)): (A, B) =
      (l._1 |+| r._1, l._2 |+| r._2)
  }

H-Works
@manelephant
Oct 26 09:39

  implicit def SemigroupTuple2[A: Semigroup, B: Semigroup]:
  Semigroup[(A, B)] = new Semigroup[(A, B)] {
    def append(l: (A, B), r: => (A, B)): (A, B) = (l._1 |+| r._1, l._2 |+| r._2 )
  }

Walid Chergui
@walidchergui_twitter
Oct 26 09:52

  final case class Conj(value: Boolean)
  implicit val ConjMonoid: Monoid[Conj] = new Monoid[Conj] {
    override def zero: Conj = Conj(false)

    override def append(f1: Conj, f2: => Conj): Conj = Conj(f1.value && f2.value)
  }

Martin Rau
@mrtnrau
Oct 26 09:52

  final case class Conj(value: Boolean)
  implicit val ConjMonoid: Monoid[Conj] =
    new Monoid[Conj] {
      def append(l: Conj, r: => Conj): Conj =
        Conj(l.value && r.value)

      def zero: Conj =
        Conj(true)
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 09:53

implicit val ConjMonoid: Monoid[Conj] =
    new Monoid[Conj] {
      override def zero: Conj = Conj(true)

      override def append(f1: Conj, f2: => Conj): Conj = {
        Conj(f1.value && f2.value)
      }
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 09:59

def SemigroupMap[K, V: Semigroup]: Semigroup[Map[K, V]] =
    new Semigroup[Map[K, V]] {
      override def append(f1: Map[K, V], f2: => Map[K, V]): Map[K, V] =
        f1 ++ f2
    }

Serhiy Konrad
@konradSerge
Oct 26 10:14

case class UserPermission(account: AccountID,
                           resources: Map[ResourceID, Set[Capability]])

Olivier Schultz
@olivierschultz
Oct 26 10:15

  case class UserPermission(up: Map[AccountID, Map[ResourceID, Set[Capability]]])

John A. De Goes
@jdegoes
Oct 26 10:20

def allResources: Set[ResourceID] = ???

    def permissionsFor(resourceID: ResourceID): Set[Capability] = ???

    def audit(resourceID: ResourceID, capability: Capability): Set[AccountID] = ???

Serhiy Konrad
@konradSerge
Oct 26 10:30

override def append(l: UserPermission, r: => UserPermission): UserPermission = UserPermission(l.value |+| r.value)

def zero: UserPermission = UserPermission(mzero[Map[ResourceID, Set[(AccountID, Capability)]]])

would be also valid?
John A. De Goes
@jdegoes
Oct 26 10:38
@konradSerge Yes, that's legit
Serhiy Konrad
@konradSerge
Oct 26 10:47
thanks
Olivier Schultz
@olivierschultz
Oct 26 11:51

sealed trait BTree[+A]
  case class Leaf[A](a: A) extends BTree[A]
  case class Fork[A](left: BTree[A], right: BTree[A]) extends BTree[A]
  implicit val BTreeFunctor: Functor[BTree] =
    new Functor[BTree] {
      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] = fa match {
        case Leaf(a)    => Leaf(f(a))
        case Fork(l, r) => Fork(map(l)(f), map(r)(f))
      }
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 11:52

implicit val BTreeFunctor: Functor[BTree] =
    new Functor[BTree] {
      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] =
        fa match {
          case Leaf(a) => Leaf(f(a))
          case Fork(f1, f2) => Fork(map(f1)(f), map(f2)(f))
        }
    }

Olivier Schultz
@olivierschultz
Oct 26 11:54

implicit val NothingFunctor: Functor[Nothing] = new Functor[Nothing] {
    override def map[A, B](fa: Nothing)(f: A => B): Nothing = fa

H-Works
@manelephant
Oct 26 11:54

  implicit val BTreeFunctor: Functor[BTree] =
    new Functor[BTree] {
      def map[A, B](fa: BTree[A])(f: A => B): BTree[B] = fa match {
        case Leaf(a) => Leaf(f(a))
        case Fork(f1, f2) => Fork(map(f1)(f), map(f2)(f))
      }
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 11:55

implicit val NothingFunctor: Functor[Nothing] =
  new Functor[Nothing] {
    override def map[A, B](fa: Nothing)(f: A => B): Nothing =
      fa
  }

Martin Rau
@mrtnrau
Oct 26 11:59

    implicit def ParserFunctor[E]: Functor[Parser[E, ?]] =
      new Functor[Parser[E, ?]] {
        def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] =
        Parser( s1 =>
          fa.run(s1) match {
            case Left(e)        => Left(e)
            case Right((s2, a)) => Right(s2 -> f(a))
          }
        )
      }

Amine SAGAAMA
@AmineSagaama
Oct 26 12:00

implicit def ParserFunctor[E]: Functor[Parser[E, ?]] =
      new Functor[Parser[E, ?]] {
        def map[A, B](fa: Parser[E, A])(f: A => B): Parser[E, B] =
          Parser(input => fa.run(input) match {
            case Left(e) => Left(e)
            case Right((input, a)) => Right((input, f(a)))
          })
      }

Martin Rau
@mrtnrau
Oct 26 13:00

  implicit def FunctorProductFunctor[F[_]: Functor, G[_]: Functor]: Functor[FunctorProduct[F, G, ?]] =
    new Functor[FunctorProduct[F, G, ?]] {
      def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] =
        FunctorProduct(fa.l.map(f), fa.r.map(f))
    }

Serhiy Konrad
@konradSerge
Oct 26 13:00

implicit def FunctorProductFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorProduct[F, G, ?]] =
      new Functor[FunctorProduct[F, G, ?]] {
        def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] =
          FunctorProduct(fa.l.map(f), fa.r.map(f))
      }

Walid Chergui
@walidchergui_twitter
Oct 26 13:01

 implicit def FunctorProductFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorProduct[F, G, ?]] =
      new Functor[FunctorProduct[F, G, ?]] {
        def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] =
          FunctorProduct(Functor[F].map(fa.l)(f) , Functor[G].map(fa.r)(f))
      }

Amine SAGAAMA
@AmineSagaama
Oct 26 13:02

def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] =
        FunctorProduct(fa.l.map(f), fa.r.map(f))

Martin Rau
@mrtnrau
Oct 26 13:03

        def map[A, B](fa: FunctorSum[F, G, A])(f: A => B): FunctorSum[F, G, B] =
          FunctorSum(fa.run match {
            case Left(fa)  => Left(fa.map(f))
            case Right(ga) => Right(ga.map(f))
          })

H-Works
@manelephant
Oct 26 13:03

  implicit def FunctorProductFunctor[F[_] : Functor, G[_] : Functor]:
  Functor[FunctorProduct[F, G, ?]] =
    new Functor[FunctorProduct[F, G, ?]] {
      def map[A, B](fa: FunctorProduct[F, G, A])(f: A => B): FunctorProduct[F, G, B] = FunctorProduct(fa.l.map(f), fa.r.map(f))
    }

Serhiy Konrad
@konradSerge
Oct 26 13:04

implicit def FunctorSumFunctor[F[_]: Functor, G[_]: Functor]:
    Functor[FunctorSum[F, G, ?]] =
      new Functor[FunctorSum[F, G, ?]] {
        def map[A, B](fa: FunctorSum[F, G, A])(f: A => B): FunctorSum[F, G, B] =
          FunctorSum(fa.run.fold(l => Left(l.map(f)),r => Right(r.map(f))))
      }

Martin Rau
@mrtnrau
Oct 26 13:09

def map[A, B](fga: FunctorNest[F, G, A])(f: A => B): FunctorNest[F, G, B] =
  FunctorNest(fga.run.map(_.map(f)))

  val ListToOption: List ~> Option =
    new ~> [List, Option] {
      def apply[A](fa: List[A]): Option[A] =
        fa match {
          case Nil    => None
          case h :: _ => Some(h)
        }
    }

John A. De Goes
@jdegoes
Oct 26 13:17

  val EitherToFuture: Either[Throwable, ?] ~> scala.concurrent.Future =
    ???

Walid Chergui
@walidchergui_twitter
Oct 26 13:18

 val EitherToList: Either[Throwable, ?] ~> Future = new NaturalTransformation[Either[Throwable, ?] , Future ] {
    override def apply[A](fa: Either[Throwable, A]): Future[A] = fa match {
      case Left(e) => Future.failed(e)
      case Right(v) => Future.successful(v)
    }
  }

H-Works
@manelephant
Oct 26 13:19

  val ListToOption: List ~> Option = new NaturalTransformation[List, Option] {
    def apply[A](fa: List[A]): Option[A] = {
      fa.headOption
    }
  }

  val OptionToList: Option ~> List = new NaturalTransformation[Option, List] {
    def apply[A](fa: Option[A]): List[A] = {
      fa match {
        case Some(a) => List(a)
        case None => List()
      }
    }
  }

Amine SAGAAMA
@AmineSagaama
Oct 26 13:20

val EitherToFuture: Either[Throwable, ?] ~> scala.concurrent.Future = new NaturalTransformation[Either[Throwable, ?], Future] {
    override def apply[A](fa: Either[Throwable, A]): Future[A] = fa match {
      case Left(e) => Future.failed(e)
      case Right(s) => Future.successful(s)
    }
  }

Martin Rau
@mrtnrau
Oct 26 13:29

        def zip[A, B](l: Option[A], r: Option[B]): Option[(A, B)] =
          (l, r) match {
            case (Some(a), Some(b)) => Some(a -> b)
            case _                  => None
          }

Serhiy Konrad
@konradSerge
Oct 26 13:29

def zip[A, B](l: Option[A], r: Option[B]): Option[(A, B)] =
          (l, r) match {
            case (_    , _    ) => None
            case (Some(l1), Some(r1)) => Some(l1 -> r1)
          }

Amine SAGAAMA
@AmineSagaama
Oct 26 13:32

def zip[A, B](l: Option[A], r: Option[B]): Option[(A, B)] =
          (l, r) match {
            case (Some(a), Some(b)) => Some((a, b))
            case _ => None
          }

H-Works
@manelephant
Oct 26 13:32

  object Zip {
    implicit val ZipOption: Zip[Option] =
      new Zip[Option] {
        def map[A, B](fa: Option[A])(f: A => B) = fa.map(f)

        def zip[A, B](l: Option[A], r: Option[B]): Option[(A, B)] = (l, r) match {
          case (_, None) => None
          case (None, _) => None
          case (Some(a), Some(b)) => Some((a, b))
        }
      }
  }

Walid Chergui
@walidchergui_twitter
Oct 26 13:33

 def zip[A, B](l: List[A], r: List[B]): List[(A, B)] =
        (l,r) match {
          case (al::asl, ar::asr) => (al,ar)::zip(asl,asr)
          case (al::Nil, ar::Nil) => (al,ar)::Nil
          case (Nil, Nil) => Nil
        }

Amine SAGAAMA
@AmineSagaama
Oct 26 13:35

def zip[A, B](l: List[A], r: List[B]): List[(A, B)] =
      (l, r) match {
        case (a :: as, b :: bs) =>
          (a, b) :: zip(as, bs)
        case _ => Nil
      }

Martin Rau
@mrtnrau
Oct 26 13:39

      def zip[A, B](l: Parser[E, A], r: Parser[E, B]): Parser[E, (A, B)] =
        Parser( s1 =>
          l.run(s1) match {
            case Left(e)        => Left(e)
            case Right((s2, a)) =>
              r.run(s2) match {
                case Left(e)        => Left(e)
                case Right((s3, b)) => Right(s3 -> (a -> b))
              }
          }
        )

Amine SAGAAMA
@AmineSagaama
Oct 26 13:44

def zip[A, B](l: Parser[E, A], r: Parser[E, B]): Parser[E, (A, B)] =
        Parser[E, (A, B)](input =>
          l.run(input) match {
            case Left(e1) => Left(e1)
            case Right((input, a)) => r.run(input) match {
              case Left(e2) => Left(e2)
              case Right((input, b)) => Right(input -> (a, b))
            }
          }
        )

Martin Rau
@mrtnrau
Oct 26 13:50

      def zip[A, B](l: Future[A], r: Future[B]): Future[(A, B)] =
        l.flatMap(a => r.map(b => a -> b))
        // l.zip(r)

Walid Chergui
@walidchergui_twitter
Oct 26 13:51

 def zip[A, B](l: Future[A], r: Future[B]): Future[(A, B)] = for{
          a <- l
          b <- r
        } (a,b)

Serhiy Konrad
@konradSerge
Oct 26 13:55

def point[A](a: => A): Option[A] = Some(a)

Serhiy Konrad
@konradSerge
Oct 26 14:01

def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] = fa.flatMap(a => f.map(_(a)))

Olivier Schultz
@olivierschultz
Oct 26 14:01

val OptionApplicative: Applicative[Option] =
    new Applicative[Option] {
      def point[A](a: => A): Option[A] = Some(a)

      def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] =
        (fa, f) match {
          case (Some(a), Some(f)) => point(f(a))
          case _                  => None
        }
    }

H-Works
@manelephant
Oct 26 14:02

    def point[A](a: => A): Option[A] = Some(a)

Amine SAGAAMA
@AmineSagaama
Oct 26 14:03

def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] =
      (fa, f) match {
        case (Some(a), Some(f)) => Some(f(a))
        case _ => None
      }

Philippe Hong
@hwki77
Oct 26 14:04

  val OptionApplicative: Applicative[Option] =
    new Applicative[Option] {
      def point[A](a: => A): Option[A] = Some(a)

      def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] =
        (fa, f) match {
          case (None, None) => None
          case (None, Some(b)) => None
          case(Some(a), None) => None
          case (Some(a), Some(b)) => Some(b(a))
        }
    }

Serhiy Konrad
@konradSerge
Oct 26 14:08

new Applicative[Option] {
      def point[A](a: => A): Option[A] = Some(a)

      def zip[A, B](fa: => Option[A], fb: Option[B]): Option[(A, B)] = fa.flatMap(a => fb.map((a, _)))

      def ap1[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] = zip(f, fa).map(t => t._1(t._2))

      def ap[A, B](fa: => Option[A])(f: => Option[A => B]): Option[B] = fa.flatMap(a => f.map(_(a)))
    }

def point[A](a: => A): Parser[E, A] = Parser(input => Right(input, a))

Amine SAGAAMA
@AmineSagaama
Oct 26 14:13

def point[A](a: => A): Parser[E, A] = {
        Parser(input => Right((input, a)))
      }

Martin Rau
@mrtnrau
Oct 26 14:14

      def point[A](a: => A): Parser[E, A] =
        Parser(s => Right(s -> a))

      def ap[A, B](fa: => Parser[E, A])(f: => Parser[E, A => B]): Parser[E, B] =
        Parser( s =>
          fa.run(s) match {
            case Left(e)       => Left(e)
            case Right((s, a)) =>
              f.run(s) match {
                case Left(e)       => Left(e)
                case Right((s, f)) => Right(s -> f(a))
              }
          }
        )

Amine SAGAAMA
@AmineSagaama
Oct 26 14:17

def ap[A, B](fa: => Parser[E, A])(
        f: => Parser[E, A => B]): Parser[E, B] =
        Parser(
          input => fa.run(input) match {
            case Left(e1) => Left(e1)
            case Right((input, a)) => f.run(input) match {
              case Left(e2) => Left(e2)
              case Right((input, g)) => Right((input, g(a)))
            }
          }
        )

Serhiy Konrad
@konradSerge
Oct 26 14:25

def ap[A, B](fa: => Parser[E, A])(
        f: => Parser[E, A => B]): Parser[E, B] =
        Parser[E, B]( (input: String) =>
          (fa.run(input): Either[E, (String, A)]) match {
              case Left(e: E) => Left(e)
              case Right((input: String, a: A)) => (f.run(input): Either[E, (String, A => B)]) match {
                case Left(e: E) => Left(e)
                case Right((input: String, b: (A => B))) => Right((input, b(a)))
              }
            }
        )

Serhiy Konrad
@konradSerge
Oct 26 15:01

implicit val MonadBTree: Monad[BTree] =
    new Monad[BTree] {
      def point[A](a: => A): BTree[A] = Leaf(a)

      def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] = fa match {
        case Leaf(a) => f(a)
        case Fork(fl, fr) => Fork(bind(fl)(f), bind(fr)(f))
      }
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 15:03

implicit val MonadBTree: Monad[BTree] =
  new Monad[BTree] {
    def point[A](a: => A): BTree[A] =
      Leaf(a)

    def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] =
      fa match {
        case Leaf(a) => f(a)
        case Fork(f1, f2) =>
          Fork(bind(f1)(f), bind(f2)(f))
      }
  }

H-Works
@manelephant
Oct 26 15:07

  implicit val MonadBTree: Monad[BTree] = new Monad[BTree] {
    def point[A](a: => A): BTree[A] = Leaf(a)

    def bind[A, B](fa: BTree[A])(f: A => BTree[B]): BTree[B] = fa match {
      case Leaf(a) => f(a)
      case Fork(l, r) => Fork(bind(l)(f), bind(r)(f))
    }
  }

Olivier Schultz
@olivierschultz
Oct 26 15:14

 implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E, A] = Parser( input => Right(input, a))

      def bind[A, B](fa: Parser[E, A])(f: A => Parser[E, B]): Parser[E, B] =
        Parser[E, B](
          input =>
            fa.run(input) match {
              case Left(e)            => Left(e)
              case Right((string, a)) => f(a).run(string)
            }
        )
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 15:15

implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E, A] =
        Parser[E, A](input => Right(input, a))

      def bind[A, B](fa: Parser[E, A])(f: A => Parser[E, B]): Parser[E, B] =
        Parser[E, B](
          input => fa.run(input) match {
            case Left(e1) => Left(e1)
            case Right((input, a)) => f(a).run(input)
          }
        )
    }

H-Works
@manelephant
Oct 26 15:17

  implicit def MonadParser[E]: Monad[Parser[E, ?]] =
    new Monad[Parser[E, ?]] {
      def point[A](a: => A): Parser[E, A] = Parser(input => Right(input, a))

      def bind[A, B](fa: Parser[E, A])(f: A => Parser[E, B]): Parser[E, B] =
        Parser[E, B](
          input => fa.run(input) match {
            case Left(e) => Left(e)
            case Right((string, a)) => f(a).run(string)
          }
        )
    }

Serhiy Konrad
@konradSerge
Oct 26 15:18

case class Identity[A](run: A)
  implicit val IdentityMonad: Monad[Identity] =
    new Monad[Identity] {
      def point[A](a: => A): Identity[A] = Identity(a)

      def bind[A, B](fa: Identity[A])(f: A => Identity[B]): Identity[B] = f(fa.run)
    }

Amine SAGAAMA
@AmineSagaama
Oct 26 15:19

case class Identity[A](run: A)

  implicit val IdentityMonad: Monad[Identity] =
    new Monad[Identity] {
      def point[A](a: => A): Identity[A] =
        Identity(a)

      def bind[A, B](fa: Identity[A])(f: A => Identity[B]): Identity[B] =
        f(fa.run)
    }

Serhiy Konrad
@konradSerge
Oct 26 15:24
@jdegoes can you please in a few sentence explain what are optics are for in real world sense? as you did with programs
John A. De Goes
@jdegoes
Oct 26 15:27
@konradSerge Optics allow you to access and modify deeply nested immutable data structures, in a composable way, without all the normal pain of (a.copy(b = a.b.copy(c = a.b.c.copy(...)))
If we have a half an hour, we can cover them tomorrow.
Serhiy Konrad
@konradSerge
Oct 26 15:27
oh, thanks a lot
have a nice evening everyone
balanka
@balanka
Oct 26 15:29
thanks John
_

John A. De Goes/functional-scala

Olivier Schultz
@olivierschultz
Oct 27 08:13

val yourName2: Program[Unit] = for {
    _    <- writeLine("What is your name?")
    name <- readLine
    _    <- writeLine("Hello" + name + ", good to meet you!")
  } yield ()

Philippe Hong
@hwki77
Oct 27 08:13

for {
    _ <- writeLine("What is your name?")
    name <- readLine()
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

Amine SAGAAMA
@AmineSagaama
Oct 27 08:14

 val yourName2: Program[Unit] =
  for {
    _ <- writeLine("What is your name?")
    name <- readLine
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

H-Works
@manelephant
Oct 27 08:15

  val yourName2: Program[Unit] = 
  for {
    _ <- writeLine("What is your name ?")
    name <- readLine
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

Olivier Schultz
@olivierschultz
Oct 27 08:15

val yourName3: Program[Unit] = for {
    name <- getName
    _    <- writeLine("Hello" + name + ", good to meet uou!")
  } yield ()

Philippe Hong
@hwki77
Oct 27 08:16

val yourName3: Program[Unit] = for {
    name <- getName
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

Amine SAGAAMA
@AmineSagaama
Oct 27 08:16

val yourName3: Program[Unit] =
  for {
    name <- getName
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

H-Works
@manelephant
Oct 27 08:17

  val yourName3: Program[Unit] =
  for {
    name <- getName
    _ <- writeLine("Hello, " + name + ", good to meet you!")
  } yield ()

Martin Rau
@mrtnrau
Oct 27 08:19

  def interpret[A](program: Program[A]): A =
    program match {
      case Program.WriteLine(string, next) =>
        println(string)
        interpret(next)
      case Program.ReadLine(next) =>
        val input = scala.io.StdIn.readLine()
        interpret(next(input))
      case Program.Return(a) =>
        a()
    }

Olivier Schultz
@olivierschultz
Oct 27 08:22

def interpret[A](program: Program[A]): A = program match {
    case Program.Return(value)         => value()
    case Program.WriteLine(line, next) => println(line); interpret(next)
    case Program.ReadLine(next)        => interpret(next(scala.io.StdIn.readLine()))
  }

Walid Chergui
@walidchergui_twitter
Oct 27 08:23

def interpret[A](program: Program[A]): A = {
    program match {
      case Return(value) => value.apply
      case WriteLine(line, next) =>
        println(line) ;
        interpret(next)
      case ReadLine(next) =>
        val in = scala.io.StdIn.readLine()
        interpret(next(in))

    }
  }

Martin Rau
@mrtnrau
Oct 27 08:39

  def forEach[A, B](values: List[A])(body: A => Program[B]): Program[List[B]] =
    sequence(values.map(body(_)))

Walid Chergui
@walidchergui_twitter
Oct 27 08:40

 def foreach[A,B](as: List[A])(body: A => Program[B]): Program[List[B]] = {

    sequence(as.map(a => body(a))) 
  }

John A. De Goes
@jdegoes
Oct 27 08:52

  def ageExplainer2: Program[Unit] =
    for {
      _    <- writeLine("What is your age?")
      line <- readLine
      _    <- scala.util.Try(line.toInt).toOption match {
                case Some(age) =>
                  writeLine(
                    if (age < 12) "You are a kid"
                    else if (age < 20) "You are a teenager"
                    else if (age < 30) "You are a grownup"
                    else if (age < 50) "You are an adult"
                    else if (age < 80) "You are a mature adult"
                    else if (age < 100) "You are elderly"
                    else "You are probably lying.")
                case None =>
                  writeLine("That's not an age, try again") *>
                  ageExplainer2
              }
    } yield ()

Philippe Hong
@hwki77
Oct 27 09:09

type Exceptional[A] = IO[Exception, A]

Amine SAGAAMA
@AmineSagaama
Oct 27 09:09

type Exceptional[A] = IO[Exception, A]

Olivier Schultz
@olivierschultz
Oct 27 09:09

type Exceptional[A] = IO[Exception, A]
type Task[A] = IO[Throwable, A]
type NonFailing[A]  = IO[Nothing, A]
type NonReturning[E] = IO[E, Nothing]
type NonTerminating  = IO[Nothing, Nothing]

Amine SAGAAMA
@AmineSagaama
Oct 27 09:11

type Task[A] = IO[Throwable, Option[A]]

Philippe Hong
@hwki77
Oct 27 09:11

type Task[A] = IO[Throwable, A]

Amine SAGAAMA
@AmineSagaama
Oct 27 09:11

type NonFailing[A] = IO[Nothing, Option[A]]

Philippe Hong
@hwki77
Oct 27 09:12

type NonReturning[E] = IO[E, Nothing]

Amine SAGAAMA
@AmineSagaama
Oct 27 09:12

type NonReturning[E] = IO[Option[E], Nothing]

Martin Rau
@mrtnrau
Oct 27 09:12

  type NonReturning[E] = IO[Option[E], Nothing]

H-Works
@manelephant
Oct 27 09:13

  type NonFailing[A] = IO[Nothing, Option[A]]

Philippe Hong
@hwki77
Oct 27 09:13

type NonTerminating = IO[Nothing, Nothing]

Amine SAGAAMA
@AmineSagaama
Oct 27 09:13

type NonTerminating = IO[Nothing, Nothing]

Philippe Hong
@hwki77
Oct 27 09:15

val ioInteger: IO[Nothing, Int] = IO.now(2)

H-Works
@manelephant
Oct 27 09:15

  val ioInteger: IO[Nothing, Int] = IO.now(2)

Amine SAGAAMA
@AmineSagaama
Oct 27 09:16

val ioString: IO[Nothing, String] = IO.point("Functional Scala")

Olivier Schultz
@olivierschultz
Oct 27 09:16

val ioString: IO[Nothing, String] = IO.point("FP")

H-Works
@manelephant
Oct 27 09:16

 val ioString: IO[Nothing, String] = IO.point("Functional Scala")

Olivier Schultz
@olivierschultz
Oct 27 09:16

val failedInput: IO[String, Nothing] = IO.fail("error")

Philippe Hong
@hwki77
Oct 27 09:18

val failedInput: IO[String, Nothing] = IO.fail("Bad Input")

H-Works
@manelephant
Oct 27 09:18

  val failedInput: IO[String, Nothing] = IO.fail("Bad input")

Martin Rau
@mrtnrau
Oct 27 09:21

  (IO.point(42).map(_.toString) : IO[Nothing, String])

Philippe Hong
@hwki77
Oct 27 09:21

(IO.point(42).map(_.toString) : IO[Nothing, String])

Martin Rau
@mrtnrau
Oct 27 09:21

  (IO.fail(42).leftMap(_.toString) : IO[String, Nothing])

  val ioXPlusY: IO[Nothing, Int] = ioX.flatMap(x => ioY.map(x + _))

Philippe Hong
@hwki77
Oct 27 09:23

val ioXPlusY: IO[Nothing, Int] = ioX.flatMap(x => ioY.map(y => x + y))

Amine SAGAAMA
@AmineSagaama
Oct 27 09:23

val ioXPlusY: IO[Nothing, Int] = ioX.flatMap(b => ioY.map(b + _))

Olivier Schultz
@olivierschultz
Oct 27 09:24

def ifThenElse[E, A](bool: IO[E, Boolean])(
    ifTrue: IO[E, A], ifFalse: IO[E, A]): IO[E, A] =
    bool.flatMap(b => if (b) ifTrue else ifFalse )
  val exampleIf = ifThenElse(IO.point(true))(IO.point("It's true!"), IO.point("It's false!"))

Martin Rau
@mrtnrau
Oct 27 09:25

  def ifThenElse[E, A](bool: IO[E, Boolean])(ifTrue: IO[E, A], ifFalse: IO[E, A]): IO[E, A] =
    bool.flatMap(if (_) ifTrue else ifFalse)

Philippe Hong
@hwki77
Oct 27 09:26

def ifThenElse[E, A](bool: IO[E, Boolean])(
    ifTrue: IO[E, A], ifFalse: IO[E, A]): IO[E, A] =
    bool.flatMap(x => x match {
      case true => ifTrue
      case false => ifFalse
    })

Serhiy Konrad
@konradSerge
Oct 27 09:27

IO.point(42).flatMap(v1 => IO.point(58).map(v2 => "The total is: " + (v1 + v2).toString))

Philippe Hong
@hwki77
Oct 27 09:28

val yo = IO.point(42).flatMap(x => IO.point(58).map(y => "The total is: " + (x + y).toString))

H-Works
@manelephant
Oct 27 09:30

IO.point(42).flatMap(v1 => IO.point(58).map(v2 => "Total is " + (v1 + v2).toString))

Olivier Schultz
@olivierschultz
Oct 27 09:32

def decode2[E](read: IO[E, Byte]): IO[E, Either[Byte, Int]] =
    for {
      b1 <- read
      e  <- if (b1 < 0) IO.now(Left(b1))
      else for {
        b2 <- read
        b3 <- read
        b4 <- read
      } yield Right(b1.toInt + (b2.toInt << 8) + (b3.toInt << 16) + (b4.toInt << 24))
    } yield e

Olivier Schultz
@olivierschultz
Oct 27 09:41

def getName2[E](print: String => IO[E, String], read: IO[E, String]): IO[E, Option[String]] = {
    print("Do you want to enter your name?")
    read.map(_.toLowerCase.take(1)).flatMap {
      case "y" => read.map(Some(_))
      case _   => IO.now(None)
    }
  }

Martin Rau
@mrtnrau
Oct 27 09:45

  def forever2[A](action: IO[Nothing, A]): IO[Nothing, Nothing] =
    action *> forever2(action)

Olivier Schultz
@olivierschultz
Oct 27 09:46

def forever2[A](action: IO[Nothing, A]): IO[Nothing, Nothing] =
    action.flatMap(_ => forever2(action))

H-Works
@manelephant
Oct 27 09:46

  def forever2[A](action: IO[Nothing, A]): IO[Nothing, Nothing] = forever2(action)

Martin Rau
@mrtnrau
Oct 27 09:49

  def repeatN2[E](n: Int, action: IO[E, Unit]): IO[E, Unit] =
    if (n <= 0)
      IO.point(Unit)
    else
      action *> repeatN2(n - 1, action)

Olivier Schultz
@olivierschultz
Oct 27 09:49

  def repeatN2[E](n: Int, action: IO[E, Unit]): IO[E, Unit] =
    if (n <= 0) IO.unit
    else action.flatMap(_ => repeatN2(n - 1, action))

Walid Chergui
@walidchergui_twitter
Oct 27 09:51

  def repeatN2[E](n: Int, action: IO[E, Unit]): IO[E, Unit] =
    for {
      _ <- action if(n > 0) 
      _ <-  repeatN2(n - 1, action)

    } yield ()

Olivier Schultz
@olivierschultz
Oct 27 09:52

IO.point(42).flatMap(left => IO.point(19).map(_ => left))
IO.point(42).leftMap(_ => IO.point(19))

val stringFailure1: IO[String, Int] = IO.fail("error")

Martin Rau
@mrtnrau
Oct 27 09:56

  val stringFailure1: IO[String, Int] =
    IO.fail("oops")

Philippe Hong
@hwki77
Oct 27 09:57

val intFailure: IO[Int, String] = IO.fail(-1)

Olivier Schultz
@olivierschultz
Oct 27 09:57

val stringFailure2: IO[String, String] = intFailure.leftMap(_.toString)

Amine SAGAAMA
@AmineSagaama
Oct 27 09:58

val stringFailure2: IO[String, String] = intFailure.leftMap(_.toString)

Martin Rau
@mrtnrau
Oct 27 09:59

  def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
    if (i < 0 || i >= a.length)
      IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")"))
    else
      IO.point(a(i))

Amine SAGAAMA
@AmineSagaama
Oct 27 09:59

def accessArr2[A](i: Int, a: Array[A]): IO[IndexOutOfBoundsException, A] =
      if (i < 0 || i >= a.length) IO.fail(new IndexOutOfBoundsException("The index " + i + " is out of bounds [0, " + a.length + ")"))
      else IO.now(a(i))

def divide2(n: Int, d: Int): Int =
      if (d == 0) throw new ArithmeticException(DenomIsZero.toString)
      else (n / d)

H-Works
@manelephant
Oct 27 10:01

  def divide2(n: Int, d: Int): Int = if (d == 0) throw new IndexOutOfBoundsException("error") else n / d

Philippe Hong
@hwki77
Oct 27 10:05

val recovered1: IO[Nothing, Int] =
    divide1(100, 0).attempt.map {
      case Left(error) => -1
      case Right(value) => value
    }

Amine SAGAAMA
@AmineSagaama
Oct 27 10:05

val recovered1: IO[Nothing, Int] =
    divide1(100, 0).attempt.map {
      case Left(error) => -1
      case Right(value) => value
    }

John A. De Goes
@jdegoes
Oct 27 10:06
:+1:
H-Works
@manelephant
Oct 27 10:07

  val recovered1: IO[Nothing, Int] = divide1(100, 0).attempt.map {
    case Left(error) => -1
    case Right(value) => value
  }

H-Works
@manelephant
Oct 27 10:40
Can someone give me the building code ?
Olivier Schultz
@olivierschultz
Oct 27 10:41
Which one?
H-Works
@manelephant
Oct 27 10:41
One on the street
Olivier Schultz
@olivierschultz
Oct 27 10:42
on my way, I dont know it either
H-Works
@manelephant
Oct 27 10:42
Thanks !
Walid Chergui
@walidchergui_twitter
Oct 27 11:03

 val recovered2: IO[Nothing, Int] =
    divide1(100, 0).redeem( _ =>  IO.async[Nothing,Int](_ => ()), IO.now )

Alberto Zaccagni
@lazywithclass
Oct 27 11:06
I think I am stuck outside too...
Amine SAGAAMA
@AmineSagaama
Oct 27 11:19

def nanoTime: IO[Nothing, Long] = IO.sync(System.nanoTime())

Olivier Schultz
@olivierschultz
Oct 27 11:21

def sysExit(code: Int): IO[SecurityException, Unit] = IO.syncCatch(System.exit(code)) {
    case e: SecurityException => e
  }

  def arrayUpdate[A](a: Array[A], i: Int, f: A => A): IO[ArrayIndexOutOfBoundsException, Unit] =
    IO.syncCatch(a.update(i, f(a(i)))) { case e : ArrayIndexOutOfBoundsException => e }

Philippe Hong
@hwki77
Oct 27 11:26

def arrayUpdate[A](a: Array[A], i: Int, f: A => A): IO[Throwable, Unit] =
    IO.syncThrowable(a.update(i, f(a(i))))

Martin Rau
@mrtnrau
Oct 27 11:28

  def arrayUpdate[A](a: Array[A], i: Int, f: A => A): IO[ArrayIndexOutOfBoundsException, Unit] =
    IO.syncCatch(a.update(i, f(a(i)))) {
      case e: ArrayIndexOutOfBoundsException => e
    }

Serhiy Konrad
@konradSerge
Oct 27 11:28
none
H-Works
@manelephant
Oct 27 11:28

  def arrayUpdate[A](a: Array[A], i: Int, f: A => A): IO[IndexOutOfBoundsException, Unit] =
    IO.syncCatch(a.update(i, f(a(i)))) {
      case e: IndexOutOfBoundsException => e
    }

Olivier Schultz
@olivierschultz
Oct 27 12:04

val raced1: IO[java.io.IOException, Unit] = leftContestent1 race rightContestent1

Martin Rau
@mrtnrau
Oct 27 12:04

  val raced1: IO[java.io.IOException, Unit] =
    leftContestent1.race(rightContestent1)

Philippe Hong
@hwki77
Oct 27 12:04

  val raced1: IO[java.io.IOException, Unit] =
    leftContestent1.race(rightContestent1)

Olivier Schultz
@olivierschultz
Oct 27 12:08

 val leftWork1: IO[Nothing, Int] = fibonacci(10)
  val rightWork1: IO[Nothing, Int] = fibonacci(10)
  val par1: IO[Nothing, (Int, Int)] = leftWork1 par rightWork1

Amine SAGAAMA
@AmineSagaama
Oct 27 12:08

val leftWork1: IO[Nothing, Int] = fibonacci(10)
    val rightWork1: IO[Nothing, Int] = fibonacci(10)
    val par1: IO[Nothing, (Int, Int)] = leftWork1.par(rightWork1)

Philippe Hong
@hwki77
Oct 27 12:08

val par1: IO[Nothing, (Int, Int)] = leftWork1.par(rightWork1)

H-Works
@manelephant
Oct 27 12:09

  val raced2: IO[Exception, Unit] = leftContestent2.race(rightContestent2)

 val par1: IO[Nothing, (Int, Int)] = leftWork1.par(rightWork1)

 val workersInParallel: IO[Nothing, List[Int]] = IO.parAll(workers)

Olivier Schultz
@olivierschultz
Oct 27 12:12
IO.parAll(workers)
Philippe Hong
@hwki77
Oct 27 12:23

def myPar[E, A, B](left: IO[E, A], right: IO[E, B]): IO[E, (A, B)] =
    for {
      leftF: Fiber[E, A] <- left.fork
      rightF: Fiber[E, B] <- right.fork

      l <- leftF.join
      r <- rightF.join
    } yield (l,r)

Walid Chergui
@walidchergui_twitter
Oct 27 12:24

  def myPar[E, A, B](left: IO[E, A], right: IO[E, B]): IO[Nothing, Fiber[E, (A, B)]] = for {
    lf: Fiber[E, A] <- left.fork
    rf <- right.fork
  } yield lf.zip(rf)

Philippe Hong
@hwki77
Oct 27 12:32

val inParallel: IO[Nothing, List[Int]] =
    IO.parTraverse(fibsToCompute)(fibonacci)

Amine SAGAAMA
@AmineSagaama
Oct 27 12:34

val inParallel: IO[Nothing, List[Int]] =
      IO.parTraverse(fibsToCompute)(fibonacci)

H-Works
@manelephant
Oct 27 12:35

  val fibsToCompute = List(1, 2, 3, 4, 5, 6, 7)
  val inParallel: IO[Nothing, List[Int]] =
    IO.parTraverse(fibsToCompute)(int => fibonacci(int))

Martin Rau
@mrtnrau
Oct 27 13:07

  val tryCatch2: IO[Exception, Unit] =
    IO.fail(new Exception("Uh oh")).ensuring(IO.sync(println("On the way out...")))

Philippe Hong
@hwki77
Oct 27 13:08

val tryCatch2: IO[Exception, Unit] =
    IO.fail(new Exception("Uh oh")).ensuring(IO.sync(println("On the way out....")))

Martin Rau
@mrtnrau
Oct 27 13:18

  def readFile2(file: File): IO[Exception, List[Byte]] = {
    def readAll(is: InputStream, acc: List[Byte]): IO[Exception, List[Byte]] =
      is.read.flatMap {
        case None => IO.now(acc.reverse)
        case Some(byte) => readAll(is, byte :: acc)
      }

    def close(is: InputStream): IO[Nothing, Unit] =
      IO.point(is.close)

    def open(file: File): IO[Exception, InputStream] =
      InputStream.openFile(file)

    open(file).bracket(close)(readAll(_, Nil))
  }

Walid Chergui
@walidchergui_twitter
Oct 27 13:22

def readFile2(file: File): IO[Exception, List[Byte]] = InputStream.openFile(file).bracket(stream =>  IO.sync(stream.close)) {
    stream => readAll(stream, Nil)
  }

John A. De Goes
@jdegoes
Oct 27 13:26

def readFileTCF2(file: File): IO[Exception, List[Byte]] = {
    val acquire = IO.syncException(new FileInputStream(file))

    val release =
      (fis: FileInputStream) =>
        IO.syncException(fis.close()).attempt.void

    val use =
      (fis: FileInputStream) =>
        IO.syncException {
          val array = Array.ofDim[Byte](file.length.toInt)
          fis.read(array)
          array.toList
        }

    acquire.bracket(release)(use)
  }

Amine SAGAAMA
@AmineSagaama
Oct 27 13:30

val incrementedBy10: IO[Nothing, Int] =
    for {
      ref <- makeZero
      value <- (ref.get : IO[Nothing, Int])
      _ <- (ref.set(value + 10) : IO[Nothing, Unit])
      value <- (ref.get : IO[Nothing, Int])
    } yield value

Philippe Hong
@hwki77
Oct 27 13:30

val incrementedBy10: IO[Nothing, Int] =
  for {
    ref <- makeZero
    value <- (ref get : IO[Nothing, Int])
    _ <- (ref set value + 10 : IO[Nothing, Unit])
    value <- (ref get : IO[Nothing, Int])
  } yield value

Amine SAGAAMA
@AmineSagaama
Oct 27 13:32

val atomicallyIncrementedBy10PlusGet: IO[Nothing, Int] =
    for {
      ref <- makeZero
      value <- ref.modify(v => (v, v + 10))
    } yield value

Olivier Schultz
@olivierschultz
Oct 27 13:49

  val offeredTaken1: IO[Nothing, (Int, Int)] =
    for {
      queue <- makeQueue
      _     <- (queue.offer(10) *> queue.offer(10): IO[Nothing, Unit]).fork
      v1    <- (queue.take : IO[Nothing, Int])
      v2    <- (queue.take : IO[Nothing, Int])
    } yield (v1, v2)

John A. De Goes
@jdegoes
Oct 27 14:08

val makeCounter: IO[Nothing, Message => IO[Nothing, Int]] =
    for {
      counter  <- Ref(0)
      mailbox  <- Queue.bounded[(Message, Promise[Nothing, Int])](100)
      _        <- (mailbox.take.flatMap {
                    case (Increment(amount), promise) =>
                      for {
                        newValue <- counter.update(_ + amount)
                        _        <- promise.complete(newValue)
                      } yield ()
                   }.forever : IO[Nothing, Fiber[Nothing, Nothing]])
    } yield { (message: Message) =>
      for {
        promise <- Promise.make[Nothing, Int]
        _       <- mailbox.offer(message -> promise)
        value   <- promise.get
      } yield value 
    }

Serhiy Konrad
@konradSerge
Oct 27 14:30
```scala def mySchedule[A]: Schedule[A, List[A]] =
(
Schedule.exponential(10.milliseconds).whileOutput(_ < 60.seconds)
andThen
Schedule.fixed(60.seconds) && Schedule.recurs(100)
).jittered
what is missing?
```scala
This message was deleted

def mySchedule[A]: Schedule[A, List[A]] =
    (
      Schedule.exponential(10.milliseconds).whileOutput(_ < 60.seconds)
      andThen
      Schedule.fixed(60.seconds) && Schedule.recurs(100)
    ).jittered *> Schedule.collect

H-Works
@manelephant
Oct 27 14:35
WebCrawler
John A. De Goes
@jdegoes
Oct 27 14:35
Vote for: Web Crawler or Hangman Game
Alberto Zaccagni
@lazywithclass
Oct 27 14:35
Web crawler
pahann
@pahann
Oct 27 14:35
Crawler =)
Serhiy Konrad
@konradSerge
Oct 27 14:35
Web crawler
Amine SAGAAMA
@AmineSagaama
Oct 27 14:35
Web Crawler
Walid Chergui
@walidchergui_twitter
Oct 27 14:35
Both :p
Martin Rau
@mrtnrau
Oct 27 14:35
Web Crawler
Philippe Hong
@hwki77
Oct 27 14:36
Web Crawler
balanka
@balanka
Oct 27 14:36
Game
John A. De Goes
@jdegoes
Oct 27 15:10

  def crawlIO[E: Monoid, A: Monoid](
    seeds     : Set[URL],
    router    : URL => Set[URL],
    processor : (URL, String) => IO[E, A]): IO[Nothing, Crawl[E, A]] = {
    def loop(urls: Set[URL], crawled: Set[URL]): IO[Nothing, (Set[URL], Crawl[E, A])] =
      IO.traverse(urls) { url =>
        getURL(url).redeem(
          _    => IO.point(Set.empty[URL] -> mzero[Crawl[E, A]]),
          html =>
            for {
              crawl <- processor(url, html).
                         redeemPure(Crawl(_, mzero[A]), Crawl(mzero[E], _))
              urls = extractURLs(url, html).toSet.flatMap(router) -- crawled
              tuple <- loop(urls, urls ++ crawled)
            } yield (Set.empty[URL] -> crawl) |+| tuple
        )
      }.map(_.foldMap())

    loop(seeds, Set.empty[URL]).map(_._2)
  }

John A. De Goes
@jdegoes
Oct 27 15:29

  def crawlIOPar[E: Monoid, A: Monoid](
    seeds     : Set[URL],
    router    : URL => Set[URL],
    processor0: (URL, String) => IO[E, A]): IO[Nothing, Crawl[E, A]] = {
       def processor(url: URL, html: String):  IO[Nothing, Crawl[E, A]] =
         processor0(url, html).redeemPure(Crawl(_, mzero[A]), Crawl(mzero[E], _))

       def loop(urls: Set[URL], ref: Ref[(Set[URL], Crawl[E, A])]): IO[Nothing, Unit] =
         IO.parTraverse(urls) { url =>
           getURL(url).redeem(_ => IO.unit,
             html =>
               for {
                 crawl <- processor(url, html)
                 urls  <- ref.get.map(_._1).map(crawled =>
                            extractURLs(url, html).toSet.flatMap(router) --
                            crawled)
                 _     <- ref.update { case (urls0, crawl0) => (urls0 ++ urls, crawl0 |+| crawl) }
                 _     <- loop(urls, ref)
               } yield ()
           )
         }.void

      for {
        ref   <- Ref(seeds -> mzero[Crawl[E, A]])
        _     <- loop(seeds, ref)
        crawl <- ref.get.map(_._2)
      } yield crawl
    }

balanka
@balanka
Oct 27 15:37
Thank you very much John
Martin Rau
@mrtnrau
Oct 27 15:37
Thank you for the course!
Serhiy Konrad
@konradSerge
Oct 27 15:38
@jdegoes thanks a lot. when approximately 5 day workshop is going to happen? :) do you have a schedule somewhere?
Amine SAGAAMA
@AmineSagaama
Oct 27 16:29
the next one will be in San Francisco
https://www.eventbrite.com/e/functional-scala-by-john-a-de-goes-sf-silicon-valley-edition-tickets-49652715609
John A. De Goes
@jdegoes
Oct 27 17:22
That’s only 4 days (SF). I will do a 5 day one next year (maybe Q1).
It’s easier actually than doing 2 three day workshops back to back :D
Thanks all for attending! :)
H-Works
@manelephant
Oct 27 17:35
Thank you John it was very well explained
_
